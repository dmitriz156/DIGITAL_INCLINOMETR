
DI-601_MPU-6050.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00001d02  00001d96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009f  00800078  00800078  00001dae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b3b  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6c  00000000  00000000  00005be3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001852  00000000  00000000  0000684f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cb8  00000000  00000000  000080a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001969  00000000  00000000  00008d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041b3  00000000  00000000  0000a6c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000e878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
       4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
       6:	41 c0       	rjmp	.+130    	; 0x8a <__bad_interrupt>
       8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
       a:	3f c0       	rjmp	.+126    	; 0x8a <__bad_interrupt>
       c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
       e:	3d c0       	rjmp	.+122    	; 0x8a <__bad_interrupt>
      10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
      12:	3b c0       	rjmp	.+118    	; 0x8a <__bad_interrupt>
      14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
      16:	4a c4       	rjmp	.+2196   	; 0x8ac <__vector_11>
      18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
      1a:	e8 c4       	rjmp	.+2512   	; 0x9ec <__vector_13>
      1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
      1e:	35 c0       	rjmp	.+106    	; 0x8a <__bad_interrupt>
      20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
      22:	33 c0       	rjmp	.+102    	; 0x8a <__bad_interrupt>
      24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
      26:	08 4a       	sbci	r16, 0xA8	; 168
      28:	d7 3b       	cpi	r29, 0xB7	; 183
      2a:	3b ce       	rjmp	.-906    	; 0xfffffca2 <__eeprom_end+0xff7efca2>
      2c:	01 6e       	ori	r16, 0xE1	; 225
      2e:	84 bc       	out	0x24, r8	; 36
      30:	bf fd       	.word	0xfdbf	; ????
      32:	c1 2f       	mov	r28, r17
      34:	3d 6c       	ori	r19, 0xCD	; 205
      36:	74 31       	cpi	r23, 0x14	; 20
      38:	9a bd       	out	0x2a, r25	; 42
      3a:	56 83       	std	Z+6, r21	; 0x06
      3c:	3d da       	rcall	.-2950   	; 0xfffff4b8 <__eeprom_end+0xff7ef4b8>
      3e:	3d 00       	.word	0x003d	; ????
      40:	c7 7f       	andi	r28, 0xF7	; 247
      42:	11 be       	out	0x31, r1	; 49
      44:	d9 e4       	ldi	r29, 0x49	; 73
      46:	bb 4c       	sbci	r27, 0xCB	; 203
      48:	3e 91       	ld	r19, -X
      4a:	6b aa       	std	Y+51, r6	; 0x33
      4c:	aa be       	out	0x3a, r10	; 58
      4e:	00 00       	nop
      50:	00 80       	ld	r0, Z
      52:	3f 00       	.word	0x003f	; ????

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 31       	cpi	r26, 0x17	; 23
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	44 d5       	rcall	.+2696   	; 0xb10 <main>
      88:	3a ce       	rjmp	.-908    	; 0xfffffcfe <__eeprom_end+0xff7efcfe>

0000008a <__bad_interrupt>:
      8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <I2C_BeginTransmission>:
	}
	
	return i2c_status;
	
	/* Function End */
}
      8c:	24 ea       	ldi	r18, 0xA4	; 164
      8e:	26 bf       	out	0x36, r18	; 54
      90:	06 b6       	in	r0, 0x36	; 54
      92:	07 fc       	sbrc	r0, 7
      94:	0e c0       	rjmp	.+28     	; 0xb2 <I2C_BeginTransmission+0x26>
      96:	00 97       	sbiw	r24, 0x00	; 0
      98:	61 f0       	breq	.+24     	; 0xb2 <I2C_BeginTransmission+0x26>
      9a:	e9 ef       	ldi	r30, 0xF9	; 249
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	31 97       	sbiw	r30, 0x01	; 1
      a0:	f1 f7       	brne	.-4      	; 0x9e <I2C_BeginTransmission+0x12>
      a2:	00 c0       	rjmp	.+0      	; 0xa4 <I2C_BeginTransmission+0x18>
      a4:	00 00       	nop
      a6:	01 97       	sbiw	r24, 0x01	; 1
      a8:	06 b6       	in	r0, 0x36	; 54
      aa:	07 fc       	sbrc	r0, 7
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <I2C_BeginTransmission+0x26>
      ae:	00 97       	sbiw	r24, 0x00	; 0
      b0:	a1 f7       	brne	.-24     	; 0x9a <I2C_BeginTransmission+0xe>
      b2:	81 b1       	in	r24, 0x01	; 1
      b4:	88 7f       	andi	r24, 0xF8	; 248
      b6:	08 95       	ret

000000b8 <I2C_Transmit>:
      b8:	83 b9       	out	0x03, r24	; 3
      ba:	84 e8       	ldi	r24, 0x84	; 132
      bc:	86 bf       	out	0x36, r24	; 54
      be:	06 b6       	in	r0, 0x36	; 54
      c0:	07 fc       	sbrc	r0, 7
      c2:	11 c0       	rjmp	.+34     	; 0xe6 <I2C_Transmit+0x2e>
      c4:	61 15       	cp	r22, r1
      c6:	71 05       	cpc	r23, r1
      c8:	71 f0       	breq	.+28     	; 0xe6 <I2C_Transmit+0x2e>
      ca:	89 ef       	ldi	r24, 0xF9	; 249
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	01 97       	sbiw	r24, 0x01	; 1
      d0:	f1 f7       	brne	.-4      	; 0xce <I2C_Transmit+0x16>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <I2C_Transmit+0x1c>
      d4:	00 00       	nop
      d6:	61 50       	subi	r22, 0x01	; 1
      d8:	71 09       	sbc	r23, r1
      da:	06 b6       	in	r0, 0x36	; 54
      dc:	07 fc       	sbrc	r0, 7
      de:	03 c0       	rjmp	.+6      	; 0xe6 <I2C_Transmit+0x2e>
      e0:	61 15       	cp	r22, r1
      e2:	71 05       	cpc	r23, r1
      e4:	91 f7       	brne	.-28     	; 0xca <I2C_Transmit+0x12>
      e6:	81 b1       	in	r24, 0x01	; 1
      e8:	88 7f       	andi	r24, 0xF8	; 248
      ea:	08 95       	ret

000000ec <I2C_ReceiveACK>:
      ec:	24 ec       	ldi	r18, 0xC4	; 196
      ee:	26 bf       	out	0x36, r18	; 54
      f0:	06 b6       	in	r0, 0x36	; 54
      f2:	07 fc       	sbrc	r0, 7
      f4:	0e c0       	rjmp	.+28     	; 0x112 <I2C_ReceiveACK+0x26>
      f6:	00 97       	sbiw	r24, 0x00	; 0
      f8:	61 f0       	breq	.+24     	; 0x112 <I2C_ReceiveACK+0x26>
      fa:	e9 ef       	ldi	r30, 0xF9	; 249
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	31 97       	sbiw	r30, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <I2C_ReceiveACK+0x12>
     102:	00 c0       	rjmp	.+0      	; 0x104 <I2C_ReceiveACK+0x18>
     104:	00 00       	nop
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	06 b6       	in	r0, 0x36	; 54
     10a:	07 fc       	sbrc	r0, 7
     10c:	02 c0       	rjmp	.+4      	; 0x112 <I2C_ReceiveACK+0x26>
     10e:	00 97       	sbiw	r24, 0x00	; 0
     110:	a1 f7       	brne	.-24     	; 0xfa <I2C_ReceiveACK+0xe>
     112:	83 b1       	in	r24, 0x03	; 3
     114:	08 95       	ret

00000116 <I2C_ReceiveNACK>:
     116:	24 e8       	ldi	r18, 0x84	; 132
     118:	26 bf       	out	0x36, r18	; 54
     11a:	06 b6       	in	r0, 0x36	; 54
     11c:	07 fc       	sbrc	r0, 7
     11e:	0e c0       	rjmp	.+28     	; 0x13c <I2C_ReceiveNACK+0x26>
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	61 f0       	breq	.+24     	; 0x13c <I2C_ReceiveNACK+0x26>
     124:	e9 ef       	ldi	r30, 0xF9	; 249
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	31 97       	sbiw	r30, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <I2C_ReceiveNACK+0x12>
     12c:	00 c0       	rjmp	.+0      	; 0x12e <I2C_ReceiveNACK+0x18>
     12e:	00 00       	nop
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	06 b6       	in	r0, 0x36	; 54
     134:	07 fc       	sbrc	r0, 7
     136:	02 c0       	rjmp	.+4      	; 0x13c <I2C_ReceiveNACK+0x26>
     138:	00 97       	sbiw	r24, 0x00	; 0
     13a:	a1 f7       	brne	.-24     	; 0x124 <I2C_ReceiveNACK+0xe>
     13c:	83 b1       	in	r24, 0x03	; 3
     13e:	08 95       	ret

00000140 <I2C_EndTransmission>:
     140:	24 e9       	ldi	r18, 0x94	; 148
     142:	26 bf       	out	0x36, r18	; 54
     144:	06 b6       	in	r0, 0x36	; 54
     146:	04 fe       	sbrs	r0, 4
     148:	0e c0       	rjmp	.+28     	; 0x166 <I2C_EndTransmission+0x26>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	61 f0       	breq	.+24     	; 0x166 <I2C_EndTransmission+0x26>
     14e:	e9 ef       	ldi	r30, 0xF9	; 249
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	31 97       	sbiw	r30, 0x01	; 1
     154:	f1 f7       	brne	.-4      	; 0x152 <I2C_EndTransmission+0x12>
     156:	00 c0       	rjmp	.+0      	; 0x158 <I2C_EndTransmission+0x18>
     158:	00 00       	nop
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	06 b6       	in	r0, 0x36	; 54
     15e:	04 fe       	sbrs	r0, 4
     160:	02 c0       	rjmp	.+4      	; 0x166 <I2C_EndTransmission+0x26>
     162:	00 97       	sbiw	r24, 0x00	; 0
     164:	a1 f7       	brne	.-24     	; 0x14e <I2C_EndTransmission+0xe>
     166:	08 95       	ret

00000168 <I2C_Init>:
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	81 b9       	out	0x01, r24	; 1
     16c:	89 ef       	ldi	r24, 0xF9	; 249
     16e:	80 b9       	out	0x00, r24	; 0
     170:	84 e0       	ldi	r24, 0x04	; 4
     172:	86 bf       	out	0x36, r24	; 54
     174:	08 95       	ret

00000176 <I2C_DeInit>:
     176:	11 b8       	out	0x01, r1	; 1
     178:	10 b8       	out	0x00, r1	; 0
     17a:	16 be       	out	0x36, r1	; 54
     17c:	08 95       	ret

0000017e <I2C_IsDeviceReady>:
     17e:	df 92       	push	r13
     180:	ef 92       	push	r14
     182:	ff 92       	push	r15
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	cf 93       	push	r28
     18a:	df 93       	push	r29
     18c:	d8 2e       	mov	r13, r24
     18e:	eb 01       	movw	r28, r22
     190:	8a 01       	movw	r16, r20
     192:	f1 df       	rcall	.-30     	; 0x176 <I2C_DeInit>
     194:	e9 df       	rcall	.-46     	; 0x168 <I2C_Init>
     196:	20 97       	sbiw	r28, 0x00	; 0
     198:	99 f0       	breq	.+38     	; 0x1c0 <I2C_IsDeviceReady+0x42>
     19a:	e1 2c       	mov	r14, r1
     19c:	f1 2c       	mov	r15, r1
     19e:	c8 01       	movw	r24, r16
     1a0:	75 df       	rcall	.-278    	; 0x8c <I2C_BeginTransmission>
     1a2:	88 30       	cpi	r24, 0x08	; 8
     1a4:	19 f4       	brne	.+6      	; 0x1ac <I2C_IsDeviceReady+0x2e>
     1a6:	b8 01       	movw	r22, r16
     1a8:	8d 2d       	mov	r24, r13
     1aa:	86 df       	rcall	.-244    	; 0xb8 <I2C_Transmit>
     1ac:	88 31       	cpi	r24, 0x18	; 24
     1ae:	29 f4       	brne	.+10     	; 0x1ba <I2C_IsDeviceReady+0x3c>
     1b0:	c8 01       	movw	r24, r16
     1b2:	c6 df       	rcall	.-116    	; 0x140 <I2C_EndTransmission>
     1b4:	8f ef       	ldi	r24, 0xFF	; 255
     1b6:	e8 1a       	sub	r14, r24
     1b8:	f8 0a       	sbc	r15, r24
     1ba:	21 97       	sbiw	r28, 0x01	; 1
     1bc:	81 f7       	brne	.-32     	; 0x19e <I2C_IsDeviceReady+0x20>
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <I2C_IsDeviceReady+0x46>
     1c0:	e1 2c       	mov	r14, r1
     1c2:	f1 2c       	mov	r15, r1
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	ef 28       	or	r14, r15
     1c8:	09 f4       	brne	.+2      	; 0x1cc <I2C_IsDeviceReady+0x4e>
     1ca:	80 e0       	ldi	r24, 0x00	; 0
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	df 90       	pop	r13
     1da:	08 95       	ret

000001dc <I2C_Mem_Write>:
					com_stat = I2C_Master_Receive(0xD2,my_received_data,5,100); (0xD2 : Device Address)
			
*/

StatusTypeDef I2C_Mem_Write(uint8_t dev_address , uint32_t mem_address , uint8_t mem_add_size , uint8_t *mem_data , uint32_t quantity , uint16_t time_out) /* This function is for write data to external memory */
{
     1dc:	2f 92       	push	r2
     1de:	3f 92       	push	r3
     1e0:	4f 92       	push	r4
     1e2:	5f 92       	push	r5
     1e4:	6f 92       	push	r6
     1e6:	7f 92       	push	r7
     1e8:	8f 92       	push	r8
     1ea:	9f 92       	push	r9
     1ec:	af 92       	push	r10
     1ee:	bf 92       	push	r11
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	c8 2f       	mov	r28, r24
     202:	2a 01       	movw	r4, r20
     204:	3b 01       	movw	r6, r22
     206:	d2 2f       	mov	r29, r18
     208:	15 01       	movw	r2, r10
	uint32_t write_quantity = quantity; /* Variable for check write quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
	
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	if ( I2C_IsDeviceReady(dev_address , 1 , time_out) == _TRUE ) /* target device is ready */
     20a:	a5 01       	movw	r20, r10
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	b6 df       	rcall	.-148    	; 0x17e <I2C_IsDeviceReady>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f0       	breq	.+2      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
     216:	96 c0       	rjmp	.+300    	; 0x344 <__EEPROM_REGION_LENGTH__+0x144>
	{
		
		i2c_status = I2C_BeginTransmission(time_out); /* Begin Transmission */
     218:	c5 01       	movw	r24, r10
     21a:	38 df       	rcall	.-400    	; 0x8c <I2C_BeginTransmission>
		
		/* --------------------------------- */
		
		if ( mem_add_size == _I2C_MEMADD_SIZE_8BIT ) /* Check memory address size */
     21c:	d8 30       	cpi	r29, 0x08	; 8
     21e:	41 f5       	brne	.+80     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     220:	88 30       	cpi	r24, 0x08	; 8
     222:	99 f4       	brne	.+38     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_8BIT) & _P0_BIT_SEL_MEMADD_SIZE_8BIT)) , time_out); /* Send Device Address */
     224:	d3 01       	movw	r26, r6
     226:	c2 01       	movw	r24, r4
     228:	68 94       	set
     22a:	16 f8       	bld	r1, 6
     22c:	b6 95       	lsr	r27
     22e:	a7 95       	ror	r26
     230:	97 95       	ror	r25
     232:	87 95       	ror	r24
     234:	16 94       	lsr	r1
     236:	d1 f7       	brne	.-12     	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
     238:	8e 70       	andi	r24, 0x0E	; 14
     23a:	b5 01       	movw	r22, r10
     23c:	8c 2b       	or	r24, r28
     23e:	3c df       	rcall	.-392    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     240:	81 2c       	mov	r8, r1
     242:	91 2c       	mov	r9, r1
     244:	54 01       	movw	r10, r8
     246:	83 94       	inc	r8
     248:	03 c0       	rjmp	.+6      	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t write_quantity = quantity; /* Variable for check write quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     24a:	81 2c       	mov	r8, r1
     24c:	91 2c       	mov	r9, r1
     24e:	54 01       	movw	r10, r8
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     250:	88 31       	cpi	r24, 0x18	; 24
     252:	41 f4       	brne	.+16     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     254:	b1 01       	movw	r22, r2
     256:	84 2d       	mov	r24, r4
     258:	2f df       	rcall	.-418    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     25a:	9f ef       	ldi	r25, 0xFF	; 255
     25c:	89 1a       	sub	r8, r25
     25e:	99 0a       	sbc	r9, r25
     260:	a9 0a       	sbc	r10, r25
     262:	b9 0a       	sbc	r11, r25
			
		}
		
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
     264:	c1 14       	cp	r12, r1
     266:	d1 04       	cpc	r13, r1
     268:	e1 04       	cpc	r14, r1
     26a:	f1 04       	cpc	r15, r1
     26c:	81 f5       	brne	.+96     	; 0x2ce <__EEPROM_REGION_LENGTH__+0xce>
     26e:	43 c0       	rjmp	.+134    	; 0x2f6 <__EEPROM_REGION_LENGTH__+0xf6>
			
		}
		else
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     270:	88 30       	cpi	r24, 0x08	; 8
     272:	a1 f4       	brne	.+40     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_16BIT) & _P0_BIT_SEL_MEMADD_SIZE_16BIT)) , time_out); /* Send Device Address */
     274:	d3 01       	movw	r26, r6
     276:	c2 01       	movw	r24, r4
     278:	07 2e       	mov	r0, r23
     27a:	7f e0       	ldi	r23, 0x0F	; 15
     27c:	b6 95       	lsr	r27
     27e:	a7 95       	ror	r26
     280:	97 95       	ror	r25
     282:	87 95       	ror	r24
     284:	7a 95       	dec	r23
     286:	d1 f7       	brne	.-12     	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
     288:	70 2d       	mov	r23, r0
     28a:	82 70       	andi	r24, 0x02	; 2
     28c:	b5 01       	movw	r22, r10
     28e:	8c 2b       	or	r24, r28
     290:	13 df       	rcall	.-474    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     292:	81 2c       	mov	r8, r1
     294:	91 2c       	mov	r9, r1
     296:	54 01       	movw	r10, r8
     298:	83 94       	inc	r8
     29a:	03 c0       	rjmp	.+6      	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t write_quantity = quantity; /* Variable for check write quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     29c:	81 2c       	mov	r8, r1
     29e:	91 2c       	mov	r9, r1
     2a0:	54 01       	movw	r10, r8
			}
			else{}
				
			/* ~~~~~~~~~~~~ Send MSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* SLA+W has been transmitted, and ACK has been received. */
     2a2:	88 31       	cpi	r24, 0x18	; 24
     2a4:	41 f4       	brne	.+16     	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
			{
				i2c_status = I2C_Transmit( (uint8_t)(mem_address >> _BYTE_SHIFT_VAL) , time_out); /* Send first memory Address */
     2a6:	b1 01       	movw	r22, r2
     2a8:	85 2d       	mov	r24, r5
     2aa:	06 df       	rcall	.-500    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     2ac:	ef ef       	ldi	r30, 0xFF	; 255
     2ae:	8e 1a       	sub	r8, r30
     2b0:	9e 0a       	sbc	r9, r30
     2b2:	ae 0a       	sbc	r10, r30
     2b4:	be 0a       	sbc	r11, r30
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     2b6:	88 32       	cpi	r24, 0x28	; 40
     2b8:	09 f0       	breq	.+2      	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
     2ba:	48 c0       	rjmp	.+144    	; 0x34c <__EEPROM_REGION_LENGTH__+0x14c>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     2bc:	b1 01       	movw	r22, r2
     2be:	84 2d       	mov	r24, r4
     2c0:	fb de       	rcall	.-522    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     2c2:	ff ef       	ldi	r31, 0xFF	; 255
     2c4:	8f 1a       	sub	r8, r31
     2c6:	9f 0a       	sbc	r9, r31
     2c8:	af 0a       	sbc	r10, r31
     2ca:	bf 0a       	sbc	r11, r31
     2cc:	cb cf       	rjmp	.-106    	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_16BIT) & _P0_BIT_SEL_MEMADD_SIZE_16BIT)) , time_out); /* Send Device Address */
				step_check++; /* The step is completed */
     2ce:	26 01       	movw	r4, r12
     2d0:	37 01       	movw	r6, r14
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
		{
			
			if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* DATA has been transmitted, and ACK has been received. */
     2d2:	88 32       	cpi	r24, 0x28	; 40
     2d4:	51 f4       	brne	.+20     	; 0x2ea <__EEPROM_REGION_LENGTH__+0xea>
			{
				
				i2c_status = I2C_Transmit( *mem_data , time_out ); /* Send data to memory */
     2d6:	b1 01       	movw	r22, r2
     2d8:	f8 01       	movw	r30, r16
     2da:	81 91       	ld	r24, Z+
     2dc:	8f 01       	movw	r16, r30
     2de:	ec de       	rcall	.-552    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     2e0:	ff ef       	ldi	r31, 0xFF	; 255
     2e2:	8f 1a       	sub	r8, r31
     2e4:	9f 0a       	sbc	r9, r31
     2e6:	af 0a       	sbc	r10, r31
     2e8:	bf 0a       	sbc	r11, r31
			
		}
		
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	49 1a       	sub	r4, r25
     2ee:	51 08       	sbc	r5, r1
     2f0:	61 08       	sbc	r6, r1
     2f2:	71 08       	sbc	r7, r1
     2f4:	71 f7       	brne	.-36     	; 0x2d2 <__EEPROM_REGION_LENGTH__+0xd2>
			
		}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* DATA has been transmitted, and ACK has been received. */
     2f6:	88 32       	cpi	r24, 0x28	; 40
     2f8:	39 f4       	brne	.+14     	; 0x308 <__EEPROM_REGION_LENGTH__+0x108>
		{
			I2C_EndTransmission(time_out); /* End Transmission */
     2fa:	c1 01       	movw	r24, r2
     2fc:	21 df       	rcall	.-446    	; 0x140 <I2C_EndTransmission>
			step_check++; /* The step is completed */
     2fe:	ef ef       	ldi	r30, 0xFF	; 255
     300:	8e 1a       	sub	r8, r30
     302:	9e 0a       	sbc	r9, r30
     304:	ae 0a       	sbc	r10, r30
     306:	be 0a       	sbc	r11, r30
		}
		else{}
		
		/* --------------------------------- */
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_WRITE_STEPS - 1) + write_quantity)) ) /* The steps are complete */
     308:	d8 30       	cpi	r29, 0x08	; 8
     30a:	69 f4       	brne	.+26     	; 0x326 <__EEPROM_REGION_LENGTH__+0x126>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_WRITE_STEPS + write_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
     30c:	f3 e0       	ldi	r31, 0x03	; 3
     30e:	cf 0e       	add	r12, r31
     310:	d1 1c       	adc	r13, r1
     312:	e1 1c       	adc	r14, r1
     314:	f1 1c       	adc	r15, r1
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	c8 14       	cp	r12, r8
     31a:	d9 04       	cpc	r13, r9
     31c:	ea 04       	cpc	r14, r10
     31e:	fb 04       	cpc	r15, r11
     320:	e1 f0       	breq	.+56     	; 0x35a <__EEPROM_REGION_LENGTH__+0x15a>
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	1a c0       	rjmp	.+52     	; 0x35a <__EEPROM_REGION_LENGTH__+0x15a>
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_WRITE_STEPS - 1) + write_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_WRITE_STEPS + write_quantity)) ) /* The steps are complete */
     326:	d0 31       	cpi	r29, 0x10	; 16
     328:	79 f4       	brne	.+30     	; 0x348 <__EEPROM_REGION_LENGTH__+0x148>
		{
			i2c_status = _STAT_OK; /* Set status */
     32a:	84 e0       	ldi	r24, 0x04	; 4
     32c:	c8 0e       	add	r12, r24
     32e:	d1 1c       	adc	r13, r1
     330:	e1 1c       	adc	r14, r1
     332:	f1 1c       	adc	r15, r1
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	c8 14       	cp	r12, r8
     338:	d9 04       	cpc	r13, r9
     33a:	ea 04       	cpc	r14, r10
     33c:	fb 04       	cpc	r15, r11
     33e:	69 f0       	breq	.+26     	; 0x35a <__EEPROM_REGION_LENGTH__+0x15a>
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0b c0       	rjmp	.+22     	; 0x35a <__EEPROM_REGION_LENGTH__+0x15a>
		}
		
	}
	else
	{
		i2c_status = _STAT_ERROR; /* Set status */
     344:	80 e0       	ldi	r24, 0x00	; 0
     346:	09 c0       	rjmp	.+18     	; 0x35a <__EEPROM_REGION_LENGTH__+0x15a>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else
		{
			i2c_status = _STAT_ERROR; /* Set status */
     348:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		i2c_status = _STAT_ERROR; /* Set status */
	}
	
	return i2c_status;
     34a:	07 c0       	rjmp	.+14     	; 0x35a <__EEPROM_REGION_LENGTH__+0x15a>
			
		}
		
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
     34c:	c1 14       	cp	r12, r1
     34e:	d1 04       	cpc	r13, r1
     350:	e1 04       	cpc	r14, r1
     352:	f1 04       	cpc	r15, r1
     354:	09 f0       	breq	.+2      	; 0x358 <__EEPROM_REGION_LENGTH__+0x158>
     356:	bb cf       	rjmp	.-138    	; 0x2ce <__EEPROM_REGION_LENGTH__+0xce>
     358:	e6 cf       	rjmp	.-52     	; 0x326 <__EEPROM_REGION_LENGTH__+0x126>
	}
	
	return i2c_status;
	
	/* Function End */
}
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	0f 91       	pop	r16
     362:	ff 90       	pop	r15
     364:	ef 90       	pop	r14
     366:	df 90       	pop	r13
     368:	cf 90       	pop	r12
     36a:	bf 90       	pop	r11
     36c:	af 90       	pop	r10
     36e:	9f 90       	pop	r9
     370:	8f 90       	pop	r8
     372:	7f 90       	pop	r7
     374:	6f 90       	pop	r6
     376:	5f 90       	pop	r5
     378:	4f 90       	pop	r4
     37a:	3f 90       	pop	r3
     37c:	2f 90       	pop	r2
     37e:	08 95       	ret

00000380 <I2C_Mem_Read>:
					com_stat = I2C_Mem_Write(0xA0 , 75 , _I2C_MEMADD_SIZE_16BIT , my_data , 20 , 100); (0xA0 : Device Address)
			
*/

StatusTypeDef I2C_Mem_Read(uint8_t dev_address , uint32_t mem_address , uint8_t mem_add_size , uint8_t *mem_data , uint32_t quantity , uint16_t time_out ) /* This function is for read data from external memory */
{
     380:	2f 92       	push	r2
     382:	3f 92       	push	r3
     384:	4f 92       	push	r4
     386:	5f 92       	push	r5
     388:	6f 92       	push	r6
     38a:	7f 92       	push	r7
     38c:	8f 92       	push	r8
     38e:	9f 92       	push	r9
     390:	af 92       	push	r10
     392:	bf 92       	push	r11
     394:	cf 92       	push	r12
     396:	df 92       	push	r13
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	c8 2f       	mov	r28, r24
     3a6:	2a 01       	movw	r4, r20
     3a8:	3b 01       	movw	r6, r22
     3aa:	d2 2f       	mov	r29, r18
     3ac:	15 01       	movw	r2, r10
	uint32_t read_quantity = quantity; /* Variable for check read quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
	
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	if ( I2C_IsDeviceReady(dev_address , 1 , time_out) == _TRUE ) /* target device is ready */
     3ae:	a5 01       	movw	r20, r10
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	e4 de       	rcall	.-568    	; 0x17e <I2C_IsDeviceReady>
     3b6:	81 30       	cpi	r24, 0x01	; 1
     3b8:	09 f0       	breq	.+2      	; 0x3bc <I2C_Mem_Read+0x3c>
     3ba:	c1 c0       	rjmp	.+386    	; 0x53e <__stack+0xdf>
	{
		
		i2c_status = I2C_BeginTransmission(time_out); /* Begin Transmission */
     3bc:	c5 01       	movw	r24, r10
     3be:	66 de       	rcall	.-820    	; 0x8c <I2C_BeginTransmission>
		
		/* --------------------------------- */
		
		if ( mem_add_size == _I2C_MEMADD_SIZE_8BIT ) /* Check memory address size */
     3c0:	d8 30       	cpi	r29, 0x08	; 8
     3c2:	19 f5       	brne	.+70     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     3c4:	88 30       	cpi	r24, 0x08	; 8
     3c6:	99 f4       	brne	.+38     	; 0x3ee <I2C_Mem_Read+0x6e>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_8BIT) & _P0_BIT_SEL_MEMADD_SIZE_8BIT)) , time_out ); /* Send device Address */
     3c8:	d3 01       	movw	r26, r6
     3ca:	c2 01       	movw	r24, r4
     3cc:	68 94       	set
     3ce:	16 f8       	bld	r1, 6
     3d0:	b6 95       	lsr	r27
     3d2:	a7 95       	ror	r26
     3d4:	97 95       	ror	r25
     3d6:	87 95       	ror	r24
     3d8:	16 94       	lsr	r1
     3da:	d1 f7       	brne	.-12     	; 0x3d0 <I2C_Mem_Read+0x50>
     3dc:	8e 70       	andi	r24, 0x0E	; 14
     3de:	b5 01       	movw	r22, r10
     3e0:	8c 2b       	or	r24, r28
     3e2:	6a de       	rcall	.-812    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     3e4:	81 2c       	mov	r8, r1
     3e6:	91 2c       	mov	r9, r1
     3e8:	54 01       	movw	r10, r8
     3ea:	83 94       	inc	r8
     3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <I2C_Mem_Read+0x74>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t read_quantity = quantity; /* Variable for check read quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     3ee:	81 2c       	mov	r8, r1
     3f0:	91 2c       	mov	r9, r1
     3f2:	54 01       	movw	r10, r8
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     3f4:	88 31       	cpi	r24, 0x18	; 24
     3f6:	b1 f5       	brne	.+108    	; 0x464 <__stack+0x5>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     3f8:	b1 01       	movw	r22, r2
     3fa:	84 2d       	mov	r24, r4
     3fc:	5d de       	rcall	.-838    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     3fe:	9f ef       	ldi	r25, 0xFF	; 255
     400:	89 1a       	sub	r8, r25
     402:	99 0a       	sbc	r9, r25
     404:	a9 0a       	sbc	r10, r25
     406:	b9 0a       	sbc	r11, r25
     408:	2d c0       	rjmp	.+90     	; 0x464 <__stack+0x5>
			
		}
		else
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     40a:	88 30       	cpi	r24, 0x08	; 8
     40c:	a1 f4       	brne	.+40     	; 0x436 <__DATA_REGION_LENGTH__+0x36>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_16BIT) & _P0_BIT_SEL_MEMADD_SIZE_16BIT)) , time_out ); /* Send device Address */
     40e:	d3 01       	movw	r26, r6
     410:	c2 01       	movw	r24, r4
     412:	07 2e       	mov	r0, r23
     414:	7f e0       	ldi	r23, 0x0F	; 15
     416:	b6 95       	lsr	r27
     418:	a7 95       	ror	r26
     41a:	97 95       	ror	r25
     41c:	87 95       	ror	r24
     41e:	7a 95       	dec	r23
     420:	d1 f7       	brne	.-12     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     422:	70 2d       	mov	r23, r0
     424:	82 70       	andi	r24, 0x02	; 2
     426:	b5 01       	movw	r22, r10
     428:	8c 2b       	or	r24, r28
     42a:	46 de       	rcall	.-884    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     42c:	81 2c       	mov	r8, r1
     42e:	91 2c       	mov	r9, r1
     430:	54 01       	movw	r10, r8
     432:	83 94       	inc	r8
     434:	03 c0       	rjmp	.+6      	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t read_quantity = quantity; /* Variable for check read quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     436:	81 2c       	mov	r8, r1
     438:	91 2c       	mov	r9, r1
     43a:	54 01       	movw	r10, r8
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send MSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* SLA+W has been transmitted, and ACK has been received. */
     43c:	88 31       	cpi	r24, 0x18	; 24
     43e:	41 f4       	brne	.+16     	; 0x450 <__DATA_REGION_LENGTH__+0x50>
			{
				i2c_status = I2C_Transmit( (uint8_t)(mem_address >> _BYTE_SHIFT_VAL) , time_out); /* Send first memory Address */
     440:	b1 01       	movw	r22, r2
     442:	85 2d       	mov	r24, r5
     444:	39 de       	rcall	.-910    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     446:	ef ef       	ldi	r30, 0xFF	; 255
     448:	8e 1a       	sub	r8, r30
     44a:	9e 0a       	sbc	r9, r30
     44c:	ae 0a       	sbc	r10, r30
     44e:	be 0a       	sbc	r11, r30
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     450:	88 32       	cpi	r24, 0x28	; 40
     452:	89 f4       	brne	.+34     	; 0x476 <__stack+0x17>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     454:	b1 01       	movw	r22, r2
     456:	84 2d       	mov	r24, r4
     458:	2f de       	rcall	.-930    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     45a:	ff ef       	ldi	r31, 0xFF	; 255
     45c:	8f 1a       	sub	r8, r31
     45e:	9f 0a       	sbc	r9, r31
     460:	af 0a       	sbc	r10, r31
     462:	bf 0a       	sbc	r11, r31
			
		}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* DATA has been transmitted, and ACK has been received. */
     464:	88 32       	cpi	r24, 0x28	; 40
     466:	39 f4       	brne	.+14     	; 0x476 <__stack+0x17>
		{
			i2c_status = I2C_BeginTransmission(time_out); /* Repeat Start */
     468:	c1 01       	movw	r24, r2
     46a:	10 de       	rcall	.-992    	; 0x8c <I2C_BeginTransmission>
			step_check++; /* The step is completed */
     46c:	9f ef       	ldi	r25, 0xFF	; 255
     46e:	89 1a       	sub	r8, r25
     470:	99 0a       	sbc	r9, r25
     472:	a9 0a       	sbc	r10, r25
     474:	b9 0a       	sbc	r11, r25
		}
		else{}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MT_REP_START_TRANSMITTED ) /* A repeated START condition has been transmitted */
     476:	80 31       	cpi	r24, 0x10	; 16
     478:	49 f4       	brne	.+18     	; 0x48c <__stack+0x2d>
		{
			i2c_status = I2C_Transmit( (dev_address | _DEVICE_READ) , time_out ); /* Send device Address */
     47a:	b1 01       	movw	r22, r2
     47c:	8c 2f       	mov	r24, r28
     47e:	81 60       	ori	r24, 0x01	; 1
     480:	1b de       	rcall	.-970    	; 0xb8 <I2C_Transmit>
			step_check++; /* The step is completed */
     482:	ef ef       	ldi	r30, 0xFF	; 255
     484:	8e 1a       	sub	r8, r30
     486:	9e 0a       	sbc	r9, r30
     488:	ae 0a       	sbc	r10, r30
     48a:	be 0a       	sbc	r11, r30
		}
		else{}
		
		/* --------------------------------- */
		
		for ( ; quantity > 1 ; quantity-- ) /* Loop for write data to register */
     48c:	f2 e0       	ldi	r31, 0x02	; 2
     48e:	cf 16       	cp	r12, r31
     490:	d1 04       	cpc	r13, r1
     492:	e1 04       	cpc	r14, r1
     494:	f1 04       	cpc	r15, r1
     496:	e8 f0       	brcs	.+58     	; 0x4d2 <__stack+0x73>
     498:	26 01       	movw	r4, r12
     49a:	37 01       	movw	r6, r14
		{
			
			if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
     49c:	98 2f       	mov	r25, r24
     49e:	9f 7e       	andi	r25, 0xEF	; 239
     4a0:	90 34       	cpi	r25, 0x40	; 64
     4a2:	61 f4       	brne	.+24     	; 0x4bc <__stack+0x5d>
			{
				
				*mem_data = I2C_ReceiveACK(time_out); /* Receive Data with send ACK */
     4a4:	c1 01       	movw	r24, r2
     4a6:	22 de       	rcall	.-956    	; 0xec <I2C_ReceiveACK>
     4a8:	f8 01       	movw	r30, r16
     4aa:	81 93       	st	Z+, r24
     4ac:	8f 01       	movw	r16, r30
/* ------------------ Functions ------------------ */

uint8_t I2C_Status(void) /* Function for take I2C status */
{
	
	return (_I2C_SR & _I2C_STATUS); /* Return I2C status */
     4ae:	81 b1       	in	r24, 0x01	; 1
     4b0:	88 7f       	andi	r24, 0xF8	; 248
			if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
			{
				
				*mem_data = I2C_ReceiveACK(time_out); /* Receive Data with send ACK */
				i2c_status = I2C_Status(); /* I2C status take */
				step_check++; /* The step is completed */
     4b2:	ff ef       	ldi	r31, 0xFF	; 255
     4b4:	8f 1a       	sub	r8, r31
     4b6:	9f 0a       	sbc	r9, r31
     4b8:	af 0a       	sbc	r10, r31
     4ba:	bf 0a       	sbc	r11, r31
		}
		else{}
		
		/* --------------------------------- */
		
		for ( ; quantity > 1 ; quantity-- ) /* Loop for write data to register */
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	49 1a       	sub	r4, r25
     4c0:	51 08       	sbc	r5, r1
     4c2:	61 08       	sbc	r6, r1
     4c4:	71 08       	sbc	r7, r1
     4c6:	e1 e0       	ldi	r30, 0x01	; 1
     4c8:	4e 16       	cp	r4, r30
     4ca:	51 04       	cpc	r5, r1
     4cc:	61 04       	cpc	r6, r1
     4ce:	71 04       	cpc	r7, r1
     4d0:	29 f7       	brne	.-54     	; 0x49c <__stack+0x3d>
			
		}
		
		/* --------------------------------- */
		
		if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
     4d2:	98 2f       	mov	r25, r24
     4d4:	9f 7e       	andi	r25, 0xEF	; 239
     4d6:	90 34       	cpi	r25, 0x40	; 64
     4d8:	59 f4       	brne	.+22     	; 0x4f0 <__stack+0x91>
		{
			
			*mem_data = I2C_ReceiveNACK(time_out); /* Receive Data with send NACK */
     4da:	c1 01       	movw	r24, r2
     4dc:	1c de       	rcall	.-968    	; 0x116 <I2C_ReceiveNACK>
     4de:	f8 01       	movw	r30, r16
     4e0:	80 83       	st	Z, r24
/* ------------------ Functions ------------------ */

uint8_t I2C_Status(void) /* Function for take I2C status */
{
	
	return (_I2C_SR & _I2C_STATUS); /* Return I2C status */
     4e2:	81 b1       	in	r24, 0x01	; 1
     4e4:	88 7f       	andi	r24, 0xF8	; 248
		if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
		{
			
			*mem_data = I2C_ReceiveNACK(time_out); /* Receive Data with send NACK */
			i2c_status = I2C_Status(); /* I2C status take */
			step_check++; /* The step is completed */
     4e6:	ff ef       	ldi	r31, 0xFF	; 255
     4e8:	8f 1a       	sub	r8, r31
     4ea:	9f 0a       	sbc	r9, r31
     4ec:	af 0a       	sbc	r10, r31
     4ee:	bf 0a       	sbc	r11, r31
		}
		else{}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MR_DATA_RECEIVED_NACK ) /* Data byte has been received; NOT ACK has been returned */
     4f0:	88 35       	cpi	r24, 0x58	; 88
     4f2:	39 f4       	brne	.+14     	; 0x502 <__stack+0xa3>
		{
			I2C_EndTransmission(time_out); /* End Transmission */
     4f4:	c1 01       	movw	r24, r2
     4f6:	24 de       	rcall	.-952    	; 0x140 <I2C_EndTransmission>
			step_check++; /* The step is completed */
     4f8:	8f ef       	ldi	r24, 0xFF	; 255
     4fa:	88 1a       	sub	r8, r24
     4fc:	98 0a       	sbc	r9, r24
     4fe:	a8 0a       	sbc	r10, r24
     500:	b8 0a       	sbc	r11, r24
		}
		else{}
		
		/* --------------------------------- */
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_READ_STEPS - 1) + read_quantity)) ) /* The steps are complete */
     502:	d8 30       	cpi	r29, 0x08	; 8
     504:	69 f4       	brne	.+26     	; 0x520 <__stack+0xc1>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_READ_STEPS + read_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
     506:	95 e0       	ldi	r25, 0x05	; 5
     508:	c9 0e       	add	r12, r25
     50a:	d1 1c       	adc	r13, r1
     50c:	e1 1c       	adc	r14, r1
     50e:	f1 1c       	adc	r15, r1
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	c8 14       	cp	r12, r8
     514:	d9 04       	cpc	r13, r9
     516:	ea 04       	cpc	r14, r10
     518:	fb 04       	cpc	r15, r11
     51a:	a1 f0       	breq	.+40     	; 0x544 <__stack+0xe5>
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	12 c0       	rjmp	.+36     	; 0x544 <__stack+0xe5>
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_READ_STEPS - 1) + read_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_READ_STEPS + read_quantity)) ) /* The steps are complete */
     520:	d0 31       	cpi	r29, 0x10	; 16
     522:	79 f4       	brne	.+30     	; 0x542 <__stack+0xe3>
		{
			i2c_status = _STAT_OK; /* Set status */
     524:	e6 e0       	ldi	r30, 0x06	; 6
     526:	ce 0e       	add	r12, r30
     528:	d1 1c       	adc	r13, r1
     52a:	e1 1c       	adc	r14, r1
     52c:	f1 1c       	adc	r15, r1
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	c8 14       	cp	r12, r8
     532:	d9 04       	cpc	r13, r9
     534:	ea 04       	cpc	r14, r10
     536:	fb 04       	cpc	r15, r11
     538:	29 f0       	breq	.+10     	; 0x544 <__stack+0xe5>
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	03 c0       	rjmp	.+6      	; 0x544 <__stack+0xe5>
		}
		
	}
	else
	{
		i2c_status = _STAT_ERROR; /* Set status */
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	01 c0       	rjmp	.+2      	; 0x544 <__stack+0xe5>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else
		{
			i2c_status = _STAT_ERROR; /* Set status */
     542:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return i2c_status;
	
	/* Function End */
}
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	cf 90       	pop	r12
     554:	bf 90       	pop	r11
     556:	af 90       	pop	r10
     558:	9f 90       	pop	r9
     55a:	8f 90       	pop	r8
     55c:	7f 90       	pop	r7
     55e:	6f 90       	pop	r6
     560:	5f 90       	pop	r5
     562:	4f 90       	pop	r4
     564:	3f 90       	pop	r3
     566:	2f 90       	pop	r2
     568:	08 95       	ret

0000056a <float_to_byte>:
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, UART_BUFFER_SIZE, format, args);
	va_end(args);
	UART_Transmit_String(buffer);
}
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	00 d0       	rcall	.+0      	; 0x570 <float_to_byte+0x6>
     570:	00 d0       	rcall	.+0      	; 0x572 <float_to_byte+0x8>
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	69 83       	std	Y+1, r22	; 0x01
     578:	7a 83       	std	Y+2, r23	; 0x02
     57a:	8b 83       	std	Y+3, r24	; 0x03
     57c:	9c 83       	std	Y+4, r25	; 0x04
     57e:	fe 01       	movw	r30, r28
     580:	31 96       	adiw	r30, 0x01	; 1
     582:	da 01       	movw	r26, r20
     584:	a2 0f       	add	r26, r18
     586:	b3 1f       	adc	r27, r19
     588:	9e 01       	movw	r18, r28
     58a:	2b 5f       	subi	r18, 0xFB	; 251
     58c:	3f 4f       	sbci	r19, 0xFF	; 255
     58e:	81 91       	ld	r24, Z+
     590:	8d 93       	st	X+, r24
     592:	e2 17       	cp	r30, r18
     594:	f3 07       	cpc	r31, r19
     596:	d9 f7       	brne	.-10     	; 0x58e <float_to_byte+0x24>
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <kalman_filter>:
     5a6:	4f 92       	push	r4
     5a8:	5f 92       	push	r5
     5aa:	6f 92       	push	r6
     5ac:	7f 92       	push	r7
     5ae:	8f 92       	push	r8
     5b0:	9f 92       	push	r9
     5b2:	af 92       	push	r10
     5b4:	bf 92       	push	r11
     5b6:	cf 92       	push	r12
     5b8:	df 92       	push	r13
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	a0 97       	sbiw	r28, 0x20	; 32
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	6d 87       	std	Y+13, r22	; 0x0d
     5d8:	7e 87       	std	Y+14, r23	; 0x0e
     5da:	8f 87       	std	Y+15, r24	; 0x0f
     5dc:	98 8b       	std	Y+16, r25	; 0x10
     5de:	ca 01       	movw	r24, r20
     5e0:	b9 01       	movw	r22, r18
     5e2:	e9 86       	std	Y+9, r14	; 0x09
     5e4:	fa 86       	std	Y+10, r15	; 0x0a
     5e6:	0b 87       	std	Y+11, r16	; 0x0b
     5e8:	1c 87       	std	Y+12, r17	; 0x0c
     5ea:	20 91 8c 00 	lds	r18, 0x008C	; 0x80008c <bias.2590>
     5ee:	30 91 8d 00 	lds	r19, 0x008D	; 0x80008d <bias.2590+0x1>
     5f2:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <bias.2590+0x2>
     5f6:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <bias.2590+0x3>
     5fa:	2d 8b       	std	Y+21, r18	; 0x15
     5fc:	3e 8b       	std	Y+22, r19	; 0x16
     5fe:	4f 8b       	std	Y+23, r20	; 0x17
     600:	58 8f       	std	Y+24, r21	; 0x18
     602:	24 d6       	rcall	.+3144   	; 0x124c <__subsf3>
     604:	a8 01       	movw	r20, r16
     606:	97 01       	movw	r18, r14
     608:	32 d8       	rcall	.-3996   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
     60a:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <angle.2589>
     60e:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <angle.2589+0x1>
     612:	40 91 8a 00 	lds	r20, 0x008A	; 0x80008a <angle.2589+0x2>
     616:	50 91 8b 00 	lds	r21, 0x008B	; 0x80008b <angle.2589+0x3>
     61a:	19 d6       	rcall	.+3122   	; 0x124e <__addsf3>
     61c:	69 8f       	std	Y+25, r22	; 0x19
     61e:	7a 8f       	std	Y+26, r23	; 0x1a
     620:	8b 8f       	std	Y+27, r24	; 0x1b
     622:	9c 8f       	std	Y+28, r25	; 0x1c
     624:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__data_end+0xc>
     628:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__data_end+0xd>
     62c:	e0 90 86 00 	lds	r14, 0x0086	; 0x800086 <__data_end+0xe>
     630:	f0 90 87 00 	lds	r15, 0x0087	; 0x800087 <__data_end+0xf>
     634:	a7 01       	movw	r20, r14
     636:	96 01       	movw	r18, r12
     638:	69 85       	ldd	r22, Y+9	; 0x09
     63a:	7a 85       	ldd	r23, Y+10	; 0x0a
     63c:	8b 85       	ldd	r24, Y+11	; 0x0b
     63e:	9c 85       	ldd	r25, Y+12	; 0x0c
     640:	16 d8       	rcall	.-4052   	; 0xfffff66e <__eeprom_end+0xff7ef66e>
     642:	69 83       	std	Y+1, r22	; 0x01
     644:	7a 83       	std	Y+2, r23	; 0x02
     646:	8b 83       	std	Y+3, r24	; 0x03
     648:	9c 83       	std	Y+4, r25	; 0x04
     64a:	40 90 7c 00 	lds	r4, 0x007C	; 0x80007c <__data_end+0x4>
     64e:	50 90 7d 00 	lds	r5, 0x007D	; 0x80007d <__data_end+0x5>
     652:	60 90 7e 00 	lds	r6, 0x007E	; 0x80007e <__data_end+0x6>
     656:	70 90 7f 00 	lds	r7, 0x007F	; 0x80007f <__data_end+0x7>
     65a:	80 90 80 00 	lds	r8, 0x0080	; 0x800080 <__data_end+0x8>
     65e:	90 90 81 00 	lds	r9, 0x0081	; 0x800081 <__data_end+0x9>
     662:	a0 90 82 00 	lds	r10, 0x0082	; 0x800082 <__data_end+0xa>
     666:	b0 90 83 00 	lds	r11, 0x0083	; 0x800083 <__data_end+0xb>
     66a:	a3 01       	movw	r20, r6
     66c:	92 01       	movw	r18, r4
     66e:	ee d5       	rcall	.+3036   	; 0x124c <__subsf3>
     670:	a5 01       	movw	r20, r10
     672:	94 01       	movw	r18, r8
     674:	eb d5       	rcall	.+3030   	; 0x124c <__subsf3>
     676:	2a e0       	ldi	r18, 0x0A	; 10
     678:	37 ed       	ldi	r19, 0xD7	; 215
     67a:	43 e2       	ldi	r20, 0x23	; 35
     67c:	5c e3       	ldi	r21, 0x3C	; 60
     67e:	e7 d5       	rcall	.+3022   	; 0x124e <__addsf3>
     680:	29 85       	ldd	r18, Y+9	; 0x09
     682:	3a 85       	ldd	r19, Y+10	; 0x0a
     684:	4b 85       	ldd	r20, Y+11	; 0x0b
     686:	5c 85       	ldd	r21, Y+12	; 0x0c
     688:	f2 d7       	rcall	.+4068   	; 0x166e <__mulsf3>
     68a:	e8 e7       	ldi	r30, 0x78	; 120
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	20 81       	ld	r18, Z
     690:	31 81       	ldd	r19, Z+1	; 0x01
     692:	42 81       	ldd	r20, Z+2	; 0x02
     694:	53 81       	ldd	r21, Z+3	; 0x03
     696:	db d5       	rcall	.+2998   	; 0x124e <__addsf3>
     698:	6d 83       	std	Y+5, r22	; 0x05
     69a:	7e 83       	std	Y+6, r23	; 0x06
     69c:	8f 83       	std	Y+7, r24	; 0x07
     69e:	98 87       	std	Y+8, r25	; 0x08
     6a0:	29 81       	ldd	r18, Y+1	; 0x01
     6a2:	3a 81       	ldd	r19, Y+2	; 0x02
     6a4:	4b 81       	ldd	r20, Y+3	; 0x03
     6a6:	5c 81       	ldd	r21, Y+4	; 0x04
     6a8:	c3 01       	movw	r24, r6
     6aa:	b2 01       	movw	r22, r4
     6ac:	cf d5       	rcall	.+2974   	; 0x124c <__subsf3>
     6ae:	2b 01       	movw	r4, r22
     6b0:	3c 01       	movw	r6, r24
     6b2:	29 81       	ldd	r18, Y+1	; 0x01
     6b4:	3a 81       	ldd	r19, Y+2	; 0x02
     6b6:	4b 81       	ldd	r20, Y+3	; 0x03
     6b8:	5c 81       	ldd	r21, Y+4	; 0x04
     6ba:	c5 01       	movw	r24, r10
     6bc:	b4 01       	movw	r22, r8
     6be:	c6 d5       	rcall	.+2956   	; 0x124c <__subsf3>
     6c0:	6d 8f       	std	Y+29, r22	; 0x1d
     6c2:	7e 8f       	std	Y+30, r23	; 0x1e
     6c4:	8f 8f       	std	Y+31, r24	; 0x1f
     6c6:	98 a3       	std	Y+32, r25	; 0x20
     6c8:	2d ec       	ldi	r18, 0xCD	; 205
     6ca:	3c ec       	ldi	r19, 0xCC	; 204
     6cc:	4c ec       	ldi	r20, 0xCC	; 204
     6ce:	5e e3       	ldi	r21, 0x3E	; 62
     6d0:	6d 81       	ldd	r22, Y+5	; 0x05
     6d2:	7e 81       	ldd	r23, Y+6	; 0x06
     6d4:	8f 81       	ldd	r24, Y+7	; 0x07
     6d6:	98 85       	ldd	r25, Y+8	; 0x08
     6d8:	ba d5       	rcall	.+2932   	; 0x124e <__addsf3>
     6da:	4b 01       	movw	r8, r22
     6dc:	5c 01       	movw	r10, r24
     6de:	9b 01       	movw	r18, r22
     6e0:	ac 01       	movw	r20, r24
     6e2:	6d 81       	ldd	r22, Y+5	; 0x05
     6e4:	7e 81       	ldd	r23, Y+6	; 0x06
     6e6:	8f 81       	ldd	r24, Y+7	; 0x07
     6e8:	98 85       	ldd	r25, Y+8	; 0x08
     6ea:	7b d6       	rcall	.+3318   	; 0x13e2 <__divsf3>
     6ec:	69 83       	std	Y+1, r22	; 0x01
     6ee:	7a 83       	std	Y+2, r23	; 0x02
     6f0:	8b 83       	std	Y+3, r24	; 0x03
     6f2:	9c 83       	std	Y+4, r25	; 0x04
     6f4:	a5 01       	movw	r20, r10
     6f6:	94 01       	movw	r18, r8
     6f8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6fa:	7e 8d       	ldd	r23, Y+30	; 0x1e
     6fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6fe:	98 a1       	ldd	r25, Y+32	; 0x20
     700:	70 d6       	rcall	.+3296   	; 0x13e2 <__divsf3>
     702:	69 8b       	std	Y+17, r22	; 0x11
     704:	7a 8b       	std	Y+18, r23	; 0x12
     706:	8b 8b       	std	Y+19, r24	; 0x13
     708:	9c 8b       	std	Y+20, r25	; 0x14
     70a:	29 8d       	ldd	r18, Y+25	; 0x19
     70c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     70e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     710:	5c 8d       	ldd	r21, Y+28	; 0x1c
     712:	6d 85       	ldd	r22, Y+13	; 0x0d
     714:	7e 85       	ldd	r23, Y+14	; 0x0e
     716:	8f 85       	ldd	r24, Y+15	; 0x0f
     718:	98 89       	ldd	r25, Y+16	; 0x10
     71a:	98 d5       	rcall	.+2864   	; 0x124c <__subsf3>
     71c:	6d 87       	std	Y+13, r22	; 0x0d
     71e:	7e 87       	std	Y+14, r23	; 0x0e
     720:	8f 87       	std	Y+15, r24	; 0x0f
     722:	98 8b       	std	Y+16, r25	; 0x10
     724:	9b 01       	movw	r18, r22
     726:	ac 01       	movw	r20, r24
     728:	69 81       	ldd	r22, Y+1	; 0x01
     72a:	7a 81       	ldd	r23, Y+2	; 0x02
     72c:	8b 81       	ldd	r24, Y+3	; 0x03
     72e:	9c 81       	ldd	r25, Y+4	; 0x04
     730:	9e d7       	rcall	.+3900   	; 0x166e <__mulsf3>
     732:	29 8d       	ldd	r18, Y+25	; 0x19
     734:	3a 8d       	ldd	r19, Y+26	; 0x1a
     736:	4b 8d       	ldd	r20, Y+27	; 0x1b
     738:	5c 8d       	ldd	r21, Y+28	; 0x1c
     73a:	89 d5       	rcall	.+2834   	; 0x124e <__addsf3>
     73c:	4b 01       	movw	r8, r22
     73e:	5c 01       	movw	r10, r24
     740:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <angle.2589>
     744:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <angle.2589+0x1>
     748:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <angle.2589+0x2>
     74c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <angle.2589+0x3>
     750:	2d 85       	ldd	r18, Y+13	; 0x0d
     752:	3e 85       	ldd	r19, Y+14	; 0x0e
     754:	4f 85       	ldd	r20, Y+15	; 0x0f
     756:	58 89       	ldd	r21, Y+16	; 0x10
     758:	69 89       	ldd	r22, Y+17	; 0x11
     75a:	7a 89       	ldd	r23, Y+18	; 0x12
     75c:	8b 89       	ldd	r24, Y+19	; 0x13
     75e:	9c 89       	ldd	r25, Y+20	; 0x14
     760:	86 d7       	rcall	.+3852   	; 0x166e <__mulsf3>
     762:	2d 89       	ldd	r18, Y+21	; 0x15
     764:	3e 89       	ldd	r19, Y+22	; 0x16
     766:	4f 89       	ldd	r20, Y+23	; 0x17
     768:	58 8d       	ldd	r21, Y+24	; 0x18
     76a:	71 d5       	rcall	.+2786   	; 0x124e <__addsf3>
     76c:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <bias.2590>
     770:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <bias.2590+0x1>
     774:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <bias.2590+0x2>
     778:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <bias.2590+0x3>
     77c:	29 81       	ldd	r18, Y+1	; 0x01
     77e:	3a 81       	ldd	r19, Y+2	; 0x02
     780:	4b 81       	ldd	r20, Y+3	; 0x03
     782:	5c 81       	ldd	r21, Y+4	; 0x04
     784:	6d 81       	ldd	r22, Y+5	; 0x05
     786:	7e 81       	ldd	r23, Y+6	; 0x06
     788:	8f 81       	ldd	r24, Y+7	; 0x07
     78a:	98 85       	ldd	r25, Y+8	; 0x08
     78c:	70 d7       	rcall	.+3808   	; 0x166e <__mulsf3>
     78e:	9b 01       	movw	r18, r22
     790:	ac 01       	movw	r20, r24
     792:	6d 81       	ldd	r22, Y+5	; 0x05
     794:	7e 81       	ldd	r23, Y+6	; 0x06
     796:	8f 81       	ldd	r24, Y+7	; 0x07
     798:	98 85       	ldd	r25, Y+8	; 0x08
     79a:	58 d5       	rcall	.+2736   	; 0x124c <__subsf3>
     79c:	e8 e7       	ldi	r30, 0x78	; 120
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	60 83       	st	Z, r22
     7a2:	71 83       	std	Z+1, r23	; 0x01
     7a4:	82 83       	std	Z+2, r24	; 0x02
     7a6:	93 83       	std	Z+3, r25	; 0x03
     7a8:	29 81       	ldd	r18, Y+1	; 0x01
     7aa:	3a 81       	ldd	r19, Y+2	; 0x02
     7ac:	4b 81       	ldd	r20, Y+3	; 0x03
     7ae:	5c 81       	ldd	r21, Y+4	; 0x04
     7b0:	c3 01       	movw	r24, r6
     7b2:	b2 01       	movw	r22, r4
     7b4:	5c d7       	rcall	.+3768   	; 0x166e <__mulsf3>
     7b6:	9b 01       	movw	r18, r22
     7b8:	ac 01       	movw	r20, r24
     7ba:	c3 01       	movw	r24, r6
     7bc:	b2 01       	movw	r22, r4
     7be:	46 d5       	rcall	.+2700   	; 0x124c <__subsf3>
     7c0:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <__data_end+0x4>
     7c4:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <__data_end+0x5>
     7c8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__data_end+0x6>
     7cc:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <__data_end+0x7>
     7d0:	29 89       	ldd	r18, Y+17	; 0x11
     7d2:	3a 89       	ldd	r19, Y+18	; 0x12
     7d4:	4b 89       	ldd	r20, Y+19	; 0x13
     7d6:	5c 89       	ldd	r21, Y+20	; 0x14
     7d8:	6d 81       	ldd	r22, Y+5	; 0x05
     7da:	7e 81       	ldd	r23, Y+6	; 0x06
     7dc:	8f 81       	ldd	r24, Y+7	; 0x07
     7de:	98 85       	ldd	r25, Y+8	; 0x08
     7e0:	46 d7       	rcall	.+3724   	; 0x166e <__mulsf3>
     7e2:	9b 01       	movw	r18, r22
     7e4:	ac 01       	movw	r20, r24
     7e6:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7e8:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7ec:	98 a1       	ldd	r25, Y+32	; 0x20
     7ee:	2e d5       	rcall	.+2652   	; 0x124c <__subsf3>
     7f0:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <__data_end+0x8>
     7f4:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <__data_end+0x9>
     7f8:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end+0xa>
     7fc:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__data_end+0xb>
     800:	2d ec       	ldi	r18, 0xCD	; 205
     802:	3c ec       	ldi	r19, 0xCC	; 204
     804:	4c e4       	ldi	r20, 0x4C	; 76
     806:	5d e3       	ldi	r21, 0x3D	; 61
     808:	69 85       	ldd	r22, Y+9	; 0x09
     80a:	7a 85       	ldd	r23, Y+10	; 0x0a
     80c:	8b 85       	ldd	r24, Y+11	; 0x0b
     80e:	9c 85       	ldd	r25, Y+12	; 0x0c
     810:	2e d7       	rcall	.+3676   	; 0x166e <__mulsf3>
     812:	a7 01       	movw	r20, r14
     814:	96 01       	movw	r18, r12
     816:	1b d5       	rcall	.+2614   	; 0x124e <__addsf3>
     818:	6b 01       	movw	r12, r22
     81a:	7c 01       	movw	r14, r24
     81c:	29 89       	ldd	r18, Y+17	; 0x11
     81e:	3a 89       	ldd	r19, Y+18	; 0x12
     820:	4b 89       	ldd	r20, Y+19	; 0x13
     822:	5c 89       	ldd	r21, Y+20	; 0x14
     824:	c3 01       	movw	r24, r6
     826:	b2 01       	movw	r22, r4
     828:	22 d7       	rcall	.+3652   	; 0x166e <__mulsf3>
     82a:	9b 01       	movw	r18, r22
     82c:	ac 01       	movw	r20, r24
     82e:	c7 01       	movw	r24, r14
     830:	b6 01       	movw	r22, r12
     832:	0c d5       	rcall	.+2584   	; 0x124c <__subsf3>
     834:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__data_end+0xc>
     838:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__data_end+0xd>
     83c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end+0xe>
     840:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__data_end+0xf>
     844:	c5 01       	movw	r24, r10
     846:	b4 01       	movw	r22, r8
     848:	a0 96       	adiw	r28, 0x20	; 32
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
     864:	bf 90       	pop	r11
     866:	af 90       	pop	r10
     868:	9f 90       	pop	r9
     86a:	8f 90       	pop	r8
     86c:	7f 90       	pop	r7
     86e:	6f 90       	pop	r6
     870:	5f 90       	pop	r5
     872:	4f 90       	pop	r4
     874:	08 95       	ret

00000876 <crc>:
     876:	66 23       	and	r22, r22
     878:	b9 f0       	breq	.+46     	; 0x8a8 <crc+0x32>
     87a:	fc 01       	movw	r30, r24
     87c:	61 50       	subi	r22, 0x01	; 1
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	6f 5f       	subi	r22, 0xFF	; 255
     882:	7f 4f       	sbci	r23, 0xFF	; 255
     884:	68 0f       	add	r22, r24
     886:	79 1f       	adc	r23, r25
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	4c e8       	ldi	r20, 0x8C	; 140
     88c:	21 91       	ld	r18, Z+
     88e:	98 e0       	ldi	r25, 0x08	; 8
     890:	32 2f       	mov	r19, r18
     892:	38 27       	eor	r19, r24
     894:	86 95       	lsr	r24
     896:	26 95       	lsr	r18
     898:	30 fd       	sbrc	r19, 0
     89a:	84 27       	eor	r24, r20
     89c:	91 50       	subi	r25, 0x01	; 1
     89e:	c1 f7       	brne	.-16     	; 0x890 <crc+0x1a>
     8a0:	e6 17       	cp	r30, r22
     8a2:	f7 07       	cpc	r31, r23
     8a4:	99 f7       	brne	.-26     	; 0x88c <crc+0x16>
     8a6:	08 95       	ret
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	08 95       	ret

000008ac <__vector_11>:
     8ac:	1f 92       	push	r1
     8ae:	0f 92       	push	r0
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	0f 92       	push	r0
     8b4:	11 24       	eor	r1, r1
     8b6:	2f 93       	push	r18
     8b8:	3f 93       	push	r19
     8ba:	4f 93       	push	r20
     8bc:	5f 93       	push	r21
     8be:	6f 93       	push	r22
     8c0:	7f 93       	push	r23
     8c2:	8f 93       	push	r24
     8c4:	9f 93       	push	r25
     8c6:	af 93       	push	r26
     8c8:	bf 93       	push	r27
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	ef 93       	push	r30
     8d0:	ff 93       	push	r31
     8d2:	51 9b       	sbis	0x0a, 1	; 10
     8d4:	07 c0       	rjmp	.+14     	; 0x8e4 <__vector_11+0x38>
     8d6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <rx_counter>
     8da:	8c b1       	in	r24, 0x0c	; 12
     8dc:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <rx_buffer>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	0a c0       	rjmp	.+20     	; 0x8f8 <__vector_11+0x4c>
     8e4:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <rx_counter>
     8e8:	e8 2f       	mov	r30, r24
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	9c b1       	in	r25, 0x0c	; 12
     8ee:	e5 52       	subi	r30, 0x25	; 37
     8f0:	ff 4f       	sbci	r31, 0xFF	; 255
     8f2:	90 83       	st	Z, r25
     8f4:	86 30       	cpi	r24, 0x06	; 6
     8f6:	20 f4       	brcc	.+8      	; 0x900 <__vector_11+0x54>
     8f8:	8f 5f       	subi	r24, 0xFF	; 255
     8fa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <rx_counter>
     8fe:	63 c0       	rjmp	.+198    	; 0x9c6 <__vector_11+0x11a>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <Enable_Flag>
     906:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <rx_buffer>
     90a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     90e:	98 13       	cpse	r25, r24
     910:	5a c0       	rjmp	.+180    	; 0x9c6 <__vector_11+0x11a>
     912:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <Enable_Flag>
     916:	88 23       	and	r24, r24
     918:	09 f4       	brne	.+2      	; 0x91c <__vector_11+0x70>
     91a:	55 c0       	rjmp	.+170    	; 0x9c6 <__vector_11+0x11a>
     91c:	66 e0       	ldi	r22, 0x06	; 6
     91e:	8b ed       	ldi	r24, 0xDB	; 219
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a9 df       	rcall	.-174    	; 0x876 <crc>
     924:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <rx_buffer+0x6>
     928:	89 13       	cpse	r24, r25
     92a:	4d c0       	rjmp	.+154    	; 0x9c6 <__vector_11+0x11a>
     92c:	eb ed       	ldi	r30, 0xDB	; 219
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	82 81       	ldd	r24, Z+2	; 0x02
     932:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <Angle_Type>
     936:	83 81       	ldd	r24, Z+3	; 0x03
     938:	8f 36       	cpi	r24, 0x6F	; 111
     93a:	89 f4       	brne	.+34     	; 0x95e <__vector_11+0xb2>
     93c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <Address_Change_Counter>
     940:	8a 30       	cpi	r24, 0x0A	; 10
     942:	30 f4       	brcc	.+12     	; 0x950 <__vector_11+0xa4>
     944:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <Address_Change_Counter>
     948:	8f 5f       	subi	r24, 0xFF	; 255
     94a:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <Address_Change_Counter>
     94e:	09 c0       	rjmp	.+18     	; 0x962 <__vector_11+0xb6>
     950:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <rx_buffer+0x4>
     954:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     958:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <Address_Change_Counter>
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__vector_11+0xb6>
     95e:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <Address_Change_Counter>
     962:	87 e0       	ldi	r24, 0x07	; 7
     964:	eb ed       	ldi	r30, 0xDB	; 219
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	df 01       	movw	r26, r30
     96a:	98 2f       	mov	r25, r24
     96c:	1d 92       	st	X+, r1
     96e:	9a 95       	dec	r25
     970:	e9 f7       	brne	.-6      	; 0x96c <__vector_11+0xc0>
     972:	92 9a       	sbi	0x12, 2	; 18
     974:	c2 ee       	ldi	r28, 0xE2	; 226
     976:	d0 e0       	ldi	r29, 0x00	; 0
     978:	de 01       	movw	r26, r28
     97a:	1d 92       	st	X+, r1
     97c:	8a 95       	dec	r24
     97e:	e9 f7       	brne	.-6      	; 0x97a <__vector_11+0xce>
     980:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     984:	88 83       	st	Y, r24
     986:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <Y_angle>
     98a:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <Y_angle+0x1>
     98e:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <Y_angle+0x2>
     992:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <Y_angle+0x3>
     996:	21 e0       	ldi	r18, 0x01	; 1
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	ae 01       	movw	r20, r28
     99c:	e6 dd       	rcall	.-1076   	; 0x56a <float_to_byte>
     99e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9a2:	8d 83       	std	Y+5, r24	; 0x05
     9a4:	66 e0       	ldi	r22, 0x06	; 6
     9a6:	ce 01       	movw	r24, r28
     9a8:	66 df       	rcall	.-308    	; 0x876 <crc>
     9aa:	8e 83       	std	Y+6, r24	; 0x06
     9ac:	e6 e6       	ldi	r30, 0x66	; 102
     9ae:	fe e0       	ldi	r31, 0x0E	; 14
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <__vector_11+0x104>
     9b4:	00 00       	nop
     9b6:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <Enable_Flag>
     9ba:	50 9a       	sbi	0x0a, 0	; 10
     9bc:	86 e0       	ldi	r24, 0x06	; 6
     9be:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <tx_counter>
     9c2:	88 81       	ld	r24, Y
     9c4:	8c b9       	out	0x0c, r24	; 12
     9c6:	ff 91       	pop	r31
     9c8:	ef 91       	pop	r30
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	bf 91       	pop	r27
     9d0:	af 91       	pop	r26
     9d2:	9f 91       	pop	r25
     9d4:	8f 91       	pop	r24
     9d6:	7f 91       	pop	r23
     9d8:	6f 91       	pop	r22
     9da:	5f 91       	pop	r21
     9dc:	4f 91       	pop	r20
     9de:	3f 91       	pop	r19
     9e0:	2f 91       	pop	r18
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <__vector_13>:
     9ec:	1f 92       	push	r1
     9ee:	0f 92       	push	r0
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	0f 92       	push	r0
     9f4:	11 24       	eor	r1, r1
     9f6:	8f 93       	push	r24
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
     9fc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <tx_counter>
     a00:	88 23       	and	r24, r24
     a02:	79 f0       	breq	.+30     	; 0xa22 <__vector_13+0x36>
     a04:	81 50       	subi	r24, 0x01	; 1
     a06:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <tx_counter>
     a0a:	50 98       	cbi	0x0a, 0	; 10
     a0c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <tx_counter>
     a10:	e6 e0       	ldi	r30, 0x06	; 6
     a12:	f0 e0       	ldi	r31, 0x00	; 0
     a14:	e8 1b       	sub	r30, r24
     a16:	f1 09       	sbc	r31, r1
     a18:	ee 51       	subi	r30, 0x1E	; 30
     a1a:	ff 4f       	sbci	r31, 0xFF	; 255
     a1c:	80 81       	ld	r24, Z
     a1e:	8c b9       	out	0x0c, r24	; 12
     a20:	01 c0       	rjmp	.+2      	; 0xa24 <__vector_13+0x38>
     a22:	92 98       	cbi	0x12, 2	; 18
     a24:	ff 91       	pop	r31
     a26:	ef 91       	pop	r30
     a28:	8f 91       	pop	r24
     a2a:	0f 90       	pop	r0
     a2c:	0f be       	out	0x3f, r0	; 63
     a2e:	0f 90       	pop	r0
     a30:	1f 90       	pop	r1
     a32:	18 95       	reti

00000a34 <UART_Init>:
     a34:	90 bd       	out	0x20, r25	; 32
     a36:	89 b9       	out	0x09, r24	; 9
     a38:	8a b1       	in	r24, 0x0a	; 10
     a3a:	88 61       	ori	r24, 0x18	; 24
     a3c:	8a b9       	out	0x0a, r24	; 10
     a3e:	80 b5       	in	r24, 0x20	; 32
     a40:	86 68       	ori	r24, 0x86	; 134
     a42:	80 bd       	out	0x20, r24	; 32
     a44:	08 95       	ret

00000a46 <UART_Transmit>:
     a46:	5d 9b       	sbis	0x0b, 5	; 11
     a48:	fe cf       	rjmp	.-4      	; 0xa46 <UART_Transmit>
     a4a:	8c b9       	out	0x0c, r24	; 12
     a4c:	08 95       	ret

00000a4e <UART_Transmit_String>:
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	ec 01       	movw	r28, r24
     a54:	88 81       	ld	r24, Y
     a56:	88 23       	and	r24, r24
     a58:	29 f0       	breq	.+10     	; 0xa64 <UART_Transmit_String+0x16>
     a5a:	21 96       	adiw	r28, 0x01	; 1
     a5c:	f4 df       	rcall	.-24     	; 0xa46 <UART_Transmit>
     a5e:	89 91       	ld	r24, Y+
     a60:	81 11       	cpse	r24, r1
     a62:	fc cf       	rjmp	.-8      	; 0xa5c <UART_Transmit_String+0xe>
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <UART_PrintLn>:

void UART_PrintLn(const char *format, ...) {
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	c0 58       	subi	r28, 0x80	; 128
     a78:	d1 09       	sbc	r29, r1
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	9e 01       	movw	r18, r28
     a86:	29 57       	subi	r18, 0x79	; 121
     a88:	3f 4f       	sbci	r19, 0xFF	; 255
     a8a:	f9 01       	movw	r30, r18
     a8c:	41 91       	ld	r20, Z+
     a8e:	51 91       	ld	r21, Z+
     a90:	9f 01       	movw	r18, r30
	char buffer[UART_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, UART_BUFFER_SIZE, format, args);
     a92:	60 e8       	ldi	r22, 0x80	; 128
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	8e 01       	movw	r16, r28
     a98:	0f 5f       	subi	r16, 0xFF	; 255
     a9a:	1f 4f       	sbci	r17, 0xFF	; 255
     a9c:	c8 01       	movw	r24, r16
     a9e:	4d d6       	rcall	.+3226   	; 0x173a <vsnprintf>
	va_end(args);
	strcat(buffer, "\r\n");
     aa0:	f8 01       	movw	r30, r16
     aa2:	01 90       	ld	r0, Z+
     aa4:	00 20       	and	r0, r0
     aa6:	e9 f7       	brne	.-6      	; 0xaa2 <UART_PrintLn+0x38>
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	8d e0       	ldi	r24, 0x0D	; 13
     aac:	9a e0       	ldi	r25, 0x0A	; 10
     aae:	91 83       	std	Z+1, r25	; 0x01
     ab0:	80 83       	st	Z, r24
     ab2:	12 82       	std	Z+2, r1	; 0x02
	UART_Transmit_String(buffer);
     ab4:	c8 01       	movw	r24, r16
     ab6:	cb df       	rcall	.-106    	; 0xa4e <UART_Transmit_String>
}
     ab8:	c0 58       	subi	r28, 0x80	; 128
     aba:	df 4f       	sbci	r29, 0xFF	; 255
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	de bf       	out	0x3e, r29	; 62
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	cd bf       	out	0x3d, r28	; 61
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	08 95       	ret

00000ad0 <arduino_ploter>:
	return angle;
}

void arduino_ploter(void)
{
	TX_ON;
     ad0:	92 9a       	sbi	0x12, 2	; 18
	//LED = !LED;
	//Xgyro_int = (int)Gyro_Data_arr [0];
	
	//====!!!!!!!!!!!====cod to display in arduino ide monitor=====!!!!!!!!!=======
	//UART_Transmit_String("X:,Y:,Z:,X_f:,Y_f:,Z_f:\r\n");
	UART_Transmit_String("Xa:,Ya:,Za:\r\n");
     ad2:	81 e6       	ldi	r24, 0x61	; 97
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	bb df       	rcall	.-138    	; 0xa4e <UART_Transmit_String>

	UART_PrintLn("%d,%d,%d", All_Axis_ROW.Xaccel_raw, All_Axis_ROW.Yaccel_raw, All_Axis_ROW.Zaccel_raw);
     ad8:	ef ea       	ldi	r30, 0xAF	; 175
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	85 81       	ldd	r24, Z+5	; 0x05
     ade:	8f 93       	push	r24
     ae0:	84 81       	ldd	r24, Z+4	; 0x04
     ae2:	8f 93       	push	r24
     ae4:	83 81       	ldd	r24, Z+3	; 0x03
     ae6:	8f 93       	push	r24
     ae8:	82 81       	ldd	r24, Z+2	; 0x02
     aea:	8f 93       	push	r24
     aec:	81 81       	ldd	r24, Z+1	; 0x01
     aee:	8f 93       	push	r24
     af0:	80 81       	ld	r24, Z
     af2:	8f 93       	push	r24
     af4:	8f e6       	ldi	r24, 0x6F	; 111
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	b6 df       	rcall	.-148    	; 0xa6a <UART_PrintLn>
	//UART_PrintLn("%d,%d,%d", Xaccel_int, Yaccel_int, Zaccel_int); //%.2f
}
     afe:	8d b7       	in	r24, 0x3d	; 61
     b00:	9e b7       	in	r25, 0x3e	; 62
     b02:	08 96       	adiw	r24, 0x08	; 8
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	9e bf       	out	0x3e, r25	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	8d bf       	out	0x3d, r24	; 61
     b0e:	08 95       	ret

00000b10 <main>:
	return value;
}

int main(void)
{
	sei();
     b10:	78 94       	sei
	//wdt_enable(WDTO_1S);
	_LCD_PORT_DIR = _ALL_OUTPUT;
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	84 bb       	out	0x14, r24	; 20
	_I2C_PORT_DIR = ( 1 << _SDA ) | _SCL;
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	84 bb       	out	0x14, r24	; 20
	
	/* MPU6050 Init */
	MPU6050_AutoInit(100);
     b1a:	84 e6       	ldi	r24, 0x64	; 100
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	26 d2       	rcall	.+1100   	; 0xf6c <MPU6050_AutoInit>
	UART_Init(UBRR_SPEED);
     b20:	8f e2       	ldi	r24, 0x2F	; 47
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	87 df       	rcall	.-242    	; 0xa34 <UART_Init>
	RX_TX_DIRECTION = 1;
     b26:	8a 9a       	sbi	0x11, 2	; 17
	LED_OUT = 1;
     b28:	8b 9a       	sbi	0x11, 3	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	8f e7       	ldi	r24, 0x7F	; 127
     b2e:	94 e0       	ldi	r25, 0x04	; 4
     b30:	21 50       	subi	r18, 0x01	; 1
     b32:	80 40       	sbci	r24, 0x00	; 0
     b34:	90 40       	sbci	r25, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <main+0x20>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <main+0x2a>
     b3a:	00 00       	nop
		MPU6050_GetRawGyroZ(&All_Axis_ROW.Zgyro_raw, 20);
		LED = 0;
		//wdt_reset();
// 		MPU6050_GetAccelAngleX(&x_accel, 100);
// 		MPU6050_GetGyroX(&x_gyro, 100);
		All_Axis.x_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Yaccel_raw , -All_Axis_ROW.Zaccel_raw ) + _MATH_PI ) );
     b3c:	0f 2e       	mov	r0, r31
     b3e:	f7 e9       	ldi	r31, 0x97	; 151
     b40:	2f 2e       	mov	r2, r31
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	3f 2e       	mov	r3, r31
     b46:	f0 2d       	mov	r31, r0
	_delay_ms(100);
	//MPU6050_Calibrate(offsetGX, offsetGY, offsetGZ);
	/* ---------------------------------------- */
    while (1) 
    {
		LED = 1;
     b48:	93 9a       	sbi	0x12, 3	; 18
// 		MPU6050_GetGyro(Gyro_Data_arr, 100);
// 		MPU6050_GetAccel(Accel_Data_arr, 100);
		
		MPU6050_GetRawAccelX(&All_Axis_ROW.Xaccel_raw, 20);
     b4a:	64 e1       	ldi	r22, 0x14	; 20
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	8f ea       	ldi	r24, 0xAF	; 175
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	aa d2       	rcall	.+1364   	; 0x10a8 <MPU6050_GetRawAccelX>
		MPU6050_GetRawAccelY(&All_Axis_ROW.Yaccel_raw, 20);
     b54:	64 e1       	ldi	r22, 0x14	; 20
     b56:	70 e0       	ldi	r23, 0x00	; 0
     b58:	81 eb       	ldi	r24, 0xB1	; 177
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	c8 d2       	rcall	.+1424   	; 0x10ee <MPU6050_GetRawAccelY>
		MPU6050_GetRawAccelZ(&All_Axis_ROW.Zaccel_raw, 20);
     b5e:	64 e1       	ldi	r22, 0x14	; 20
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	83 eb       	ldi	r24, 0xB3	; 179
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	e6 d2       	rcall	.+1484   	; 0x1134 <MPU6050_GetRawAccelZ>
		MPU6050_GetRawGyroX(&All_Axis_ROW.Xgyro_raw, 20);
     b68:	64 e1       	ldi	r22, 0x14	; 20
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	85 eb       	ldi	r24, 0xB5	; 181
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	04 d3       	rcall	.+1544   	; 0x117a <MPU6050_GetRawGyroX>
		MPU6050_GetRawGyroY(&All_Axis_ROW.Ygyro_raw, 20);
     b72:	64 e1       	ldi	r22, 0x14	; 20
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	87 eb       	ldi	r24, 0xB7	; 183
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	22 d3       	rcall	.+1604   	; 0x11c0 <MPU6050_GetRawGyroY>
		MPU6050_GetRawGyroZ(&All_Axis_ROW.Zgyro_raw, 20);
     b7c:	64 e1       	ldi	r22, 0x14	; 20
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	89 eb       	ldi	r24, 0xB9	; 185
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	40 d3       	rcall	.+1664   	; 0x1206 <MPU6050_GetRawGyroZ>
		LED = 0;
     b86:	93 98       	cbi	0x12, 3	; 18
		//wdt_reset();
// 		MPU6050_GetAccelAngleX(&x_accel, 100);
// 		MPU6050_GetGyroX(&x_gyro, 100);
		All_Axis.x_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Yaccel_raw , -All_Axis_ROW.Zaccel_raw ) + _MATH_PI ) );
     b88:	cf ea       	ldi	r28, 0xAF	; 175
     b8a:	d0 e0       	ldi	r29, 0x00	; 0
     b8c:	6c 81       	ldd	r22, Y+4	; 0x04
     b8e:	7d 81       	ldd	r23, Y+5	; 0x05
     b90:	71 95       	neg	r23
     b92:	61 95       	neg	r22
     b94:	71 09       	sbc	r23, r1
     b96:	07 2e       	mov	r0, r23
     b98:	00 0c       	add	r0, r0
     b9a:	88 0b       	sbc	r24, r24
     b9c:	99 0b       	sbc	r25, r25
     b9e:	8b d4       	rcall	.+2326   	; 0x14b6 <__floatsisf>
     ba0:	4b 01       	movw	r8, r22
     ba2:	5c 01       	movw	r10, r24
     ba4:	6a 81       	ldd	r22, Y+2	; 0x02
     ba6:	7b 81       	ldd	r23, Y+3	; 0x03
     ba8:	71 95       	neg	r23
     baa:	61 95       	neg	r22
     bac:	71 09       	sbc	r23, r1
     bae:	07 2e       	mov	r0, r23
     bb0:	00 0c       	add	r0, r0
     bb2:	88 0b       	sbc	r24, r24
     bb4:	99 0b       	sbc	r25, r25
     bb6:	7f d4       	rcall	.+2302   	; 0x14b6 <__floatsisf>
     bb8:	6b 01       	movw	r12, r22
     bba:	7c 01       	movw	r14, r24
     bbc:	a5 01       	movw	r20, r10
     bbe:	94 01       	movw	r18, r8
     bc0:	b9 d3       	rcall	.+1906   	; 0x1334 <atan2>
     bc2:	2b ed       	ldi	r18, 0xDB	; 219
     bc4:	3f e0       	ldi	r19, 0x0F	; 15
     bc6:	49 e4       	ldi	r20, 0x49	; 73
     bc8:	50 e4       	ldi	r21, 0x40	; 64
     bca:	41 d3       	rcall	.+1666   	; 0x124e <__addsf3>
     bcc:	21 ee       	ldi	r18, 0xE1	; 225
     bce:	3e e2       	ldi	r19, 0x2E	; 46
     bd0:	45 e6       	ldi	r20, 0x65	; 101
     bd2:	52 e4       	ldi	r21, 0x42	; 66
     bd4:	4c d5       	rcall	.+2712   	; 0x166e <__mulsf3>
     bd6:	f1 01       	movw	r30, r2
     bd8:	64 83       	std	Z+4, r22	; 0x04
     bda:	75 83       	std	Z+5, r23	; 0x05
     bdc:	86 83       	std	Z+6, r24	; 0x06
     bde:	97 83       	std	Z+7, r25	; 0x07
		All_Axis.y_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Xaccel_raw , -All_Axis_ROW.Zaccel_raw ) + _MATH_PI ) );
     be0:	68 81       	ld	r22, Y
     be2:	79 81       	ldd	r23, Y+1	; 0x01
     be4:	71 95       	neg	r23
     be6:	61 95       	neg	r22
     be8:	71 09       	sbc	r23, r1
     bea:	07 2e       	mov	r0, r23
     bec:	00 0c       	add	r0, r0
     bee:	88 0b       	sbc	r24, r24
     bf0:	99 0b       	sbc	r25, r25
     bf2:	61 d4       	rcall	.+2242   	; 0x14b6 <__floatsisf>
     bf4:	2b 01       	movw	r4, r22
     bf6:	3c 01       	movw	r6, r24
     bf8:	a5 01       	movw	r20, r10
     bfa:	94 01       	movw	r18, r8
     bfc:	9b d3       	rcall	.+1846   	; 0x1334 <atan2>
     bfe:	2b ed       	ldi	r18, 0xDB	; 219
     c00:	3f e0       	ldi	r19, 0x0F	; 15
     c02:	49 e4       	ldi	r20, 0x49	; 73
     c04:	50 e4       	ldi	r21, 0x40	; 64
     c06:	23 d3       	rcall	.+1606   	; 0x124e <__addsf3>
     c08:	21 ee       	ldi	r18, 0xE1	; 225
     c0a:	3e e2       	ldi	r19, 0x2E	; 46
     c0c:	45 e6       	ldi	r20, 0x65	; 101
     c0e:	52 e4       	ldi	r21, 0x42	; 66
     c10:	2e d5       	rcall	.+2652   	; 0x166e <__mulsf3>
     c12:	4b 01       	movw	r8, r22
     c14:	5c 01       	movw	r10, r24
     c16:	f1 01       	movw	r30, r2
     c18:	64 87       	std	Z+12, r22	; 0x0c
     c1a:	75 87       	std	Z+13, r23	; 0x0d
     c1c:	86 87       	std	Z+14, r24	; 0x0e
     c1e:	97 87       	std	Z+15, r25	; 0x0f
		All_Axis.z_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Yaccel_raw , -All_Axis_ROW.Xaccel_raw ) + _MATH_PI ) );
     c20:	a3 01       	movw	r20, r6
     c22:	92 01       	movw	r18, r4
     c24:	c7 01       	movw	r24, r14
     c26:	b6 01       	movw	r22, r12
     c28:	85 d3       	rcall	.+1802   	; 0x1334 <atan2>
     c2a:	2b ed       	ldi	r18, 0xDB	; 219
     c2c:	3f e0       	ldi	r19, 0x0F	; 15
     c2e:	49 e4       	ldi	r20, 0x49	; 73
     c30:	50 e4       	ldi	r21, 0x40	; 64
     c32:	0d d3       	rcall	.+1562   	; 0x124e <__addsf3>
     c34:	21 ee       	ldi	r18, 0xE1	; 225
     c36:	3e e2       	ldi	r19, 0x2E	; 46
     c38:	45 e6       	ldi	r20, 0x65	; 101
     c3a:	52 e4       	ldi	r21, 0x42	; 66
     c3c:	18 d5       	rcall	.+2608   	; 0x166e <__mulsf3>
     c3e:	f1 01       	movw	r30, r2
     c40:	64 8b       	std	Z+20, r22	; 0x14
     c42:	75 8b       	std	Z+21, r23	; 0x15
     c44:	86 8b       	std	Z+22, r24	; 0x16
     c46:	97 8b       	std	Z+23, r25	; 0x17
		All_Axis.x_gyro = ((All_Axis_ROW.Xgyro_raw /*- offsetGX*/) / _MPU_GYRO_SENS_2000_SENS /*/ (1000 / 120)*/);
     c48:	6e 81       	ldd	r22, Y+6	; 0x06
     c4a:	7f 81       	ldd	r23, Y+7	; 0x07
     c4c:	07 2e       	mov	r0, r23
     c4e:	00 0c       	add	r0, r0
     c50:	88 0b       	sbc	r24, r24
     c52:	99 0b       	sbc	r25, r25
     c54:	30 d4       	rcall	.+2144   	; 0x14b6 <__floatsisf>
     c56:	23 e3       	ldi	r18, 0x33	; 51
     c58:	33 e3       	ldi	r19, 0x33	; 51
     c5a:	43 e8       	ldi	r20, 0x83	; 131
     c5c:	51 e4       	ldi	r21, 0x41	; 65
     c5e:	c1 d3       	rcall	.+1922   	; 0x13e2 <__divsf3>
     c60:	f1 01       	movw	r30, r2
     c62:	60 83       	st	Z, r22
     c64:	71 83       	std	Z+1, r23	; 0x01
     c66:	82 83       	std	Z+2, r24	; 0x02
     c68:	93 83       	std	Z+3, r25	; 0x03
		All_Axis.y_gyro = ((All_Axis_ROW.Ygyro_raw /*- offsetGY*/) / _MPU_GYRO_SENS_2000_SENS /*/ (1000 / 120)*/);
     c6a:	68 85       	ldd	r22, Y+8	; 0x08
     c6c:	79 85       	ldd	r23, Y+9	; 0x09
     c6e:	07 2e       	mov	r0, r23
     c70:	00 0c       	add	r0, r0
     c72:	88 0b       	sbc	r24, r24
     c74:	99 0b       	sbc	r25, r25
     c76:	1f d4       	rcall	.+2110   	; 0x14b6 <__floatsisf>
     c78:	23 e3       	ldi	r18, 0x33	; 51
     c7a:	33 e3       	ldi	r19, 0x33	; 51
     c7c:	43 e8       	ldi	r20, 0x83	; 131
     c7e:	51 e4       	ldi	r21, 0x41	; 65
     c80:	b0 d3       	rcall	.+1888   	; 0x13e2 <__divsf3>
     c82:	2b 01       	movw	r4, r22
     c84:	3c 01       	movw	r6, r24
     c86:	f1 01       	movw	r30, r2
     c88:	60 87       	std	Z+8, r22	; 0x08
     c8a:	71 87       	std	Z+9, r23	; 0x09
     c8c:	82 87       	std	Z+10, r24	; 0x0a
     c8e:	93 87       	std	Z+11, r25	; 0x0b
		All_Axis.z_gyro = ((All_Axis_ROW.Zgyro_raw /*- offsetGZ*/) / _MPU_GYRO_SENS_2000_SENS /*/ (1000 / 120)*/);
     c90:	6a 85       	ldd	r22, Y+10	; 0x0a
     c92:	7b 85       	ldd	r23, Y+11	; 0x0b
     c94:	07 2e       	mov	r0, r23
     c96:	00 0c       	add	r0, r0
     c98:	88 0b       	sbc	r24, r24
     c9a:	99 0b       	sbc	r25, r25
     c9c:	0c d4       	rcall	.+2072   	; 0x14b6 <__floatsisf>
     c9e:	23 e3       	ldi	r18, 0x33	; 51
     ca0:	33 e3       	ldi	r19, 0x33	; 51
     ca2:	43 e8       	ldi	r20, 0x83	; 131
     ca4:	51 e4       	ldi	r21, 0x41	; 65
     ca6:	9d d3       	rcall	.+1850   	; 0x13e2 <__divsf3>
     ca8:	f1 01       	movw	r30, r2
     caa:	60 8b       	std	Z+16, r22	; 0x10
     cac:	71 8b       	std	Z+17, r23	; 0x11
     cae:	82 8b       	std	Z+18, r24	; 0x12
     cb0:	93 8b       	std	Z+19, r25	; 0x13
// 		//==================Simple KALMAN filter==================
// 		filtered_Y = KOEF * y_accel + (1 - KOEF) * y_accel_OLD;
// 		y_accel_OLD = y_accel;
// 		//========================================================
		//X_angle = kalman_filter(x_accel, x_gyro, 110);
		Y_angle = kalman_filter(All_Axis.y_accel, All_Axis.y_gyro, 110);
     cb2:	e1 2c       	mov	r14, r1
     cb4:	f1 2c       	mov	r15, r1
     cb6:	0c ed       	ldi	r16, 0xDC	; 220
     cb8:	12 e4       	ldi	r17, 0x42	; 66
     cba:	a3 01       	movw	r20, r6
     cbc:	92 01       	movw	r18, r4
     cbe:	c5 01       	movw	r24, r10
     cc0:	b4 01       	movw	r22, r8
     cc2:	71 dc       	rcall	.-1822   	; 0x5a6 <kalman_filter>
     cc4:	60 93 93 00 	sts	0x0093, r22	; 0x800093 <Y_angle>
     cc8:	70 93 94 00 	sts	0x0094, r23	; 0x800094 <Y_angle+0x1>
     ccc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <Y_angle+0x2>
     cd0:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <Y_angle+0x3>
		//Z_angle = kalman_filter(z_accel, z_gyro, 110); //t prev = 120
	//====================================Output depending on the type BEGIN======================================
		if (Angle_Type == RB_DATA_TYPE){
     cd4:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <Angle_Type>
     cd8:	8a 3f       	cpi	r24, 0xFA	; 250
     cda:	a9 f4       	brne	.+42     	; 0xd06 <main+0x1f6>
			Y_angle -= 90.0;
     cdc:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <Y_angle>
     ce0:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <Y_angle+0x1>
     ce4:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <Y_angle+0x2>
     ce8:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <Y_angle+0x3>
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	44 eb       	ldi	r20, 0xB4	; 180
     cf2:	52 e4       	ldi	r21, 0x42	; 66
     cf4:	ab d2       	rcall	.+1366   	; 0x124c <__subsf3>
     cf6:	60 93 93 00 	sts	0x0093, r22	; 0x800093 <Y_angle>
     cfa:	70 93 94 00 	sts	0x0094, r23	; 0x800094 <Y_angle+0x1>
     cfe:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <Y_angle+0x2>
     d02:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <Y_angle+0x3>
		}
		if (Y_angle <= 180.0){
     d06:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <Y_angle>
     d0a:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <Y_angle+0x1>
     d0e:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <Y_angle+0x2>
     d12:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <Y_angle+0x3>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	44 e3       	ldi	r20, 0x34	; 52
     d1c:	53 e4       	ldi	r21, 0x43	; 67
     d1e:	5d d3       	rcall	.+1722   	; 0x13da <__cmpsf2>
     d20:	18 16       	cp	r1, r24
     d22:	8c f0       	brlt	.+34     	; 0xd46 <main+0x236>
			Y_angle = Y_angle;
     d24:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <Y_angle>
     d28:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <Y_angle+0x1>
     d2c:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <Y_angle+0x2>
     d30:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <Y_angle+0x3>
     d34:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <Y_angle>
     d38:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <Y_angle+0x1>
     d3c:	a0 93 95 00 	sts	0x0095, r26	; 0x800095 <Y_angle+0x2>
     d40:	b0 93 96 00 	sts	0x0096, r27	; 0x800096 <Y_angle+0x3>
     d44:	15 c0       	rjmp	.+42     	; 0xd70 <main+0x260>
		}else{
			Y_angle = Y_angle - 360.0;
     d46:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <Y_angle>
     d4a:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <Y_angle+0x1>
     d4e:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <Y_angle+0x2>
     d52:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <Y_angle+0x3>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	44 eb       	ldi	r20, 0xB4	; 180
     d5c:	53 e4       	ldi	r21, 0x43	; 67
     d5e:	76 d2       	rcall	.+1260   	; 0x124c <__subsf3>
     d60:	60 93 93 00 	sts	0x0093, r22	; 0x800093 <Y_angle>
     d64:	70 93 94 00 	sts	0x0094, r23	; 0x800094 <Y_angle+0x1>
     d68:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <Y_angle+0x2>
     d6c:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <Y_angle+0x3>
		}
		if (Angle_Type == BOLLARD_DATA_TYPE)
     d70:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <Angle_Type>
			//x_gyro
			//Z_gyro
		}
	//=====================================Output depending on the type END=======================================
	#ifdef DEBUG_MOD
		arduino_ploter();
     d74:	ad de       	rcall	.-678    	; 0xad0 <arduino_ploter>
	#endif
    }
     d76:	e8 ce       	rjmp	.-560    	; 0xb48 <main+0x38>

00000d78 <MPU6050_SetParameters>:
		return _MPU_OK;
	}
	
	return _MPU_ERROR;
	
}
     d78:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <MPU6050_Config+0x4>
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	99 f0       	breq	.+38     	; 0xda6 <MPU6050_SetParameters+0x2e>
     d80:	28 f0       	brcs	.+10     	; 0xd8c <MPU6050_SetParameters+0x14>
     d82:	82 30       	cpi	r24, 0x02	; 2
     d84:	e9 f0       	breq	.+58     	; 0xdc0 <MPU6050_SetParameters+0x48>
     d86:	83 30       	cpi	r24, 0x03	; 3
     d88:	41 f1       	breq	.+80     	; 0xdda <MPU6050_SetParameters+0x62>
     d8a:	34 c0       	rjmp	.+104    	; 0xdf4 <MPU6050_SetParameters+0x7c>
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	a0 e8       	ldi	r26, 0x80	; 128
     d92:	b6 e4       	ldi	r27, 0x46	; 70
     d94:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <MPU6050_Parameter+0x4>
     d98:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <MPU6050_Parameter+0x5>
     d9c:	a0 93 c7 00 	sts	0x00C7, r26	; 0x8000c7 <MPU6050_Parameter+0x6>
     da0:	b0 93 c8 00 	sts	0x00C8, r27	; 0x8000c8 <MPU6050_Parameter+0x7>
     da4:	33 c0       	rjmp	.+102    	; 0xe0c <MPU6050_SetParameters+0x94>
     da6:	80 e0       	ldi	r24, 0x00	; 0
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a0 e0       	ldi	r26, 0x00	; 0
     dac:	b6 e4       	ldi	r27, 0x46	; 70
     dae:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <MPU6050_Parameter+0x4>
     db2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <MPU6050_Parameter+0x5>
     db6:	a0 93 c7 00 	sts	0x00C7, r26	; 0x8000c7 <MPU6050_Parameter+0x6>
     dba:	b0 93 c8 00 	sts	0x00C8, r27	; 0x8000c8 <MPU6050_Parameter+0x7>
     dbe:	26 c0       	rjmp	.+76     	; 0xe0c <MPU6050_SetParameters+0x94>
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	a0 e8       	ldi	r26, 0x80	; 128
     dc6:	b5 e4       	ldi	r27, 0x45	; 69
     dc8:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <MPU6050_Parameter+0x4>
     dcc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <MPU6050_Parameter+0x5>
     dd0:	a0 93 c7 00 	sts	0x00C7, r26	; 0x8000c7 <MPU6050_Parameter+0x6>
     dd4:	b0 93 c8 00 	sts	0x00C8, r27	; 0x8000c8 <MPU6050_Parameter+0x7>
     dd8:	19 c0       	rjmp	.+50     	; 0xe0c <MPU6050_SetParameters+0x94>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e0       	ldi	r26, 0x00	; 0
     de0:	b5 e4       	ldi	r27, 0x45	; 69
     de2:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <MPU6050_Parameter+0x4>
     de6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <MPU6050_Parameter+0x5>
     dea:	a0 93 c7 00 	sts	0x00C7, r26	; 0x8000c7 <MPU6050_Parameter+0x6>
     dee:	b0 93 c8 00 	sts	0x00C8, r27	; 0x8000c8 <MPU6050_Parameter+0x7>
     df2:	0c c0       	rjmp	.+24     	; 0xe0c <MPU6050_SetParameters+0x94>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	a0 e8       	ldi	r26, 0x80	; 128
     dfa:	b6 e4       	ldi	r27, 0x46	; 70
     dfc:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <MPU6050_Parameter+0x4>
     e00:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <MPU6050_Parameter+0x5>
     e04:	a0 93 c7 00 	sts	0x00C7, r26	; 0x8000c7 <MPU6050_Parameter+0x6>
     e08:	b0 93 c8 00 	sts	0x00C8, r27	; 0x8000c8 <MPU6050_Parameter+0x7>
     e0c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <MPU6050_Config+0x3>
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	99 f0       	breq	.+38     	; 0xe3a <MPU6050_SetParameters+0xc2>
     e14:	28 f0       	brcs	.+10     	; 0xe20 <MPU6050_SetParameters+0xa8>
     e16:	82 30       	cpi	r24, 0x02	; 2
     e18:	e9 f0       	breq	.+58     	; 0xe54 <MPU6050_SetParameters+0xdc>
     e1a:	83 30       	cpi	r24, 0x03	; 3
     e1c:	41 f1       	breq	.+80     	; 0xe6e <MPU6050_SetParameters+0xf6>
     e1e:	34 c0       	rjmp	.+104    	; 0xe88 <MPU6050_SetParameters+0x110>
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a3 e0       	ldi	r26, 0x03	; 3
     e26:	b3 e4       	ldi	r27, 0x43	; 67
     e28:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <MPU6050_Parameter>
     e2c:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <MPU6050_Parameter+0x1>
     e30:	a0 93 c3 00 	sts	0x00C3, r26	; 0x8000c3 <MPU6050_Parameter+0x2>
     e34:	b0 93 c4 00 	sts	0x00C4, r27	; 0x8000c4 <MPU6050_Parameter+0x3>
     e38:	08 95       	ret
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	a3 e8       	ldi	r26, 0x83	; 131
     e40:	b2 e4       	ldi	r27, 0x42	; 66
     e42:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <MPU6050_Parameter>
     e46:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <MPU6050_Parameter+0x1>
     e4a:	a0 93 c3 00 	sts	0x00C3, r26	; 0x8000c3 <MPU6050_Parameter+0x2>
     e4e:	b0 93 c4 00 	sts	0x00C4, r27	; 0x8000c4 <MPU6050_Parameter+0x3>
     e52:	08 95       	ret
     e54:	83 e3       	ldi	r24, 0x33	; 51
     e56:	93 e3       	ldi	r25, 0x33	; 51
     e58:	a3 e0       	ldi	r26, 0x03	; 3
     e5a:	b2 e4       	ldi	r27, 0x42	; 66
     e5c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <MPU6050_Parameter>
     e60:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <MPU6050_Parameter+0x1>
     e64:	a0 93 c3 00 	sts	0x00C3, r26	; 0x8000c3 <MPU6050_Parameter+0x2>
     e68:	b0 93 c4 00 	sts	0x00C4, r27	; 0x8000c4 <MPU6050_Parameter+0x3>
     e6c:	08 95       	ret
     e6e:	83 e3       	ldi	r24, 0x33	; 51
     e70:	93 e3       	ldi	r25, 0x33	; 51
     e72:	a3 e8       	ldi	r26, 0x83	; 131
     e74:	b1 e4       	ldi	r27, 0x41	; 65
     e76:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <MPU6050_Parameter>
     e7a:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <MPU6050_Parameter+0x1>
     e7e:	a0 93 c3 00 	sts	0x00C3, r26	; 0x8000c3 <MPU6050_Parameter+0x2>
     e82:	b0 93 c4 00 	sts	0x00C4, r27	; 0x8000c4 <MPU6050_Parameter+0x3>
     e86:	08 95       	ret
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	a3 e0       	ldi	r26, 0x03	; 3
     e8e:	b3 e4       	ldi	r27, 0x43	; 67
     e90:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <MPU6050_Parameter>
     e94:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <MPU6050_Parameter+0x1>
     e98:	a0 93 c3 00 	sts	0x00C3, r26	; 0x8000c3 <MPU6050_Parameter+0x2>
     e9c:	b0 93 c4 00 	sts	0x00C4, r27	; 0x8000c4 <MPU6050_Parameter+0x3>
     ea0:	08 95       	ret

00000ea2 <MPU6050_IsReady>:
     ea2:	ac 01       	movw	r20, r24
     ea4:	65 e0       	ldi	r22, 0x05	; 5
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	80 ed       	ldi	r24, 0xD0	; 208
     eaa:	69 d9       	rcall	.-3374   	; 0x17e <I2C_IsDeviceReady>
     eac:	08 95       	ret

00000eae <MPU6050_SingleWrite>:
     eae:	af 92       	push	r10
     eb0:	bf 92       	push	r11
     eb2:	cf 92       	push	r12
     eb4:	df 92       	push	r13
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	0f 93       	push	r16
     ebc:	1f 93       	push	r17
     ebe:	cf 93       	push	r28
     ec0:	df 93       	push	r29
     ec2:	1f 92       	push	r1
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	18 2f       	mov	r17, r24
     eca:	69 83       	std	Y+1, r22	; 0x01
     ecc:	5a 01       	movw	r10, r20
     ece:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <g_mpu_com_resp>
     ed2:	ca 01       	movw	r24, r20
     ed4:	e6 df       	rcall	.-52     	; 0xea2 <MPU6050_IsReady>
     ed6:	81 30       	cpi	r24, 0x01	; 1
     ed8:	81 f4       	brne	.+32     	; 0xefa <MPU6050_SingleWrite+0x4c>
     eda:	41 2f       	mov	r20, r17
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	c1 2c       	mov	r12, r1
     ee4:	d1 2c       	mov	r13, r1
     ee6:	76 01       	movw	r14, r12
     ee8:	c3 94       	inc	r12
     eea:	8e 01       	movw	r16, r28
     eec:	0f 5f       	subi	r16, 0xFF	; 255
     eee:	1f 4f       	sbci	r17, 0xFF	; 255
     ef0:	28 e0       	ldi	r18, 0x08	; 8
     ef2:	80 ed       	ldi	r24, 0xD0	; 208
     ef4:	73 d9       	rcall	.-3354   	; 0x1dc <I2C_Mem_Write>
     ef6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <g_mpu_com_resp>
     efa:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <g_mpu_com_resp>
     efe:	0f 90       	pop	r0
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	08 95       	ret

00000f16 <MPU6050_BurstRead>:
     f16:	af 92       	push	r10
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	c8 2f       	mov	r28, r24
     f2a:	8b 01       	movw	r16, r22
     f2c:	c4 2e       	mov	r12, r20
     f2e:	59 01       	movw	r10, r18
     f30:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <g_mpu_com_resp>
     f34:	c9 01       	movw	r24, r18
     f36:	b5 df       	rcall	.-150    	; 0xea2 <MPU6050_IsReady>
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	61 f4       	brne	.+24     	; 0xf54 <MPU6050_BurstRead+0x3e>
     f3c:	d1 2c       	mov	r13, r1
     f3e:	e1 2c       	mov	r14, r1
     f40:	f1 2c       	mov	r15, r1
     f42:	4c 2f       	mov	r20, r28
     f44:	50 e0       	ldi	r21, 0x00	; 0
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	70 e0       	ldi	r23, 0x00	; 0
     f4a:	28 e0       	ldi	r18, 0x08	; 8
     f4c:	80 ed       	ldi	r24, 0xD0	; 208
     f4e:	18 da       	rcall	.-3024   	; 0x380 <I2C_Mem_Read>
     f50:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <g_mpu_com_resp>
     f54:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <g_mpu_com_resp>
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	df 90       	pop	r13
     f64:	cf 90       	pop	r12
     f66:	bf 90       	pop	r11
     f68:	af 90       	pop	r10
     f6a:	08 95       	ret

00000f6c <MPU6050_AutoInit>:
     f6c:	af 92       	push	r10
     f6e:	bf 92       	push	r11
     f70:	cf 92       	push	r12
     f72:	df 92       	push	r13
     f74:	ef 92       	push	r14
     f76:	ff 92       	push	r15
     f78:	0f 93       	push	r16
     f7a:	1f 93       	push	r17
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	8c 01       	movw	r16, r24
     f82:	f2 d8       	rcall	.-3612   	; 0x168 <I2C_Init>
     f84:	cf e0       	ldi	r28, 0x0F	; 15
     f86:	d1 e0       	ldi	r29, 0x01	; 1
     f88:	18 82       	st	Y, r1
     f8a:	1a 82       	std	Y+2, r1	; 0x02
     f8c:	1e 82       	std	Y+6, r1	; 0x06
     f8e:	19 82       	std	Y+1, r1	; 0x01
     f90:	0f 2e       	mov	r0, r31
     f92:	f4 e1       	ldi	r31, 0x14	; 20
     f94:	af 2e       	mov	r10, r31
     f96:	f1 e0       	ldi	r31, 0x01	; 1
     f98:	bf 2e       	mov	r11, r31
     f9a:	f0 2d       	mov	r31, r0
     f9c:	f5 01       	movw	r30, r10
     f9e:	80 81       	ld	r24, Z
     fa0:	8c 7f       	andi	r24, 0xFC	; 252
     fa2:	8b 7f       	andi	r24, 0xFB	; 251
     fa4:	80 83       	st	Z, r24
     fa6:	83 e0       	ldi	r24, 0x03	; 3
     fa8:	8b 83       	std	Y+3, r24	; 0x03
     faa:	1c 82       	std	Y+4, r1	; 0x04
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	8f 83       	std	Y+7, r24	; 0x07
     fb0:	a8 01       	movw	r20, r16
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	88 e3       	ldi	r24, 0x38	; 56
     fb6:	7b df       	rcall	.-266    	; 0xeae <MPU6050_SingleWrite>
     fb8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <g_mpu_com_resp>
     fbc:	68 81       	ld	r22, Y
     fbe:	61 50       	subi	r22, 0x01	; 1
     fc0:	a8 01       	movw	r20, r16
     fc2:	89 e1       	ldi	r24, 0x19	; 25
     fc4:	74 df       	rcall	.-280    	; 0xeae <MPU6050_SingleWrite>
     fc6:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <g_mpu_com_resp>
     fca:	89 0f       	add	r24, r25
     fcc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <g_mpu_com_resp>
     fd0:	6b 81       	ldd	r22, Y+3	; 0x03
     fd2:	66 0f       	add	r22, r22
     fd4:	66 0f       	add	r22, r22
     fd6:	66 0f       	add	r22, r22
     fd8:	a8 01       	movw	r20, r16
     fda:	8b e1       	ldi	r24, 0x1B	; 27
     fdc:	68 df       	rcall	.-304    	; 0xeae <MPU6050_SingleWrite>
     fde:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <g_mpu_com_resp>
     fe2:	89 0f       	add	r24, r25
     fe4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <g_mpu_com_resp>
     fe8:	6c 81       	ldd	r22, Y+4	; 0x04
     fea:	66 0f       	add	r22, r22
     fec:	66 0f       	add	r22, r22
     fee:	66 0f       	add	r22, r22
     ff0:	a8 01       	movw	r20, r16
     ff2:	8c e1       	ldi	r24, 0x1C	; 28
     ff4:	5c df       	rcall	.-328    	; 0xeae <MPU6050_SingleWrite>
     ff6:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <g_mpu_com_resp>
     ffa:	89 0f       	add	r24, r25
     ffc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <g_mpu_com_resp>
    1000:	69 81       	ldd	r22, Y+1	; 0x01
    1002:	66 0f       	add	r22, r22
    1004:	66 0f       	add	r22, r22
    1006:	66 0f       	add	r22, r22
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	68 2b       	or	r22, r24
    100c:	a8 01       	movw	r20, r16
    100e:	8a e1       	ldi	r24, 0x1A	; 26
    1010:	4e df       	rcall	.-356    	; 0xeae <MPU6050_SingleWrite>
    1012:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <g_mpu_com_resp>
    1016:	89 0f       	add	r24, r25
    1018:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <g_mpu_com_resp>
    101c:	f5 01       	movw	r30, r10
    101e:	80 81       	ld	r24, Z
    1020:	68 2f       	mov	r22, r24
    1022:	67 95       	ror	r22
    1024:	66 27       	eor	r22, r22
    1026:	67 95       	ror	r22
    1028:	81 fb       	bst	r24, 1
    102a:	cc 24       	eor	r12, r12
    102c:	c0 f8       	bld	r12, 0
    102e:	d1 2c       	mov	r13, r1
    1030:	00 24       	eor	r0, r0
    1032:	d6 94       	lsr	r13
    1034:	c7 94       	ror	r12
    1036:	07 94       	ror	r0
    1038:	d6 94       	lsr	r13
    103a:	c7 94       	ror	r12
    103c:	07 94       	ror	r0
    103e:	dc 2c       	mov	r13, r12
    1040:	c0 2c       	mov	r12, r0
    1042:	c6 2a       	or	r12, r22
    1044:	82 fb       	bst	r24, 2
    1046:	ee 24       	eor	r14, r14
    1048:	e0 f8       	bld	r14, 0
    104a:	f1 2c       	mov	r15, r1
    104c:	ee 0c       	add	r14, r14
    104e:	ff 1c       	adc	r15, r15
    1050:	ee 0c       	add	r14, r14
    1052:	ff 1c       	adc	r15, r15
    1054:	ee 0c       	add	r14, r14
    1056:	ff 1c       	adc	r15, r15
    1058:	ee 0c       	add	r14, r14
    105a:	ff 1c       	adc	r15, r15
    105c:	ee 0c       	add	r14, r14
    105e:	ff 1c       	adc	r15, r15
    1060:	6c 2d       	mov	r22, r12
    1062:	6e 29       	or	r22, r14
    1064:	a8 01       	movw	r20, r16
    1066:	87 e3       	ldi	r24, 0x37	; 55
    1068:	22 df       	rcall	.-444    	; 0xeae <MPU6050_SingleWrite>
    106a:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <g_mpu_com_resp>
    106e:	89 0f       	add	r24, r25
    1070:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <g_mpu_com_resp>
    1074:	a8 01       	movw	r20, r16
    1076:	6f 81       	ldd	r22, Y+7	; 0x07
    1078:	8b e6       	ldi	r24, 0x6B	; 107
    107a:	19 df       	rcall	.-462    	; 0xeae <MPU6050_SingleWrite>
    107c:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <g_mpu_com_resp>
    1080:	89 0f       	add	r24, r25
    1082:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <g_mpu_com_resp>
    1086:	87 30       	cpi	r24, 0x07	; 7
    1088:	19 f4       	brne	.+6      	; 0x1090 <MPU6050_AutoInit+0x124>
    108a:	76 de       	rcall	.-788    	; 0xd78 <MPU6050_SetParameters>
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	01 c0       	rjmp	.+2      	; 0x1092 <MPU6050_AutoInit+0x126>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	1f 91       	pop	r17
    1098:	0f 91       	pop	r16
    109a:	ff 90       	pop	r15
    109c:	ef 90       	pop	r14
    109e:	df 90       	pop	r13
    10a0:	cf 90       	pop	r12
    10a2:	bf 90       	pop	r11
    10a4:	af 90       	pop	r10
    10a6:	08 95       	ret

000010a8 <MPU6050_GetRawAccelX>:
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <MPU6050_GetRawAccelX+0xa>
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	8c 01       	movw	r16, r24
    10b8:	9b 01       	movw	r18, r22
    10ba:	42 e0       	ldi	r20, 0x02	; 2
    10bc:	be 01       	movw	r22, r28
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	8b e3       	ldi	r24, 0x3B	; 59
    10c4:	28 df       	rcall	.-432    	; 0xf16 <MPU6050_BurstRead>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	51 f4       	brne	.+20     	; 0x10de <MPU6050_GetRawAccelX+0x36>
    10ca:	29 81       	ldd	r18, Y+1	; 0x01
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	32 2f       	mov	r19, r18
    10d0:	22 27       	eor	r18, r18
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	29 2b       	or	r18, r25
    10d6:	f8 01       	movw	r30, r16
    10d8:	31 83       	std	Z+1, r19	; 0x01
    10da:	20 83       	st	Z, r18
    10dc:	01 c0       	rjmp	.+2      	; 0x10e0 <MPU6050_GetRawAccelX+0x38>
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	08 95       	ret

000010ee <MPU6050_GetRawAccelY>:
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	00 d0       	rcall	.+0      	; 0x10f8 <MPU6050_GetRawAccelY+0xa>
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	8c 01       	movw	r16, r24
    10fe:	9b 01       	movw	r18, r22
    1100:	42 e0       	ldi	r20, 0x02	; 2
    1102:	be 01       	movw	r22, r28
    1104:	6f 5f       	subi	r22, 0xFF	; 255
    1106:	7f 4f       	sbci	r23, 0xFF	; 255
    1108:	8d e3       	ldi	r24, 0x3D	; 61
    110a:	05 df       	rcall	.-502    	; 0xf16 <MPU6050_BurstRead>
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	51 f4       	brne	.+20     	; 0x1124 <MPU6050_GetRawAccelY+0x36>
    1110:	29 81       	ldd	r18, Y+1	; 0x01
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	32 2f       	mov	r19, r18
    1116:	22 27       	eor	r18, r18
    1118:	9a 81       	ldd	r25, Y+2	; 0x02
    111a:	29 2b       	or	r18, r25
    111c:	f8 01       	movw	r30, r16
    111e:	31 83       	std	Z+1, r19	; 0x01
    1120:	20 83       	st	Z, r18
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <MPU6050_GetRawAccelY+0x38>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	08 95       	ret

00001134 <MPU6050_GetRawAccelZ>:
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	00 d0       	rcall	.+0      	; 0x113e <MPU6050_GetRawAccelZ+0xa>
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	8c 01       	movw	r16, r24
    1144:	9b 01       	movw	r18, r22
    1146:	42 e0       	ldi	r20, 0x02	; 2
    1148:	be 01       	movw	r22, r28
    114a:	6f 5f       	subi	r22, 0xFF	; 255
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	8f e3       	ldi	r24, 0x3F	; 63
    1150:	e2 de       	rcall	.-572    	; 0xf16 <MPU6050_BurstRead>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	51 f4       	brne	.+20     	; 0x116a <MPU6050_GetRawAccelZ+0x36>
    1156:	29 81       	ldd	r18, Y+1	; 0x01
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	32 2f       	mov	r19, r18
    115c:	22 27       	eor	r18, r18
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	29 2b       	or	r18, r25
    1162:	f8 01       	movw	r30, r16
    1164:	31 83       	std	Z+1, r19	; 0x01
    1166:	20 83       	st	Z, r18
    1168:	01 c0       	rjmp	.+2      	; 0x116c <MPU6050_GetRawAccelZ+0x38>
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	1f 91       	pop	r17
    1176:	0f 91       	pop	r16
    1178:	08 95       	ret

0000117a <MPU6050_GetRawGyroX>:
		   
*/

/* ------------- Gyro ------------- */
uint8_t MPU6050_GetRawGyroX(int16_t *raw_gyrox_value, uint16_t _time_out) /* Function for take Gyroscope (x) value */
{
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	00 d0       	rcall	.+0      	; 0x1184 <MPU6050_GetRawGyroX+0xa>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	8c 01       	movw	r16, r24
    118a:	9b 01       	movw	r18, r22
	/* ----------- Create variable ----------- */
	uint8_t raw_gyro_x[_MPU_AXIS_REG_LENGTH]; /* Array for take Gyroscope register value */
	
	/* ----------- Read value from MPU60X0 ----------- */
	if ( MPU6050_BurstRead(_REG_GYRO_XOUT_H, raw_gyro_x, _MPU_AXIS_REG_LENGTH, _time_out) == _MPU_OK ) /* The instructions are complete */
    118c:	42 e0       	ldi	r20, 0x02	; 2
    118e:	be 01       	movw	r22, r28
    1190:	6f 5f       	subi	r22, 0xFF	; 255
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	83 e4       	ldi	r24, 0x43	; 67
    1196:	bf de       	rcall	.-642    	; 0xf16 <MPU6050_BurstRead>
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	51 f4       	brne	.+20     	; 0x11b0 <MPU6050_GetRawGyroX+0x36>
	{
		*raw_gyrox_value = ( ( (int16_t)raw_gyro_x[0] << _MPU_HIGH_BYTE_SHIFT ) | (int16_t)raw_gyro_x[1] ); /* Return Gyroscope value */
    119c:	29 81       	ldd	r18, Y+1	; 0x01
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	32 2f       	mov	r19, r18
    11a2:	22 27       	eor	r18, r18
    11a4:	9a 81       	ldd	r25, Y+2	; 0x02
    11a6:	29 2b       	or	r18, r25
    11a8:	f8 01       	movw	r30, r16
    11aa:	31 83       	std	Z+1, r19	; 0x01
    11ac:	20 83       	st	Z, r18
		return _MPU_OK;
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <MPU6050_GetRawGyroX+0x38>
	}
	
	return _MPU_ERROR;
    11b0:	80 e0       	ldi	r24, 0x00	; 0
	
}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	08 95       	ret

000011c0 <MPU6050_GetRawGyroY>:
		     -> status is _MPU_OK/_MPU_ERROR
		   
*/

uint8_t MPU6050_GetRawGyroY(int16_t *raw_gyroy_value, uint16_t _time_out) /* Function for take Gyroscope (y) value */
{
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <MPU6050_GetRawGyroY+0xa>
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	8c 01       	movw	r16, r24
    11d0:	9b 01       	movw	r18, r22
	/* ----------- Create variable ----------- */
	uint8_t raw_gyro_y[_MPU_AXIS_REG_LENGTH]; /* Array for take Gyroscope register value */
	
	/* ----------- Read value from MPU60X0 ----------- */
	if ( MPU6050_BurstRead(_REG_GYRO_YOUT_H, raw_gyro_y, _MPU_AXIS_REG_LENGTH, _time_out) == _MPU_OK ) /* The instructions are complete */
    11d2:	42 e0       	ldi	r20, 0x02	; 2
    11d4:	be 01       	movw	r22, r28
    11d6:	6f 5f       	subi	r22, 0xFF	; 255
    11d8:	7f 4f       	sbci	r23, 0xFF	; 255
    11da:	85 e4       	ldi	r24, 0x45	; 69
    11dc:	9c de       	rcall	.-712    	; 0xf16 <MPU6050_BurstRead>
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	51 f4       	brne	.+20     	; 0x11f6 <MPU6050_GetRawGyroY+0x36>
	{
		*raw_gyroy_value = ( ( (int16_t)raw_gyro_y[0] << _MPU_HIGH_BYTE_SHIFT ) | (int16_t)raw_gyro_y[1] ); /* Return Gyroscope value */
    11e2:	29 81       	ldd	r18, Y+1	; 0x01
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	32 2f       	mov	r19, r18
    11e8:	22 27       	eor	r18, r18
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	29 2b       	or	r18, r25
    11ee:	f8 01       	movw	r30, r16
    11f0:	31 83       	std	Z+1, r19	; 0x01
    11f2:	20 83       	st	Z, r18
		return _MPU_OK;
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <MPU6050_GetRawGyroY+0x38>
	}
	
	return _MPU_ERROR;
    11f6:	80 e0       	ldi	r24, 0x00	; 0
	
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	08 95       	ret

00001206 <MPU6050_GetRawGyroZ>:
		     -> status is _MPU_OK/_MPU_ERROR
		   
*/

uint8_t MPU6050_GetRawGyroZ(int16_t *raw_gyroz_value, uint16_t _time_out) /* Function for take Gyroscope (z) value */
{
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	00 d0       	rcall	.+0      	; 0x1210 <MPU6050_GetRawGyroZ+0xa>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	8c 01       	movw	r16, r24
    1216:	9b 01       	movw	r18, r22
	/* ----------- Create variable ----------- */
	uint8_t raw_gyro_z[_MPU_AXIS_REG_LENGTH]; /* Array for take Gyroscope register value */
	
	/* ----------- Read value from MPU60X0 ----------- */
	if ( MPU6050_BurstRead(_REG_GYRO_ZOUT_H, raw_gyro_z, _MPU_AXIS_REG_LENGTH, _time_out) == _MPU_OK ) /* The instructions are complete */
    1218:	42 e0       	ldi	r20, 0x02	; 2
    121a:	be 01       	movw	r22, r28
    121c:	6f 5f       	subi	r22, 0xFF	; 255
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	87 e4       	ldi	r24, 0x47	; 71
    1222:	79 de       	rcall	.-782    	; 0xf16 <MPU6050_BurstRead>
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	51 f4       	brne	.+20     	; 0x123c <MPU6050_GetRawGyroZ+0x36>
	{
		*raw_gyroz_value = ( ( (int16_t)raw_gyro_z[0] << _MPU_HIGH_BYTE_SHIFT ) | (int16_t)raw_gyro_z[1] );  /* Return Gyroscope value */
    1228:	29 81       	ldd	r18, Y+1	; 0x01
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	32 2f       	mov	r19, r18
    122e:	22 27       	eor	r18, r18
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	29 2b       	or	r18, r25
    1234:	f8 01       	movw	r30, r16
    1236:	31 83       	std	Z+1, r19	; 0x01
    1238:	20 83       	st	Z, r18
		return _MPU_OK;
    123a:	01 c0       	rjmp	.+2      	; 0x123e <MPU6050_GetRawGyroZ+0x38>
	}
	
	return _MPU_ERROR;
    123c:	80 e0       	ldi	r24, 0x00	; 0
	
}
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	08 95       	ret

0000124c <__subsf3>:
    124c:	50 58       	subi	r21, 0x80	; 128

0000124e <__addsf3>:
    124e:	bb 27       	eor	r27, r27
    1250:	aa 27       	eor	r26, r26
    1252:	0e d0       	rcall	.+28     	; 0x1270 <__addsf3x>
    1254:	cb c1       	rjmp	.+918    	; 0x15ec <__fp_round>
    1256:	bc d1       	rcall	.+888    	; 0x15d0 <__fp_pscA>
    1258:	30 f0       	brcs	.+12     	; 0x1266 <__addsf3+0x18>
    125a:	c1 d1       	rcall	.+898    	; 0x15de <__fp_pscB>
    125c:	20 f0       	brcs	.+8      	; 0x1266 <__addsf3+0x18>
    125e:	31 f4       	brne	.+12     	; 0x126c <__addsf3+0x1e>
    1260:	9f 3f       	cpi	r25, 0xFF	; 255
    1262:	11 f4       	brne	.+4      	; 0x1268 <__addsf3+0x1a>
    1264:	1e f4       	brtc	.+6      	; 0x126c <__addsf3+0x1e>
    1266:	8c c1       	rjmp	.+792    	; 0x1580 <__fp_nan>
    1268:	0e f4       	brtc	.+2      	; 0x126c <__addsf3+0x1e>
    126a:	e0 95       	com	r30
    126c:	e7 fb       	bst	r30, 7
    126e:	82 c1       	rjmp	.+772    	; 0x1574 <__fp_inf>

00001270 <__addsf3x>:
    1270:	e9 2f       	mov	r30, r25
    1272:	cd d1       	rcall	.+922    	; 0x160e <__fp_split3>
    1274:	80 f3       	brcs	.-32     	; 0x1256 <__addsf3+0x8>
    1276:	ba 17       	cp	r27, r26
    1278:	62 07       	cpc	r22, r18
    127a:	73 07       	cpc	r23, r19
    127c:	84 07       	cpc	r24, r20
    127e:	95 07       	cpc	r25, r21
    1280:	18 f0       	brcs	.+6      	; 0x1288 <__addsf3x+0x18>
    1282:	71 f4       	brne	.+28     	; 0x12a0 <__addsf3x+0x30>
    1284:	9e f5       	brtc	.+102    	; 0x12ec <__addsf3x+0x7c>
    1286:	e5 c1       	rjmp	.+970    	; 0x1652 <__fp_zero>
    1288:	0e f4       	brtc	.+2      	; 0x128c <__addsf3x+0x1c>
    128a:	e0 95       	com	r30
    128c:	0b 2e       	mov	r0, r27
    128e:	ba 2f       	mov	r27, r26
    1290:	a0 2d       	mov	r26, r0
    1292:	0b 01       	movw	r0, r22
    1294:	b9 01       	movw	r22, r18
    1296:	90 01       	movw	r18, r0
    1298:	0c 01       	movw	r0, r24
    129a:	ca 01       	movw	r24, r20
    129c:	a0 01       	movw	r20, r0
    129e:	11 24       	eor	r1, r1
    12a0:	ff 27       	eor	r31, r31
    12a2:	59 1b       	sub	r21, r25
    12a4:	99 f0       	breq	.+38     	; 0x12cc <__addsf3x+0x5c>
    12a6:	59 3f       	cpi	r21, 0xF9	; 249
    12a8:	50 f4       	brcc	.+20     	; 0x12be <__addsf3x+0x4e>
    12aa:	50 3e       	cpi	r21, 0xE0	; 224
    12ac:	68 f1       	brcs	.+90     	; 0x1308 <__addsf3x+0x98>
    12ae:	1a 16       	cp	r1, r26
    12b0:	f0 40       	sbci	r31, 0x00	; 0
    12b2:	a2 2f       	mov	r26, r18
    12b4:	23 2f       	mov	r18, r19
    12b6:	34 2f       	mov	r19, r20
    12b8:	44 27       	eor	r20, r20
    12ba:	58 5f       	subi	r21, 0xF8	; 248
    12bc:	f3 cf       	rjmp	.-26     	; 0x12a4 <__addsf3x+0x34>
    12be:	46 95       	lsr	r20
    12c0:	37 95       	ror	r19
    12c2:	27 95       	ror	r18
    12c4:	a7 95       	ror	r26
    12c6:	f0 40       	sbci	r31, 0x00	; 0
    12c8:	53 95       	inc	r21
    12ca:	c9 f7       	brne	.-14     	; 0x12be <__addsf3x+0x4e>
    12cc:	7e f4       	brtc	.+30     	; 0x12ec <__addsf3x+0x7c>
    12ce:	1f 16       	cp	r1, r31
    12d0:	ba 0b       	sbc	r27, r26
    12d2:	62 0b       	sbc	r22, r18
    12d4:	73 0b       	sbc	r23, r19
    12d6:	84 0b       	sbc	r24, r20
    12d8:	ba f0       	brmi	.+46     	; 0x1308 <__addsf3x+0x98>
    12da:	91 50       	subi	r25, 0x01	; 1
    12dc:	a1 f0       	breq	.+40     	; 0x1306 <__addsf3x+0x96>
    12de:	ff 0f       	add	r31, r31
    12e0:	bb 1f       	adc	r27, r27
    12e2:	66 1f       	adc	r22, r22
    12e4:	77 1f       	adc	r23, r23
    12e6:	88 1f       	adc	r24, r24
    12e8:	c2 f7       	brpl	.-16     	; 0x12da <__addsf3x+0x6a>
    12ea:	0e c0       	rjmp	.+28     	; 0x1308 <__addsf3x+0x98>
    12ec:	ba 0f       	add	r27, r26
    12ee:	62 1f       	adc	r22, r18
    12f0:	73 1f       	adc	r23, r19
    12f2:	84 1f       	adc	r24, r20
    12f4:	48 f4       	brcc	.+18     	; 0x1308 <__addsf3x+0x98>
    12f6:	87 95       	ror	r24
    12f8:	77 95       	ror	r23
    12fa:	67 95       	ror	r22
    12fc:	b7 95       	ror	r27
    12fe:	f7 95       	ror	r31
    1300:	9e 3f       	cpi	r25, 0xFE	; 254
    1302:	08 f0       	brcs	.+2      	; 0x1306 <__addsf3x+0x96>
    1304:	b3 cf       	rjmp	.-154    	; 0x126c <__addsf3+0x1e>
    1306:	93 95       	inc	r25
    1308:	88 0f       	add	r24, r24
    130a:	08 f0       	brcs	.+2      	; 0x130e <__addsf3x+0x9e>
    130c:	99 27       	eor	r25, r25
    130e:	ee 0f       	add	r30, r30
    1310:	97 95       	ror	r25
    1312:	87 95       	ror	r24
    1314:	08 95       	ret
    1316:	5c d1       	rcall	.+696    	; 0x15d0 <__fp_pscA>
    1318:	58 f0       	brcs	.+22     	; 0x1330 <__addsf3x+0xc0>
    131a:	80 e8       	ldi	r24, 0x80	; 128
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	09 f4       	brne	.+2      	; 0x1322 <__addsf3x+0xb2>
    1320:	9e ef       	ldi	r25, 0xFE	; 254
    1322:	5d d1       	rcall	.+698    	; 0x15de <__fp_pscB>
    1324:	28 f0       	brcs	.+10     	; 0x1330 <__addsf3x+0xc0>
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	51 e0       	ldi	r21, 0x01	; 1
    132a:	59 f4       	brne	.+22     	; 0x1342 <atan2+0xe>
    132c:	5e ef       	ldi	r21, 0xFE	; 254
    132e:	09 c0       	rjmp	.+18     	; 0x1342 <atan2+0xe>
    1330:	27 c1       	rjmp	.+590    	; 0x1580 <__fp_nan>
    1332:	8f c1       	rjmp	.+798    	; 0x1652 <__fp_zero>

00001334 <atan2>:
    1334:	e9 2f       	mov	r30, r25
    1336:	e0 78       	andi	r30, 0x80	; 128
    1338:	6a d1       	rcall	.+724    	; 0x160e <__fp_split3>
    133a:	68 f3       	brcs	.-38     	; 0x1316 <__addsf3x+0xa6>
    133c:	09 2e       	mov	r0, r25
    133e:	05 2a       	or	r0, r21
    1340:	c1 f3       	breq	.-16     	; 0x1332 <__addsf3x+0xc2>
    1342:	26 17       	cp	r18, r22
    1344:	37 07       	cpc	r19, r23
    1346:	48 07       	cpc	r20, r24
    1348:	59 07       	cpc	r21, r25
    134a:	38 f0       	brcs	.+14     	; 0x135a <atan2+0x26>
    134c:	0e 2e       	mov	r0, r30
    134e:	07 f8       	bld	r0, 7
    1350:	e0 25       	eor	r30, r0
    1352:	69 f0       	breq	.+26     	; 0x136e <atan2+0x3a>
    1354:	e0 25       	eor	r30, r0
    1356:	e0 64       	ori	r30, 0x40	; 64
    1358:	0a c0       	rjmp	.+20     	; 0x136e <atan2+0x3a>
    135a:	ef 63       	ori	r30, 0x3F	; 63
    135c:	07 f8       	bld	r0, 7
    135e:	00 94       	com	r0
    1360:	07 fa       	bst	r0, 7
    1362:	db 01       	movw	r26, r22
    1364:	b9 01       	movw	r22, r18
    1366:	9d 01       	movw	r18, r26
    1368:	dc 01       	movw	r26, r24
    136a:	ca 01       	movw	r24, r20
    136c:	ad 01       	movw	r20, r26
    136e:	ef 93       	push	r30
    1370:	47 d0       	rcall	.+142    	; 0x1400 <__divsf3_pse>
    1372:	3c d1       	rcall	.+632    	; 0x15ec <__fp_round>
    1374:	0a d0       	rcall	.+20     	; 0x138a <atan>
    1376:	5f 91       	pop	r21
    1378:	55 23       	and	r21, r21
    137a:	31 f0       	breq	.+12     	; 0x1388 <atan2+0x54>
    137c:	2b ed       	ldi	r18, 0xDB	; 219
    137e:	3f e0       	ldi	r19, 0x0F	; 15
    1380:	49 e4       	ldi	r20, 0x49	; 73
    1382:	50 fd       	sbrc	r21, 0
    1384:	49 ec       	ldi	r20, 0xC9	; 201
    1386:	63 cf       	rjmp	.-314    	; 0x124e <__addsf3>
    1388:	08 95       	ret

0000138a <atan>:
    138a:	df 93       	push	r29
    138c:	dd 27       	eor	r29, r29
    138e:	b9 2f       	mov	r27, r25
    1390:	bf 77       	andi	r27, 0x7F	; 127
    1392:	40 e8       	ldi	r20, 0x80	; 128
    1394:	5f e3       	ldi	r21, 0x3F	; 63
    1396:	16 16       	cp	r1, r22
    1398:	17 06       	cpc	r1, r23
    139a:	48 07       	cpc	r20, r24
    139c:	5b 07       	cpc	r21, r27
    139e:	10 f4       	brcc	.+4      	; 0x13a4 <atan+0x1a>
    13a0:	d9 2f       	mov	r29, r25
    13a2:	5e d1       	rcall	.+700    	; 0x1660 <inverse>
    13a4:	9f 93       	push	r25
    13a6:	8f 93       	push	r24
    13a8:	7f 93       	push	r23
    13aa:	6f 93       	push	r22
    13ac:	c3 d1       	rcall	.+902    	; 0x1734 <square>
    13ae:	e6 e2       	ldi	r30, 0x26	; 38
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	e9 d0       	rcall	.+466    	; 0x1586 <__fp_powser>
    13b4:	1b d1       	rcall	.+566    	; 0x15ec <__fp_round>
    13b6:	2f 91       	pop	r18
    13b8:	3f 91       	pop	r19
    13ba:	4f 91       	pop	r20
    13bc:	5f 91       	pop	r21
    13be:	63 d1       	rcall	.+710    	; 0x1686 <__mulsf3x>
    13c0:	dd 23       	and	r29, r29
    13c2:	49 f0       	breq	.+18     	; 0x13d6 <atan+0x4c>
    13c4:	90 58       	subi	r25, 0x80	; 128
    13c6:	a2 ea       	ldi	r26, 0xA2	; 162
    13c8:	2a ed       	ldi	r18, 0xDA	; 218
    13ca:	3f e0       	ldi	r19, 0x0F	; 15
    13cc:	49 ec       	ldi	r20, 0xC9	; 201
    13ce:	5f e3       	ldi	r21, 0x3F	; 63
    13d0:	d0 78       	andi	r29, 0x80	; 128
    13d2:	5d 27       	eor	r21, r29
    13d4:	4d df       	rcall	.-358    	; 0x1270 <__addsf3x>
    13d6:	df 91       	pop	r29
    13d8:	09 c1       	rjmp	.+530    	; 0x15ec <__fp_round>

000013da <__cmpsf2>:
    13da:	a8 d0       	rcall	.+336    	; 0x152c <__fp_cmp>
    13dc:	08 f4       	brcc	.+2      	; 0x13e0 <__cmpsf2+0x6>
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	08 95       	ret

000013e2 <__divsf3>:
    13e2:	0c d0       	rcall	.+24     	; 0x13fc <__divsf3x>
    13e4:	03 c1       	rjmp	.+518    	; 0x15ec <__fp_round>
    13e6:	fb d0       	rcall	.+502    	; 0x15de <__fp_pscB>
    13e8:	40 f0       	brcs	.+16     	; 0x13fa <__divsf3+0x18>
    13ea:	f2 d0       	rcall	.+484    	; 0x15d0 <__fp_pscA>
    13ec:	30 f0       	brcs	.+12     	; 0x13fa <__divsf3+0x18>
    13ee:	21 f4       	brne	.+8      	; 0x13f8 <__divsf3+0x16>
    13f0:	5f 3f       	cpi	r21, 0xFF	; 255
    13f2:	19 f0       	breq	.+6      	; 0x13fa <__divsf3+0x18>
    13f4:	bf c0       	rjmp	.+382    	; 0x1574 <__fp_inf>
    13f6:	51 11       	cpse	r21, r1
    13f8:	2d c1       	rjmp	.+602    	; 0x1654 <__fp_szero>
    13fa:	c2 c0       	rjmp	.+388    	; 0x1580 <__fp_nan>

000013fc <__divsf3x>:
    13fc:	08 d1       	rcall	.+528    	; 0x160e <__fp_split3>
    13fe:	98 f3       	brcs	.-26     	; 0x13e6 <__divsf3+0x4>

00001400 <__divsf3_pse>:
    1400:	99 23       	and	r25, r25
    1402:	c9 f3       	breq	.-14     	; 0x13f6 <__divsf3+0x14>
    1404:	55 23       	and	r21, r21
    1406:	b1 f3       	breq	.-20     	; 0x13f4 <__divsf3+0x12>
    1408:	95 1b       	sub	r25, r21
    140a:	55 0b       	sbc	r21, r21
    140c:	bb 27       	eor	r27, r27
    140e:	aa 27       	eor	r26, r26
    1410:	62 17       	cp	r22, r18
    1412:	73 07       	cpc	r23, r19
    1414:	84 07       	cpc	r24, r20
    1416:	38 f0       	brcs	.+14     	; 0x1426 <__divsf3_pse+0x26>
    1418:	9f 5f       	subi	r25, 0xFF	; 255
    141a:	5f 4f       	sbci	r21, 0xFF	; 255
    141c:	22 0f       	add	r18, r18
    141e:	33 1f       	adc	r19, r19
    1420:	44 1f       	adc	r20, r20
    1422:	aa 1f       	adc	r26, r26
    1424:	a9 f3       	breq	.-22     	; 0x1410 <__divsf3_pse+0x10>
    1426:	33 d0       	rcall	.+102    	; 0x148e <__divsf3_pse+0x8e>
    1428:	0e 2e       	mov	r0, r30
    142a:	3a f0       	brmi	.+14     	; 0x143a <__divsf3_pse+0x3a>
    142c:	e0 e8       	ldi	r30, 0x80	; 128
    142e:	30 d0       	rcall	.+96     	; 0x1490 <__divsf3_pse+0x90>
    1430:	91 50       	subi	r25, 0x01	; 1
    1432:	50 40       	sbci	r21, 0x00	; 0
    1434:	e6 95       	lsr	r30
    1436:	00 1c       	adc	r0, r0
    1438:	ca f7       	brpl	.-14     	; 0x142c <__divsf3_pse+0x2c>
    143a:	29 d0       	rcall	.+82     	; 0x148e <__divsf3_pse+0x8e>
    143c:	fe 2f       	mov	r31, r30
    143e:	27 d0       	rcall	.+78     	; 0x148e <__divsf3_pse+0x8e>
    1440:	66 0f       	add	r22, r22
    1442:	77 1f       	adc	r23, r23
    1444:	88 1f       	adc	r24, r24
    1446:	bb 1f       	adc	r27, r27
    1448:	26 17       	cp	r18, r22
    144a:	37 07       	cpc	r19, r23
    144c:	48 07       	cpc	r20, r24
    144e:	ab 07       	cpc	r26, r27
    1450:	b0 e8       	ldi	r27, 0x80	; 128
    1452:	09 f0       	breq	.+2      	; 0x1456 <__divsf3_pse+0x56>
    1454:	bb 0b       	sbc	r27, r27
    1456:	80 2d       	mov	r24, r0
    1458:	bf 01       	movw	r22, r30
    145a:	ff 27       	eor	r31, r31
    145c:	93 58       	subi	r25, 0x83	; 131
    145e:	5f 4f       	sbci	r21, 0xFF	; 255
    1460:	2a f0       	brmi	.+10     	; 0x146c <__divsf3_pse+0x6c>
    1462:	9e 3f       	cpi	r25, 0xFE	; 254
    1464:	51 05       	cpc	r21, r1
    1466:	68 f0       	brcs	.+26     	; 0x1482 <__divsf3_pse+0x82>
    1468:	85 c0       	rjmp	.+266    	; 0x1574 <__fp_inf>
    146a:	f4 c0       	rjmp	.+488    	; 0x1654 <__fp_szero>
    146c:	5f 3f       	cpi	r21, 0xFF	; 255
    146e:	ec f3       	brlt	.-6      	; 0x146a <__divsf3_pse+0x6a>
    1470:	98 3e       	cpi	r25, 0xE8	; 232
    1472:	dc f3       	brlt	.-10     	; 0x146a <__divsf3_pse+0x6a>
    1474:	86 95       	lsr	r24
    1476:	77 95       	ror	r23
    1478:	67 95       	ror	r22
    147a:	b7 95       	ror	r27
    147c:	f7 95       	ror	r31
    147e:	9f 5f       	subi	r25, 0xFF	; 255
    1480:	c9 f7       	brne	.-14     	; 0x1474 <__divsf3_pse+0x74>
    1482:	88 0f       	add	r24, r24
    1484:	91 1d       	adc	r25, r1
    1486:	96 95       	lsr	r25
    1488:	87 95       	ror	r24
    148a:	97 f9       	bld	r25, 7
    148c:	08 95       	ret
    148e:	e1 e0       	ldi	r30, 0x01	; 1
    1490:	66 0f       	add	r22, r22
    1492:	77 1f       	adc	r23, r23
    1494:	88 1f       	adc	r24, r24
    1496:	bb 1f       	adc	r27, r27
    1498:	62 17       	cp	r22, r18
    149a:	73 07       	cpc	r23, r19
    149c:	84 07       	cpc	r24, r20
    149e:	ba 07       	cpc	r27, r26
    14a0:	20 f0       	brcs	.+8      	; 0x14aa <__divsf3_pse+0xaa>
    14a2:	62 1b       	sub	r22, r18
    14a4:	73 0b       	sbc	r23, r19
    14a6:	84 0b       	sbc	r24, r20
    14a8:	ba 0b       	sbc	r27, r26
    14aa:	ee 1f       	adc	r30, r30
    14ac:	88 f7       	brcc	.-30     	; 0x1490 <__divsf3_pse+0x90>
    14ae:	e0 95       	com	r30
    14b0:	08 95       	ret

000014b2 <__floatunsisf>:
    14b2:	e8 94       	clt
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <__floatsisf+0x12>

000014b6 <__floatsisf>:
    14b6:	97 fb       	bst	r25, 7
    14b8:	3e f4       	brtc	.+14     	; 0x14c8 <__floatsisf+0x12>
    14ba:	90 95       	com	r25
    14bc:	80 95       	com	r24
    14be:	70 95       	com	r23
    14c0:	61 95       	neg	r22
    14c2:	7f 4f       	sbci	r23, 0xFF	; 255
    14c4:	8f 4f       	sbci	r24, 0xFF	; 255
    14c6:	9f 4f       	sbci	r25, 0xFF	; 255
    14c8:	99 23       	and	r25, r25
    14ca:	a9 f0       	breq	.+42     	; 0x14f6 <__floatsisf+0x40>
    14cc:	f9 2f       	mov	r31, r25
    14ce:	96 e9       	ldi	r25, 0x96	; 150
    14d0:	bb 27       	eor	r27, r27
    14d2:	93 95       	inc	r25
    14d4:	f6 95       	lsr	r31
    14d6:	87 95       	ror	r24
    14d8:	77 95       	ror	r23
    14da:	67 95       	ror	r22
    14dc:	b7 95       	ror	r27
    14de:	f1 11       	cpse	r31, r1
    14e0:	f8 cf       	rjmp	.-16     	; 0x14d2 <__floatsisf+0x1c>
    14e2:	fa f4       	brpl	.+62     	; 0x1522 <__floatsisf+0x6c>
    14e4:	bb 0f       	add	r27, r27
    14e6:	11 f4       	brne	.+4      	; 0x14ec <__floatsisf+0x36>
    14e8:	60 ff       	sbrs	r22, 0
    14ea:	1b c0       	rjmp	.+54     	; 0x1522 <__floatsisf+0x6c>
    14ec:	6f 5f       	subi	r22, 0xFF	; 255
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	8f 4f       	sbci	r24, 0xFF	; 255
    14f2:	9f 4f       	sbci	r25, 0xFF	; 255
    14f4:	16 c0       	rjmp	.+44     	; 0x1522 <__floatsisf+0x6c>
    14f6:	88 23       	and	r24, r24
    14f8:	11 f0       	breq	.+4      	; 0x14fe <__floatsisf+0x48>
    14fa:	96 e9       	ldi	r25, 0x96	; 150
    14fc:	11 c0       	rjmp	.+34     	; 0x1520 <__floatsisf+0x6a>
    14fe:	77 23       	and	r23, r23
    1500:	21 f0       	breq	.+8      	; 0x150a <__floatsisf+0x54>
    1502:	9e e8       	ldi	r25, 0x8E	; 142
    1504:	87 2f       	mov	r24, r23
    1506:	76 2f       	mov	r23, r22
    1508:	05 c0       	rjmp	.+10     	; 0x1514 <__floatsisf+0x5e>
    150a:	66 23       	and	r22, r22
    150c:	71 f0       	breq	.+28     	; 0x152a <__floatsisf+0x74>
    150e:	96 e8       	ldi	r25, 0x86	; 134
    1510:	86 2f       	mov	r24, r22
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	2a f0       	brmi	.+10     	; 0x1522 <__floatsisf+0x6c>
    1518:	9a 95       	dec	r25
    151a:	66 0f       	add	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	88 1f       	adc	r24, r24
    1520:	da f7       	brpl	.-10     	; 0x1518 <__floatsisf+0x62>
    1522:	88 0f       	add	r24, r24
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	97 f9       	bld	r25, 7
    152a:	08 95       	ret

0000152c <__fp_cmp>:
    152c:	99 0f       	add	r25, r25
    152e:	00 08       	sbc	r0, r0
    1530:	55 0f       	add	r21, r21
    1532:	aa 0b       	sbc	r26, r26
    1534:	e0 e8       	ldi	r30, 0x80	; 128
    1536:	fe ef       	ldi	r31, 0xFE	; 254
    1538:	16 16       	cp	r1, r22
    153a:	17 06       	cpc	r1, r23
    153c:	e8 07       	cpc	r30, r24
    153e:	f9 07       	cpc	r31, r25
    1540:	c0 f0       	brcs	.+48     	; 0x1572 <__fp_cmp+0x46>
    1542:	12 16       	cp	r1, r18
    1544:	13 06       	cpc	r1, r19
    1546:	e4 07       	cpc	r30, r20
    1548:	f5 07       	cpc	r31, r21
    154a:	98 f0       	brcs	.+38     	; 0x1572 <__fp_cmp+0x46>
    154c:	62 1b       	sub	r22, r18
    154e:	73 0b       	sbc	r23, r19
    1550:	84 0b       	sbc	r24, r20
    1552:	95 0b       	sbc	r25, r21
    1554:	39 f4       	brne	.+14     	; 0x1564 <__fp_cmp+0x38>
    1556:	0a 26       	eor	r0, r26
    1558:	61 f0       	breq	.+24     	; 0x1572 <__fp_cmp+0x46>
    155a:	23 2b       	or	r18, r19
    155c:	24 2b       	or	r18, r20
    155e:	25 2b       	or	r18, r21
    1560:	21 f4       	brne	.+8      	; 0x156a <__fp_cmp+0x3e>
    1562:	08 95       	ret
    1564:	0a 26       	eor	r0, r26
    1566:	09 f4       	brne	.+2      	; 0x156a <__fp_cmp+0x3e>
    1568:	a1 40       	sbci	r26, 0x01	; 1
    156a:	a6 95       	lsr	r26
    156c:	8f ef       	ldi	r24, 0xFF	; 255
    156e:	81 1d       	adc	r24, r1
    1570:	81 1d       	adc	r24, r1
    1572:	08 95       	ret

00001574 <__fp_inf>:
    1574:	97 f9       	bld	r25, 7
    1576:	9f 67       	ori	r25, 0x7F	; 127
    1578:	80 e8       	ldi	r24, 0x80	; 128
    157a:	70 e0       	ldi	r23, 0x00	; 0
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	08 95       	ret

00001580 <__fp_nan>:
    1580:	9f ef       	ldi	r25, 0xFF	; 255
    1582:	80 ec       	ldi	r24, 0xC0	; 192
    1584:	08 95       	ret

00001586 <__fp_powser>:
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	1f 93       	push	r17
    158c:	0f 93       	push	r16
    158e:	ff 92       	push	r15
    1590:	ef 92       	push	r14
    1592:	df 92       	push	r13
    1594:	7b 01       	movw	r14, r22
    1596:	8c 01       	movw	r16, r24
    1598:	68 94       	set
    159a:	05 c0       	rjmp	.+10     	; 0x15a6 <__fp_powser+0x20>
    159c:	da 2e       	mov	r13, r26
    159e:	ef 01       	movw	r28, r30
    15a0:	72 d0       	rcall	.+228    	; 0x1686 <__mulsf3x>
    15a2:	fe 01       	movw	r30, r28
    15a4:	e8 94       	clt
    15a6:	a5 91       	lpm	r26, Z+
    15a8:	25 91       	lpm	r18, Z+
    15aa:	35 91       	lpm	r19, Z+
    15ac:	45 91       	lpm	r20, Z+
    15ae:	55 91       	lpm	r21, Z+
    15b0:	ae f3       	brts	.-22     	; 0x159c <__fp_powser+0x16>
    15b2:	ef 01       	movw	r28, r30
    15b4:	5d de       	rcall	.-838    	; 0x1270 <__addsf3x>
    15b6:	fe 01       	movw	r30, r28
    15b8:	97 01       	movw	r18, r14
    15ba:	a8 01       	movw	r20, r16
    15bc:	da 94       	dec	r13
    15be:	79 f7       	brne	.-34     	; 0x159e <__fp_powser+0x18>
    15c0:	df 90       	pop	r13
    15c2:	ef 90       	pop	r14
    15c4:	ff 90       	pop	r15
    15c6:	0f 91       	pop	r16
    15c8:	1f 91       	pop	r17
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <__fp_pscA>:
    15d0:	00 24       	eor	r0, r0
    15d2:	0a 94       	dec	r0
    15d4:	16 16       	cp	r1, r22
    15d6:	17 06       	cpc	r1, r23
    15d8:	18 06       	cpc	r1, r24
    15da:	09 06       	cpc	r0, r25
    15dc:	08 95       	ret

000015de <__fp_pscB>:
    15de:	00 24       	eor	r0, r0
    15e0:	0a 94       	dec	r0
    15e2:	12 16       	cp	r1, r18
    15e4:	13 06       	cpc	r1, r19
    15e6:	14 06       	cpc	r1, r20
    15e8:	05 06       	cpc	r0, r21
    15ea:	08 95       	ret

000015ec <__fp_round>:
    15ec:	09 2e       	mov	r0, r25
    15ee:	03 94       	inc	r0
    15f0:	00 0c       	add	r0, r0
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <__fp_round+0xc>
    15f4:	88 23       	and	r24, r24
    15f6:	52 f0       	brmi	.+20     	; 0x160c <__fp_round+0x20>
    15f8:	bb 0f       	add	r27, r27
    15fa:	40 f4       	brcc	.+16     	; 0x160c <__fp_round+0x20>
    15fc:	bf 2b       	or	r27, r31
    15fe:	11 f4       	brne	.+4      	; 0x1604 <__fp_round+0x18>
    1600:	60 ff       	sbrs	r22, 0
    1602:	04 c0       	rjmp	.+8      	; 0x160c <__fp_round+0x20>
    1604:	6f 5f       	subi	r22, 0xFF	; 255
    1606:	7f 4f       	sbci	r23, 0xFF	; 255
    1608:	8f 4f       	sbci	r24, 0xFF	; 255
    160a:	9f 4f       	sbci	r25, 0xFF	; 255
    160c:	08 95       	ret

0000160e <__fp_split3>:
    160e:	57 fd       	sbrc	r21, 7
    1610:	90 58       	subi	r25, 0x80	; 128
    1612:	44 0f       	add	r20, r20
    1614:	55 1f       	adc	r21, r21
    1616:	59 f0       	breq	.+22     	; 0x162e <__fp_splitA+0x10>
    1618:	5f 3f       	cpi	r21, 0xFF	; 255
    161a:	71 f0       	breq	.+28     	; 0x1638 <__fp_splitA+0x1a>
    161c:	47 95       	ror	r20

0000161e <__fp_splitA>:
    161e:	88 0f       	add	r24, r24
    1620:	97 fb       	bst	r25, 7
    1622:	99 1f       	adc	r25, r25
    1624:	61 f0       	breq	.+24     	; 0x163e <__fp_splitA+0x20>
    1626:	9f 3f       	cpi	r25, 0xFF	; 255
    1628:	79 f0       	breq	.+30     	; 0x1648 <__fp_splitA+0x2a>
    162a:	87 95       	ror	r24
    162c:	08 95       	ret
    162e:	12 16       	cp	r1, r18
    1630:	13 06       	cpc	r1, r19
    1632:	14 06       	cpc	r1, r20
    1634:	55 1f       	adc	r21, r21
    1636:	f2 cf       	rjmp	.-28     	; 0x161c <__fp_split3+0xe>
    1638:	46 95       	lsr	r20
    163a:	f1 df       	rcall	.-30     	; 0x161e <__fp_splitA>
    163c:	08 c0       	rjmp	.+16     	; 0x164e <__fp_splitA+0x30>
    163e:	16 16       	cp	r1, r22
    1640:	17 06       	cpc	r1, r23
    1642:	18 06       	cpc	r1, r24
    1644:	99 1f       	adc	r25, r25
    1646:	f1 cf       	rjmp	.-30     	; 0x162a <__fp_splitA+0xc>
    1648:	86 95       	lsr	r24
    164a:	71 05       	cpc	r23, r1
    164c:	61 05       	cpc	r22, r1
    164e:	08 94       	sec
    1650:	08 95       	ret

00001652 <__fp_zero>:
    1652:	e8 94       	clt

00001654 <__fp_szero>:
    1654:	bb 27       	eor	r27, r27
    1656:	66 27       	eor	r22, r22
    1658:	77 27       	eor	r23, r23
    165a:	cb 01       	movw	r24, r22
    165c:	97 f9       	bld	r25, 7
    165e:	08 95       	ret

00001660 <inverse>:
    1660:	9b 01       	movw	r18, r22
    1662:	ac 01       	movw	r20, r24
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	80 e8       	ldi	r24, 0x80	; 128
    166a:	9f e3       	ldi	r25, 0x3F	; 63
    166c:	ba ce       	rjmp	.-652    	; 0x13e2 <__divsf3>

0000166e <__mulsf3>:
    166e:	0b d0       	rcall	.+22     	; 0x1686 <__mulsf3x>
    1670:	bd cf       	rjmp	.-134    	; 0x15ec <__fp_round>
    1672:	ae df       	rcall	.-164    	; 0x15d0 <__fp_pscA>
    1674:	28 f0       	brcs	.+10     	; 0x1680 <__mulsf3+0x12>
    1676:	b3 df       	rcall	.-154    	; 0x15de <__fp_pscB>
    1678:	18 f0       	brcs	.+6      	; 0x1680 <__mulsf3+0x12>
    167a:	95 23       	and	r25, r21
    167c:	09 f0       	breq	.+2      	; 0x1680 <__mulsf3+0x12>
    167e:	7a cf       	rjmp	.-268    	; 0x1574 <__fp_inf>
    1680:	7f cf       	rjmp	.-258    	; 0x1580 <__fp_nan>
    1682:	11 24       	eor	r1, r1
    1684:	e7 cf       	rjmp	.-50     	; 0x1654 <__fp_szero>

00001686 <__mulsf3x>:
    1686:	c3 df       	rcall	.-122    	; 0x160e <__fp_split3>
    1688:	a0 f3       	brcs	.-24     	; 0x1672 <__mulsf3+0x4>

0000168a <__mulsf3_pse>:
    168a:	95 9f       	mul	r25, r21
    168c:	d1 f3       	breq	.-12     	; 0x1682 <__mulsf3+0x14>
    168e:	95 0f       	add	r25, r21
    1690:	50 e0       	ldi	r21, 0x00	; 0
    1692:	55 1f       	adc	r21, r21
    1694:	62 9f       	mul	r22, r18
    1696:	f0 01       	movw	r30, r0
    1698:	72 9f       	mul	r23, r18
    169a:	bb 27       	eor	r27, r27
    169c:	f0 0d       	add	r31, r0
    169e:	b1 1d       	adc	r27, r1
    16a0:	63 9f       	mul	r22, r19
    16a2:	aa 27       	eor	r26, r26
    16a4:	f0 0d       	add	r31, r0
    16a6:	b1 1d       	adc	r27, r1
    16a8:	aa 1f       	adc	r26, r26
    16aa:	64 9f       	mul	r22, r20
    16ac:	66 27       	eor	r22, r22
    16ae:	b0 0d       	add	r27, r0
    16b0:	a1 1d       	adc	r26, r1
    16b2:	66 1f       	adc	r22, r22
    16b4:	82 9f       	mul	r24, r18
    16b6:	22 27       	eor	r18, r18
    16b8:	b0 0d       	add	r27, r0
    16ba:	a1 1d       	adc	r26, r1
    16bc:	62 1f       	adc	r22, r18
    16be:	73 9f       	mul	r23, r19
    16c0:	b0 0d       	add	r27, r0
    16c2:	a1 1d       	adc	r26, r1
    16c4:	62 1f       	adc	r22, r18
    16c6:	83 9f       	mul	r24, r19
    16c8:	a0 0d       	add	r26, r0
    16ca:	61 1d       	adc	r22, r1
    16cc:	22 1f       	adc	r18, r18
    16ce:	74 9f       	mul	r23, r20
    16d0:	33 27       	eor	r19, r19
    16d2:	a0 0d       	add	r26, r0
    16d4:	61 1d       	adc	r22, r1
    16d6:	23 1f       	adc	r18, r19
    16d8:	84 9f       	mul	r24, r20
    16da:	60 0d       	add	r22, r0
    16dc:	21 1d       	adc	r18, r1
    16de:	82 2f       	mov	r24, r18
    16e0:	76 2f       	mov	r23, r22
    16e2:	6a 2f       	mov	r22, r26
    16e4:	11 24       	eor	r1, r1
    16e6:	9f 57       	subi	r25, 0x7F	; 127
    16e8:	50 40       	sbci	r21, 0x00	; 0
    16ea:	8a f0       	brmi	.+34     	; 0x170e <__mulsf3_pse+0x84>
    16ec:	e1 f0       	breq	.+56     	; 0x1726 <__mulsf3_pse+0x9c>
    16ee:	88 23       	and	r24, r24
    16f0:	4a f0       	brmi	.+18     	; 0x1704 <__mulsf3_pse+0x7a>
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	bb 1f       	adc	r27, r27
    16f8:	66 1f       	adc	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	88 1f       	adc	r24, r24
    16fe:	91 50       	subi	r25, 0x01	; 1
    1700:	50 40       	sbci	r21, 0x00	; 0
    1702:	a9 f7       	brne	.-22     	; 0x16ee <__mulsf3_pse+0x64>
    1704:	9e 3f       	cpi	r25, 0xFE	; 254
    1706:	51 05       	cpc	r21, r1
    1708:	70 f0       	brcs	.+28     	; 0x1726 <__mulsf3_pse+0x9c>
    170a:	34 cf       	rjmp	.-408    	; 0x1574 <__fp_inf>
    170c:	a3 cf       	rjmp	.-186    	; 0x1654 <__fp_szero>
    170e:	5f 3f       	cpi	r21, 0xFF	; 255
    1710:	ec f3       	brlt	.-6      	; 0x170c <__mulsf3_pse+0x82>
    1712:	98 3e       	cpi	r25, 0xE8	; 232
    1714:	dc f3       	brlt	.-10     	; 0x170c <__mulsf3_pse+0x82>
    1716:	86 95       	lsr	r24
    1718:	77 95       	ror	r23
    171a:	67 95       	ror	r22
    171c:	b7 95       	ror	r27
    171e:	f7 95       	ror	r31
    1720:	e7 95       	ror	r30
    1722:	9f 5f       	subi	r25, 0xFF	; 255
    1724:	c1 f7       	brne	.-16     	; 0x1716 <__mulsf3_pse+0x8c>
    1726:	fe 2b       	or	r31, r30
    1728:	88 0f       	add	r24, r24
    172a:	91 1d       	adc	r25, r1
    172c:	96 95       	lsr	r25
    172e:	87 95       	ror	r24
    1730:	97 f9       	bld	r25, 7
    1732:	08 95       	ret

00001734 <square>:
    1734:	9b 01       	movw	r18, r22
    1736:	ac 01       	movw	r20, r24
    1738:	9a cf       	rjmp	.-204    	; 0x166e <__mulsf3>

0000173a <vsnprintf>:
    173a:	ae e0       	ldi	r26, 0x0E	; 14
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e2 ea       	ldi	r30, 0xA2	; 162
    1740:	fb e0       	ldi	r31, 0x0B	; 11
    1742:	b4 c2       	rjmp	.+1384   	; 0x1cac <__prologue_saves__+0x1c>
    1744:	8c 01       	movw	r16, r24
    1746:	fa 01       	movw	r30, r20
    1748:	86 e0       	ldi	r24, 0x06	; 6
    174a:	8c 83       	std	Y+4, r24	; 0x04
    174c:	1a 83       	std	Y+2, r17	; 0x02
    174e:	09 83       	std	Y+1, r16	; 0x01
    1750:	77 ff       	sbrs	r23, 7
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <vsnprintf+0x1e>
    1754:	60 e0       	ldi	r22, 0x00	; 0
    1756:	70 e8       	ldi	r23, 0x80	; 128
    1758:	cb 01       	movw	r24, r22
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	8d 83       	std	Y+5, r24	; 0x05
    1760:	a9 01       	movw	r20, r18
    1762:	bf 01       	movw	r22, r30
    1764:	ce 01       	movw	r24, r28
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	11 d0       	rcall	.+34     	; 0x178c <vfprintf>
    176a:	4d 81       	ldd	r20, Y+5	; 0x05
    176c:	5e 81       	ldd	r21, Y+6	; 0x06
    176e:	57 fd       	sbrc	r21, 7
    1770:	0a c0       	rjmp	.+20     	; 0x1786 <vsnprintf+0x4c>
    1772:	2f 81       	ldd	r18, Y+7	; 0x07
    1774:	38 85       	ldd	r19, Y+8	; 0x08
    1776:	42 17       	cp	r20, r18
    1778:	53 07       	cpc	r21, r19
    177a:	0c f4       	brge	.+2      	; 0x177e <vsnprintf+0x44>
    177c:	9a 01       	movw	r18, r20
    177e:	f8 01       	movw	r30, r16
    1780:	e2 0f       	add	r30, r18
    1782:	f3 1f       	adc	r31, r19
    1784:	10 82       	st	Z, r1
    1786:	2e 96       	adiw	r28, 0x0e	; 14
    1788:	e4 e0       	ldi	r30, 0x04	; 4
    178a:	ac c2       	rjmp	.+1368   	; 0x1ce4 <__epilogue_restores__+0x1c>

0000178c <vfprintf>:
    178c:	ab e0       	ldi	r26, 0x0B	; 11
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	eb ec       	ldi	r30, 0xCB	; 203
    1792:	fb e0       	ldi	r31, 0x0B	; 11
    1794:	7d c2       	rjmp	.+1274   	; 0x1c90 <__prologue_saves__>
    1796:	6c 01       	movw	r12, r24
    1798:	7b 01       	movw	r14, r22
    179a:	8a 01       	movw	r16, r20
    179c:	fc 01       	movw	r30, r24
    179e:	17 82       	std	Z+7, r1	; 0x07
    17a0:	16 82       	std	Z+6, r1	; 0x06
    17a2:	83 81       	ldd	r24, Z+3	; 0x03
    17a4:	81 ff       	sbrs	r24, 1
    17a6:	bf c1       	rjmp	.+894    	; 0x1b26 <vfprintf+0x39a>
    17a8:	ce 01       	movw	r24, r28
    17aa:	01 96       	adiw	r24, 0x01	; 1
    17ac:	3c 01       	movw	r6, r24
    17ae:	f6 01       	movw	r30, r12
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	f7 01       	movw	r30, r14
    17b4:	93 fd       	sbrc	r25, 3
    17b6:	85 91       	lpm	r24, Z+
    17b8:	93 ff       	sbrs	r25, 3
    17ba:	81 91       	ld	r24, Z+
    17bc:	7f 01       	movw	r14, r30
    17be:	88 23       	and	r24, r24
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <vfprintf+0x38>
    17c2:	ad c1       	rjmp	.+858    	; 0x1b1e <vfprintf+0x392>
    17c4:	85 32       	cpi	r24, 0x25	; 37
    17c6:	39 f4       	brne	.+14     	; 0x17d6 <vfprintf+0x4a>
    17c8:	93 fd       	sbrc	r25, 3
    17ca:	85 91       	lpm	r24, Z+
    17cc:	93 ff       	sbrs	r25, 3
    17ce:	81 91       	ld	r24, Z+
    17d0:	7f 01       	movw	r14, r30
    17d2:	85 32       	cpi	r24, 0x25	; 37
    17d4:	21 f4       	brne	.+8      	; 0x17de <vfprintf+0x52>
    17d6:	b6 01       	movw	r22, r12
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	c0 d1       	rcall	.+896    	; 0x1b5c <fputc>
    17dc:	e8 cf       	rjmp	.-48     	; 0x17ae <vfprintf+0x22>
    17de:	91 2c       	mov	r9, r1
    17e0:	21 2c       	mov	r2, r1
    17e2:	31 2c       	mov	r3, r1
    17e4:	ff e1       	ldi	r31, 0x1F	; 31
    17e6:	f3 15       	cp	r31, r3
    17e8:	d8 f0       	brcs	.+54     	; 0x1820 <vfprintf+0x94>
    17ea:	8b 32       	cpi	r24, 0x2B	; 43
    17ec:	79 f0       	breq	.+30     	; 0x180c <vfprintf+0x80>
    17ee:	38 f4       	brcc	.+14     	; 0x17fe <vfprintf+0x72>
    17f0:	80 32       	cpi	r24, 0x20	; 32
    17f2:	79 f0       	breq	.+30     	; 0x1812 <vfprintf+0x86>
    17f4:	83 32       	cpi	r24, 0x23	; 35
    17f6:	a1 f4       	brne	.+40     	; 0x1820 <vfprintf+0x94>
    17f8:	23 2d       	mov	r18, r3
    17fa:	20 61       	ori	r18, 0x10	; 16
    17fc:	1d c0       	rjmp	.+58     	; 0x1838 <vfprintf+0xac>
    17fe:	8d 32       	cpi	r24, 0x2D	; 45
    1800:	61 f0       	breq	.+24     	; 0x181a <vfprintf+0x8e>
    1802:	80 33       	cpi	r24, 0x30	; 48
    1804:	69 f4       	brne	.+26     	; 0x1820 <vfprintf+0x94>
    1806:	23 2d       	mov	r18, r3
    1808:	21 60       	ori	r18, 0x01	; 1
    180a:	16 c0       	rjmp	.+44     	; 0x1838 <vfprintf+0xac>
    180c:	83 2d       	mov	r24, r3
    180e:	82 60       	ori	r24, 0x02	; 2
    1810:	38 2e       	mov	r3, r24
    1812:	e3 2d       	mov	r30, r3
    1814:	e4 60       	ori	r30, 0x04	; 4
    1816:	3e 2e       	mov	r3, r30
    1818:	2a c0       	rjmp	.+84     	; 0x186e <vfprintf+0xe2>
    181a:	f3 2d       	mov	r31, r3
    181c:	f8 60       	ori	r31, 0x08	; 8
    181e:	1d c0       	rjmp	.+58     	; 0x185a <vfprintf+0xce>
    1820:	37 fc       	sbrc	r3, 7
    1822:	2d c0       	rjmp	.+90     	; 0x187e <vfprintf+0xf2>
    1824:	20 ed       	ldi	r18, 0xD0	; 208
    1826:	28 0f       	add	r18, r24
    1828:	2a 30       	cpi	r18, 0x0A	; 10
    182a:	40 f0       	brcs	.+16     	; 0x183c <vfprintf+0xb0>
    182c:	8e 32       	cpi	r24, 0x2E	; 46
    182e:	b9 f4       	brne	.+46     	; 0x185e <vfprintf+0xd2>
    1830:	36 fc       	sbrc	r3, 6
    1832:	75 c1       	rjmp	.+746    	; 0x1b1e <vfprintf+0x392>
    1834:	23 2d       	mov	r18, r3
    1836:	20 64       	ori	r18, 0x40	; 64
    1838:	32 2e       	mov	r3, r18
    183a:	19 c0       	rjmp	.+50     	; 0x186e <vfprintf+0xe2>
    183c:	36 fe       	sbrs	r3, 6
    183e:	06 c0       	rjmp	.+12     	; 0x184c <vfprintf+0xc0>
    1840:	8a e0       	ldi	r24, 0x0A	; 10
    1842:	98 9e       	mul	r9, r24
    1844:	20 0d       	add	r18, r0
    1846:	11 24       	eor	r1, r1
    1848:	92 2e       	mov	r9, r18
    184a:	11 c0       	rjmp	.+34     	; 0x186e <vfprintf+0xe2>
    184c:	ea e0       	ldi	r30, 0x0A	; 10
    184e:	2e 9e       	mul	r2, r30
    1850:	20 0d       	add	r18, r0
    1852:	11 24       	eor	r1, r1
    1854:	22 2e       	mov	r2, r18
    1856:	f3 2d       	mov	r31, r3
    1858:	f0 62       	ori	r31, 0x20	; 32
    185a:	3f 2e       	mov	r3, r31
    185c:	08 c0       	rjmp	.+16     	; 0x186e <vfprintf+0xe2>
    185e:	8c 36       	cpi	r24, 0x6C	; 108
    1860:	21 f4       	brne	.+8      	; 0x186a <vfprintf+0xde>
    1862:	83 2d       	mov	r24, r3
    1864:	80 68       	ori	r24, 0x80	; 128
    1866:	38 2e       	mov	r3, r24
    1868:	02 c0       	rjmp	.+4      	; 0x186e <vfprintf+0xe2>
    186a:	88 36       	cpi	r24, 0x68	; 104
    186c:	41 f4       	brne	.+16     	; 0x187e <vfprintf+0xf2>
    186e:	f7 01       	movw	r30, r14
    1870:	93 fd       	sbrc	r25, 3
    1872:	85 91       	lpm	r24, Z+
    1874:	93 ff       	sbrs	r25, 3
    1876:	81 91       	ld	r24, Z+
    1878:	7f 01       	movw	r14, r30
    187a:	81 11       	cpse	r24, r1
    187c:	b3 cf       	rjmp	.-154    	; 0x17e4 <vfprintf+0x58>
    187e:	98 2f       	mov	r25, r24
    1880:	9f 7d       	andi	r25, 0xDF	; 223
    1882:	95 54       	subi	r25, 0x45	; 69
    1884:	93 30       	cpi	r25, 0x03	; 3
    1886:	28 f4       	brcc	.+10     	; 0x1892 <vfprintf+0x106>
    1888:	0c 5f       	subi	r16, 0xFC	; 252
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	9f e3       	ldi	r25, 0x3F	; 63
    188e:	99 83       	std	Y+1, r25	; 0x01
    1890:	0d c0       	rjmp	.+26     	; 0x18ac <vfprintf+0x120>
    1892:	83 36       	cpi	r24, 0x63	; 99
    1894:	31 f0       	breq	.+12     	; 0x18a2 <vfprintf+0x116>
    1896:	83 37       	cpi	r24, 0x73	; 115
    1898:	71 f0       	breq	.+28     	; 0x18b6 <vfprintf+0x12a>
    189a:	83 35       	cpi	r24, 0x53	; 83
    189c:	09 f0       	breq	.+2      	; 0x18a0 <vfprintf+0x114>
    189e:	55 c0       	rjmp	.+170    	; 0x194a <vfprintf+0x1be>
    18a0:	20 c0       	rjmp	.+64     	; 0x18e2 <vfprintf+0x156>
    18a2:	f8 01       	movw	r30, r16
    18a4:	80 81       	ld	r24, Z
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	0e 5f       	subi	r16, 0xFE	; 254
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	88 24       	eor	r8, r8
    18ae:	83 94       	inc	r8
    18b0:	91 2c       	mov	r9, r1
    18b2:	53 01       	movw	r10, r6
    18b4:	12 c0       	rjmp	.+36     	; 0x18da <vfprintf+0x14e>
    18b6:	28 01       	movw	r4, r16
    18b8:	f2 e0       	ldi	r31, 0x02	; 2
    18ba:	4f 0e       	add	r4, r31
    18bc:	51 1c       	adc	r5, r1
    18be:	f8 01       	movw	r30, r16
    18c0:	a0 80       	ld	r10, Z
    18c2:	b1 80       	ldd	r11, Z+1	; 0x01
    18c4:	36 fe       	sbrs	r3, 6
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <vfprintf+0x142>
    18c8:	69 2d       	mov	r22, r9
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <vfprintf+0x146>
    18ce:	6f ef       	ldi	r22, 0xFF	; 255
    18d0:	7f ef       	ldi	r23, 0xFF	; 255
    18d2:	c5 01       	movw	r24, r10
    18d4:	38 d1       	rcall	.+624    	; 0x1b46 <strnlen>
    18d6:	4c 01       	movw	r8, r24
    18d8:	82 01       	movw	r16, r4
    18da:	f3 2d       	mov	r31, r3
    18dc:	ff 77       	andi	r31, 0x7F	; 127
    18de:	3f 2e       	mov	r3, r31
    18e0:	15 c0       	rjmp	.+42     	; 0x190c <vfprintf+0x180>
    18e2:	28 01       	movw	r4, r16
    18e4:	22 e0       	ldi	r18, 0x02	; 2
    18e6:	42 0e       	add	r4, r18
    18e8:	51 1c       	adc	r5, r1
    18ea:	f8 01       	movw	r30, r16
    18ec:	a0 80       	ld	r10, Z
    18ee:	b1 80       	ldd	r11, Z+1	; 0x01
    18f0:	36 fe       	sbrs	r3, 6
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <vfprintf+0x16e>
    18f4:	69 2d       	mov	r22, r9
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <vfprintf+0x172>
    18fa:	6f ef       	ldi	r22, 0xFF	; 255
    18fc:	7f ef       	ldi	r23, 0xFF	; 255
    18fe:	c5 01       	movw	r24, r10
    1900:	17 d1       	rcall	.+558    	; 0x1b30 <strnlen_P>
    1902:	4c 01       	movw	r8, r24
    1904:	f3 2d       	mov	r31, r3
    1906:	f0 68       	ori	r31, 0x80	; 128
    1908:	3f 2e       	mov	r3, r31
    190a:	82 01       	movw	r16, r4
    190c:	33 fc       	sbrc	r3, 3
    190e:	19 c0       	rjmp	.+50     	; 0x1942 <vfprintf+0x1b6>
    1910:	82 2d       	mov	r24, r2
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	88 16       	cp	r8, r24
    1916:	99 06       	cpc	r9, r25
    1918:	a0 f4       	brcc	.+40     	; 0x1942 <vfprintf+0x1b6>
    191a:	b6 01       	movw	r22, r12
    191c:	80 e2       	ldi	r24, 0x20	; 32
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	1d d1       	rcall	.+570    	; 0x1b5c <fputc>
    1922:	2a 94       	dec	r2
    1924:	f5 cf       	rjmp	.-22     	; 0x1910 <vfprintf+0x184>
    1926:	f5 01       	movw	r30, r10
    1928:	37 fc       	sbrc	r3, 7
    192a:	85 91       	lpm	r24, Z+
    192c:	37 fe       	sbrs	r3, 7
    192e:	81 91       	ld	r24, Z+
    1930:	5f 01       	movw	r10, r30
    1932:	b6 01       	movw	r22, r12
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	12 d1       	rcall	.+548    	; 0x1b5c <fputc>
    1938:	21 10       	cpse	r2, r1
    193a:	2a 94       	dec	r2
    193c:	21 e0       	ldi	r18, 0x01	; 1
    193e:	82 1a       	sub	r8, r18
    1940:	91 08       	sbc	r9, r1
    1942:	81 14       	cp	r8, r1
    1944:	91 04       	cpc	r9, r1
    1946:	79 f7       	brne	.-34     	; 0x1926 <vfprintf+0x19a>
    1948:	e1 c0       	rjmp	.+450    	; 0x1b0c <vfprintf+0x380>
    194a:	84 36       	cpi	r24, 0x64	; 100
    194c:	11 f0       	breq	.+4      	; 0x1952 <vfprintf+0x1c6>
    194e:	89 36       	cpi	r24, 0x69	; 105
    1950:	39 f5       	brne	.+78     	; 0x19a0 <vfprintf+0x214>
    1952:	f8 01       	movw	r30, r16
    1954:	37 fe       	sbrs	r3, 7
    1956:	07 c0       	rjmp	.+14     	; 0x1966 <vfprintf+0x1da>
    1958:	60 81       	ld	r22, Z
    195a:	71 81       	ldd	r23, Z+1	; 0x01
    195c:	82 81       	ldd	r24, Z+2	; 0x02
    195e:	93 81       	ldd	r25, Z+3	; 0x03
    1960:	0c 5f       	subi	r16, 0xFC	; 252
    1962:	1f 4f       	sbci	r17, 0xFF	; 255
    1964:	08 c0       	rjmp	.+16     	; 0x1976 <vfprintf+0x1ea>
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	07 2e       	mov	r0, r23
    196c:	00 0c       	add	r0, r0
    196e:	88 0b       	sbc	r24, r24
    1970:	99 0b       	sbc	r25, r25
    1972:	0e 5f       	subi	r16, 0xFE	; 254
    1974:	1f 4f       	sbci	r17, 0xFF	; 255
    1976:	f3 2d       	mov	r31, r3
    1978:	ff 76       	andi	r31, 0x6F	; 111
    197a:	3f 2e       	mov	r3, r31
    197c:	97 ff       	sbrs	r25, 7
    197e:	09 c0       	rjmp	.+18     	; 0x1992 <vfprintf+0x206>
    1980:	90 95       	com	r25
    1982:	80 95       	com	r24
    1984:	70 95       	com	r23
    1986:	61 95       	neg	r22
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	8f 4f       	sbci	r24, 0xFF	; 255
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	f0 68       	ori	r31, 0x80	; 128
    1990:	3f 2e       	mov	r3, r31
    1992:	2a e0       	ldi	r18, 0x0A	; 10
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	a3 01       	movw	r20, r6
    1998:	1d d1       	rcall	.+570    	; 0x1bd4 <__ultoa_invert>
    199a:	88 2e       	mov	r8, r24
    199c:	86 18       	sub	r8, r6
    199e:	44 c0       	rjmp	.+136    	; 0x1a28 <vfprintf+0x29c>
    19a0:	85 37       	cpi	r24, 0x75	; 117
    19a2:	31 f4       	brne	.+12     	; 0x19b0 <vfprintf+0x224>
    19a4:	23 2d       	mov	r18, r3
    19a6:	2f 7e       	andi	r18, 0xEF	; 239
    19a8:	b2 2e       	mov	r11, r18
    19aa:	2a e0       	ldi	r18, 0x0A	; 10
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	25 c0       	rjmp	.+74     	; 0x19fa <vfprintf+0x26e>
    19b0:	93 2d       	mov	r25, r3
    19b2:	99 7f       	andi	r25, 0xF9	; 249
    19b4:	b9 2e       	mov	r11, r25
    19b6:	8f 36       	cpi	r24, 0x6F	; 111
    19b8:	c1 f0       	breq	.+48     	; 0x19ea <vfprintf+0x25e>
    19ba:	18 f4       	brcc	.+6      	; 0x19c2 <vfprintf+0x236>
    19bc:	88 35       	cpi	r24, 0x58	; 88
    19be:	79 f0       	breq	.+30     	; 0x19de <vfprintf+0x252>
    19c0:	ae c0       	rjmp	.+348    	; 0x1b1e <vfprintf+0x392>
    19c2:	80 37       	cpi	r24, 0x70	; 112
    19c4:	19 f0       	breq	.+6      	; 0x19cc <vfprintf+0x240>
    19c6:	88 37       	cpi	r24, 0x78	; 120
    19c8:	21 f0       	breq	.+8      	; 0x19d2 <vfprintf+0x246>
    19ca:	a9 c0       	rjmp	.+338    	; 0x1b1e <vfprintf+0x392>
    19cc:	e9 2f       	mov	r30, r25
    19ce:	e0 61       	ori	r30, 0x10	; 16
    19d0:	be 2e       	mov	r11, r30
    19d2:	b4 fe       	sbrs	r11, 4
    19d4:	0d c0       	rjmp	.+26     	; 0x19f0 <vfprintf+0x264>
    19d6:	fb 2d       	mov	r31, r11
    19d8:	f4 60       	ori	r31, 0x04	; 4
    19da:	bf 2e       	mov	r11, r31
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <vfprintf+0x264>
    19de:	34 fe       	sbrs	r3, 4
    19e0:	0a c0       	rjmp	.+20     	; 0x19f6 <vfprintf+0x26a>
    19e2:	29 2f       	mov	r18, r25
    19e4:	26 60       	ori	r18, 0x06	; 6
    19e6:	b2 2e       	mov	r11, r18
    19e8:	06 c0       	rjmp	.+12     	; 0x19f6 <vfprintf+0x26a>
    19ea:	28 e0       	ldi	r18, 0x08	; 8
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	05 c0       	rjmp	.+10     	; 0x19fa <vfprintf+0x26e>
    19f0:	20 e1       	ldi	r18, 0x10	; 16
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <vfprintf+0x26e>
    19f6:	20 e1       	ldi	r18, 0x10	; 16
    19f8:	32 e0       	ldi	r19, 0x02	; 2
    19fa:	f8 01       	movw	r30, r16
    19fc:	b7 fe       	sbrs	r11, 7
    19fe:	07 c0       	rjmp	.+14     	; 0x1a0e <vfprintf+0x282>
    1a00:	60 81       	ld	r22, Z
    1a02:	71 81       	ldd	r23, Z+1	; 0x01
    1a04:	82 81       	ldd	r24, Z+2	; 0x02
    1a06:	93 81       	ldd	r25, Z+3	; 0x03
    1a08:	0c 5f       	subi	r16, 0xFC	; 252
    1a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <vfprintf+0x28e>
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 5f       	subi	r16, 0xFE	; 254
    1a18:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1a:	a3 01       	movw	r20, r6
    1a1c:	db d0       	rcall	.+438    	; 0x1bd4 <__ultoa_invert>
    1a1e:	88 2e       	mov	r8, r24
    1a20:	86 18       	sub	r8, r6
    1a22:	fb 2d       	mov	r31, r11
    1a24:	ff 77       	andi	r31, 0x7F	; 127
    1a26:	3f 2e       	mov	r3, r31
    1a28:	36 fe       	sbrs	r3, 6
    1a2a:	0d c0       	rjmp	.+26     	; 0x1a46 <vfprintf+0x2ba>
    1a2c:	23 2d       	mov	r18, r3
    1a2e:	2e 7f       	andi	r18, 0xFE	; 254
    1a30:	a2 2e       	mov	r10, r18
    1a32:	89 14       	cp	r8, r9
    1a34:	58 f4       	brcc	.+22     	; 0x1a4c <vfprintf+0x2c0>
    1a36:	34 fe       	sbrs	r3, 4
    1a38:	0b c0       	rjmp	.+22     	; 0x1a50 <vfprintf+0x2c4>
    1a3a:	32 fc       	sbrc	r3, 2
    1a3c:	09 c0       	rjmp	.+18     	; 0x1a50 <vfprintf+0x2c4>
    1a3e:	83 2d       	mov	r24, r3
    1a40:	8e 7e       	andi	r24, 0xEE	; 238
    1a42:	a8 2e       	mov	r10, r24
    1a44:	05 c0       	rjmp	.+10     	; 0x1a50 <vfprintf+0x2c4>
    1a46:	b8 2c       	mov	r11, r8
    1a48:	a3 2c       	mov	r10, r3
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <vfprintf+0x2c6>
    1a4c:	b8 2c       	mov	r11, r8
    1a4e:	01 c0       	rjmp	.+2      	; 0x1a52 <vfprintf+0x2c6>
    1a50:	b9 2c       	mov	r11, r9
    1a52:	a4 fe       	sbrs	r10, 4
    1a54:	0f c0       	rjmp	.+30     	; 0x1a74 <vfprintf+0x2e8>
    1a56:	fe 01       	movw	r30, r28
    1a58:	e8 0d       	add	r30, r8
    1a5a:	f1 1d       	adc	r31, r1
    1a5c:	80 81       	ld	r24, Z
    1a5e:	80 33       	cpi	r24, 0x30	; 48
    1a60:	21 f4       	brne	.+8      	; 0x1a6a <vfprintf+0x2de>
    1a62:	9a 2d       	mov	r25, r10
    1a64:	99 7e       	andi	r25, 0xE9	; 233
    1a66:	a9 2e       	mov	r10, r25
    1a68:	09 c0       	rjmp	.+18     	; 0x1a7c <vfprintf+0x2f0>
    1a6a:	a2 fe       	sbrs	r10, 2
    1a6c:	06 c0       	rjmp	.+12     	; 0x1a7a <vfprintf+0x2ee>
    1a6e:	b3 94       	inc	r11
    1a70:	b3 94       	inc	r11
    1a72:	04 c0       	rjmp	.+8      	; 0x1a7c <vfprintf+0x2f0>
    1a74:	8a 2d       	mov	r24, r10
    1a76:	86 78       	andi	r24, 0x86	; 134
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <vfprintf+0x2f0>
    1a7a:	b3 94       	inc	r11
    1a7c:	a3 fc       	sbrc	r10, 3
    1a7e:	10 c0       	rjmp	.+32     	; 0x1aa0 <vfprintf+0x314>
    1a80:	a0 fe       	sbrs	r10, 0
    1a82:	06 c0       	rjmp	.+12     	; 0x1a90 <vfprintf+0x304>
    1a84:	b2 14       	cp	r11, r2
    1a86:	80 f4       	brcc	.+32     	; 0x1aa8 <vfprintf+0x31c>
    1a88:	28 0c       	add	r2, r8
    1a8a:	92 2c       	mov	r9, r2
    1a8c:	9b 18       	sub	r9, r11
    1a8e:	0d c0       	rjmp	.+26     	; 0x1aaa <vfprintf+0x31e>
    1a90:	b2 14       	cp	r11, r2
    1a92:	58 f4       	brcc	.+22     	; 0x1aaa <vfprintf+0x31e>
    1a94:	b6 01       	movw	r22, r12
    1a96:	80 e2       	ldi	r24, 0x20	; 32
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	60 d0       	rcall	.+192    	; 0x1b5c <fputc>
    1a9c:	b3 94       	inc	r11
    1a9e:	f8 cf       	rjmp	.-16     	; 0x1a90 <vfprintf+0x304>
    1aa0:	b2 14       	cp	r11, r2
    1aa2:	18 f4       	brcc	.+6      	; 0x1aaa <vfprintf+0x31e>
    1aa4:	2b 18       	sub	r2, r11
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <vfprintf+0x320>
    1aa8:	98 2c       	mov	r9, r8
    1aaa:	21 2c       	mov	r2, r1
    1aac:	a4 fe       	sbrs	r10, 4
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <vfprintf+0x342>
    1ab0:	b6 01       	movw	r22, r12
    1ab2:	80 e3       	ldi	r24, 0x30	; 48
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	52 d0       	rcall	.+164    	; 0x1b5c <fputc>
    1ab8:	a2 fe       	sbrs	r10, 2
    1aba:	16 c0       	rjmp	.+44     	; 0x1ae8 <vfprintf+0x35c>
    1abc:	a1 fc       	sbrc	r10, 1
    1abe:	03 c0       	rjmp	.+6      	; 0x1ac6 <vfprintf+0x33a>
    1ac0:	88 e7       	ldi	r24, 0x78	; 120
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <vfprintf+0x33e>
    1ac6:	88 e5       	ldi	r24, 0x58	; 88
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	b6 01       	movw	r22, r12
    1acc:	0c c0       	rjmp	.+24     	; 0x1ae6 <vfprintf+0x35a>
    1ace:	8a 2d       	mov	r24, r10
    1ad0:	86 78       	andi	r24, 0x86	; 134
    1ad2:	51 f0       	breq	.+20     	; 0x1ae8 <vfprintf+0x35c>
    1ad4:	a1 fe       	sbrs	r10, 1
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <vfprintf+0x350>
    1ad8:	8b e2       	ldi	r24, 0x2B	; 43
    1ada:	01 c0       	rjmp	.+2      	; 0x1ade <vfprintf+0x352>
    1adc:	80 e2       	ldi	r24, 0x20	; 32
    1ade:	a7 fc       	sbrc	r10, 7
    1ae0:	8d e2       	ldi	r24, 0x2D	; 45
    1ae2:	b6 01       	movw	r22, r12
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	3a d0       	rcall	.+116    	; 0x1b5c <fputc>
    1ae8:	89 14       	cp	r8, r9
    1aea:	30 f4       	brcc	.+12     	; 0x1af8 <vfprintf+0x36c>
    1aec:	b6 01       	movw	r22, r12
    1aee:	80 e3       	ldi	r24, 0x30	; 48
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	34 d0       	rcall	.+104    	; 0x1b5c <fputc>
    1af4:	9a 94       	dec	r9
    1af6:	f8 cf       	rjmp	.-16     	; 0x1ae8 <vfprintf+0x35c>
    1af8:	8a 94       	dec	r8
    1afa:	f3 01       	movw	r30, r6
    1afc:	e8 0d       	add	r30, r8
    1afe:	f1 1d       	adc	r31, r1
    1b00:	80 81       	ld	r24, Z
    1b02:	b6 01       	movw	r22, r12
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	2a d0       	rcall	.+84     	; 0x1b5c <fputc>
    1b08:	81 10       	cpse	r8, r1
    1b0a:	f6 cf       	rjmp	.-20     	; 0x1af8 <vfprintf+0x36c>
    1b0c:	22 20       	and	r2, r2
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <vfprintf+0x386>
    1b10:	4e ce       	rjmp	.-868    	; 0x17ae <vfprintf+0x22>
    1b12:	b6 01       	movw	r22, r12
    1b14:	80 e2       	ldi	r24, 0x20	; 32
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	21 d0       	rcall	.+66     	; 0x1b5c <fputc>
    1b1a:	2a 94       	dec	r2
    1b1c:	f7 cf       	rjmp	.-18     	; 0x1b0c <vfprintf+0x380>
    1b1e:	f6 01       	movw	r30, r12
    1b20:	86 81       	ldd	r24, Z+6	; 0x06
    1b22:	97 81       	ldd	r25, Z+7	; 0x07
    1b24:	02 c0       	rjmp	.+4      	; 0x1b2a <vfprintf+0x39e>
    1b26:	8f ef       	ldi	r24, 0xFF	; 255
    1b28:	9f ef       	ldi	r25, 0xFF	; 255
    1b2a:	2b 96       	adiw	r28, 0x0b	; 11
    1b2c:	e2 e1       	ldi	r30, 0x12	; 18
    1b2e:	cc c0       	rjmp	.+408    	; 0x1cc8 <__epilogue_restores__>

00001b30 <strnlen_P>:
    1b30:	fc 01       	movw	r30, r24
    1b32:	05 90       	lpm	r0, Z+
    1b34:	61 50       	subi	r22, 0x01	; 1
    1b36:	70 40       	sbci	r23, 0x00	; 0
    1b38:	01 10       	cpse	r0, r1
    1b3a:	d8 f7       	brcc	.-10     	; 0x1b32 <strnlen_P+0x2>
    1b3c:	80 95       	com	r24
    1b3e:	90 95       	com	r25
    1b40:	8e 0f       	add	r24, r30
    1b42:	9f 1f       	adc	r25, r31
    1b44:	08 95       	ret

00001b46 <strnlen>:
    1b46:	fc 01       	movw	r30, r24
    1b48:	61 50       	subi	r22, 0x01	; 1
    1b4a:	70 40       	sbci	r23, 0x00	; 0
    1b4c:	01 90       	ld	r0, Z+
    1b4e:	01 10       	cpse	r0, r1
    1b50:	d8 f7       	brcc	.-10     	; 0x1b48 <strnlen+0x2>
    1b52:	80 95       	com	r24
    1b54:	90 95       	com	r25
    1b56:	8e 0f       	add	r24, r30
    1b58:	9f 1f       	adc	r25, r31
    1b5a:	08 95       	ret

00001b5c <fputc>:
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	fb 01       	movw	r30, r22
    1b66:	23 81       	ldd	r18, Z+3	; 0x03
    1b68:	21 fd       	sbrc	r18, 1
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <fputc+0x16>
    1b6c:	8f ef       	ldi	r24, 0xFF	; 255
    1b6e:	9f ef       	ldi	r25, 0xFF	; 255
    1b70:	2c c0       	rjmp	.+88     	; 0x1bca <fputc+0x6e>
    1b72:	22 ff       	sbrs	r18, 2
    1b74:	16 c0       	rjmp	.+44     	; 0x1ba2 <fputc+0x46>
    1b76:	46 81       	ldd	r20, Z+6	; 0x06
    1b78:	57 81       	ldd	r21, Z+7	; 0x07
    1b7a:	24 81       	ldd	r18, Z+4	; 0x04
    1b7c:	35 81       	ldd	r19, Z+5	; 0x05
    1b7e:	42 17       	cp	r20, r18
    1b80:	53 07       	cpc	r21, r19
    1b82:	44 f4       	brge	.+16     	; 0x1b94 <fputc+0x38>
    1b84:	a0 81       	ld	r26, Z
    1b86:	b1 81       	ldd	r27, Z+1	; 0x01
    1b88:	9d 01       	movw	r18, r26
    1b8a:	2f 5f       	subi	r18, 0xFF	; 255
    1b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8e:	31 83       	std	Z+1, r19	; 0x01
    1b90:	20 83       	st	Z, r18
    1b92:	8c 93       	st	X, r24
    1b94:	26 81       	ldd	r18, Z+6	; 0x06
    1b96:	37 81       	ldd	r19, Z+7	; 0x07
    1b98:	2f 5f       	subi	r18, 0xFF	; 255
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	37 83       	std	Z+7, r19	; 0x07
    1b9e:	26 83       	std	Z+6, r18	; 0x06
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <fputc+0x6e>
    1ba2:	8b 01       	movw	r16, r22
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	fb 01       	movw	r30, r22
    1ba8:	00 84       	ldd	r0, Z+8	; 0x08
    1baa:	f1 85       	ldd	r31, Z+9	; 0x09
    1bac:	e0 2d       	mov	r30, r0
    1bae:	09 95       	icall
    1bb0:	89 2b       	or	r24, r25
    1bb2:	e1 f6       	brne	.-72     	; 0x1b6c <fputc+0x10>
    1bb4:	d8 01       	movw	r26, r16
    1bb6:	16 96       	adiw	r26, 0x06	; 6
    1bb8:	8d 91       	ld	r24, X+
    1bba:	9c 91       	ld	r25, X
    1bbc:	17 97       	sbiw	r26, 0x07	; 7
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	17 96       	adiw	r26, 0x07	; 7
    1bc2:	9c 93       	st	X, r25
    1bc4:	8e 93       	st	-X, r24
    1bc6:	16 97       	sbiw	r26, 0x06	; 6
    1bc8:	ce 01       	movw	r24, r28
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	08 95       	ret

00001bd4 <__ultoa_invert>:
    1bd4:	fa 01       	movw	r30, r20
    1bd6:	aa 27       	eor	r26, r26
    1bd8:	28 30       	cpi	r18, 0x08	; 8
    1bda:	51 f1       	breq	.+84     	; 0x1c30 <__ultoa_invert+0x5c>
    1bdc:	20 31       	cpi	r18, 0x10	; 16
    1bde:	81 f1       	breq	.+96     	; 0x1c40 <__ultoa_invert+0x6c>
    1be0:	e8 94       	clt
    1be2:	6f 93       	push	r22
    1be4:	6e 7f       	andi	r22, 0xFE	; 254
    1be6:	6e 5f       	subi	r22, 0xFE	; 254
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	8f 4f       	sbci	r24, 0xFF	; 255
    1bec:	9f 4f       	sbci	r25, 0xFF	; 255
    1bee:	af 4f       	sbci	r26, 0xFF	; 255
    1bf0:	b1 e0       	ldi	r27, 0x01	; 1
    1bf2:	3e d0       	rcall	.+124    	; 0x1c70 <__ultoa_invert+0x9c>
    1bf4:	b4 e0       	ldi	r27, 0x04	; 4
    1bf6:	3c d0       	rcall	.+120    	; 0x1c70 <__ultoa_invert+0x9c>
    1bf8:	67 0f       	add	r22, r23
    1bfa:	78 1f       	adc	r23, r24
    1bfc:	89 1f       	adc	r24, r25
    1bfe:	9a 1f       	adc	r25, r26
    1c00:	a1 1d       	adc	r26, r1
    1c02:	68 0f       	add	r22, r24
    1c04:	79 1f       	adc	r23, r25
    1c06:	8a 1f       	adc	r24, r26
    1c08:	91 1d       	adc	r25, r1
    1c0a:	a1 1d       	adc	r26, r1
    1c0c:	6a 0f       	add	r22, r26
    1c0e:	71 1d       	adc	r23, r1
    1c10:	81 1d       	adc	r24, r1
    1c12:	91 1d       	adc	r25, r1
    1c14:	a1 1d       	adc	r26, r1
    1c16:	20 d0       	rcall	.+64     	; 0x1c58 <__ultoa_invert+0x84>
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <__ultoa_invert+0x48>
    1c1a:	68 94       	set
    1c1c:	3f 91       	pop	r19
    1c1e:	2a e0       	ldi	r18, 0x0A	; 10
    1c20:	26 9f       	mul	r18, r22
    1c22:	11 24       	eor	r1, r1
    1c24:	30 19       	sub	r19, r0
    1c26:	30 5d       	subi	r19, 0xD0	; 208
    1c28:	31 93       	st	Z+, r19
    1c2a:	de f6       	brtc	.-74     	; 0x1be2 <__ultoa_invert+0xe>
    1c2c:	cf 01       	movw	r24, r30
    1c2e:	08 95       	ret
    1c30:	46 2f       	mov	r20, r22
    1c32:	47 70       	andi	r20, 0x07	; 7
    1c34:	40 5d       	subi	r20, 0xD0	; 208
    1c36:	41 93       	st	Z+, r20
    1c38:	b3 e0       	ldi	r27, 0x03	; 3
    1c3a:	0f d0       	rcall	.+30     	; 0x1c5a <__ultoa_invert+0x86>
    1c3c:	c9 f7       	brne	.-14     	; 0x1c30 <__ultoa_invert+0x5c>
    1c3e:	f6 cf       	rjmp	.-20     	; 0x1c2c <__ultoa_invert+0x58>
    1c40:	46 2f       	mov	r20, r22
    1c42:	4f 70       	andi	r20, 0x0F	; 15
    1c44:	40 5d       	subi	r20, 0xD0	; 208
    1c46:	4a 33       	cpi	r20, 0x3A	; 58
    1c48:	18 f0       	brcs	.+6      	; 0x1c50 <__ultoa_invert+0x7c>
    1c4a:	49 5d       	subi	r20, 0xD9	; 217
    1c4c:	31 fd       	sbrc	r19, 1
    1c4e:	40 52       	subi	r20, 0x20	; 32
    1c50:	41 93       	st	Z+, r20
    1c52:	02 d0       	rcall	.+4      	; 0x1c58 <__ultoa_invert+0x84>
    1c54:	a9 f7       	brne	.-22     	; 0x1c40 <__ultoa_invert+0x6c>
    1c56:	ea cf       	rjmp	.-44     	; 0x1c2c <__ultoa_invert+0x58>
    1c58:	b4 e0       	ldi	r27, 0x04	; 4
    1c5a:	a6 95       	lsr	r26
    1c5c:	97 95       	ror	r25
    1c5e:	87 95       	ror	r24
    1c60:	77 95       	ror	r23
    1c62:	67 95       	ror	r22
    1c64:	ba 95       	dec	r27
    1c66:	c9 f7       	brne	.-14     	; 0x1c5a <__ultoa_invert+0x86>
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	61 05       	cpc	r22, r1
    1c6c:	71 05       	cpc	r23, r1
    1c6e:	08 95       	ret
    1c70:	9b 01       	movw	r18, r22
    1c72:	ac 01       	movw	r20, r24
    1c74:	0a 2e       	mov	r0, r26
    1c76:	06 94       	lsr	r0
    1c78:	57 95       	ror	r21
    1c7a:	47 95       	ror	r20
    1c7c:	37 95       	ror	r19
    1c7e:	27 95       	ror	r18
    1c80:	ba 95       	dec	r27
    1c82:	c9 f7       	brne	.-14     	; 0x1c76 <__ultoa_invert+0xa2>
    1c84:	62 0f       	add	r22, r18
    1c86:	73 1f       	adc	r23, r19
    1c88:	84 1f       	adc	r24, r20
    1c8a:	95 1f       	adc	r25, r21
    1c8c:	a0 1d       	adc	r26, r0
    1c8e:	08 95       	ret

00001c90 <__prologue_saves__>:
    1c90:	2f 92       	push	r2
    1c92:	3f 92       	push	r3
    1c94:	4f 92       	push	r4
    1c96:	5f 92       	push	r5
    1c98:	6f 92       	push	r6
    1c9a:	7f 92       	push	r7
    1c9c:	8f 92       	push	r8
    1c9e:	9f 92       	push	r9
    1ca0:	af 92       	push	r10
    1ca2:	bf 92       	push	r11
    1ca4:	cf 92       	push	r12
    1ca6:	df 92       	push	r13
    1ca8:	ef 92       	push	r14
    1caa:	ff 92       	push	r15
    1cac:	0f 93       	push	r16
    1cae:	1f 93       	push	r17
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	ca 1b       	sub	r28, r26
    1cba:	db 0b       	sbc	r29, r27
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	de bf       	out	0x3e, r29	; 62
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	cd bf       	out	0x3d, r28	; 61
    1cc6:	09 94       	ijmp

00001cc8 <__epilogue_restores__>:
    1cc8:	2a 88       	ldd	r2, Y+18	; 0x12
    1cca:	39 88       	ldd	r3, Y+17	; 0x11
    1ccc:	48 88       	ldd	r4, Y+16	; 0x10
    1cce:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cda:	b9 84       	ldd	r11, Y+9	; 0x09
    1cdc:	c8 84       	ldd	r12, Y+8	; 0x08
    1cde:	df 80       	ldd	r13, Y+7	; 0x07
    1ce0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ce2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ce4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ce6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ce8:	aa 81       	ldd	r26, Y+2	; 0x02
    1cea:	b9 81       	ldd	r27, Y+1	; 0x01
    1cec:	ce 0f       	add	r28, r30
    1cee:	d1 1d       	adc	r29, r1
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	de bf       	out	0x3e, r29	; 62
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	cd bf       	out	0x3d, r28	; 61
    1cfa:	ed 01       	movw	r28, r26
    1cfc:	08 95       	ret

00001cfe <_exit>:
    1cfe:	f8 94       	cli

00001d00 <__stop_program>:
    1d00:	ff cf       	rjmp	.-2      	; 0x1d00 <__stop_program>
