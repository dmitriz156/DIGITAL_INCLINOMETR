
DI-601_MPU-6050.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001db2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001db2  00001e46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a6  00800088  00800088  00001e6e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001ecc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003d63  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca9  00000000  00000000  00005eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019f9  00000000  00000000  00006b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d88  00000000  00000000  00008590  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a33  00000000  00000000  00009318  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000046e8  00000000  00000000  0000ad4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  0000f433  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
       4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
       6:	da c4       	rjmp	.+2484   	; 0x9bc <__vector_3>
       8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
       a:	3f c0       	rjmp	.+126    	; 0x8a <__bad_interrupt>
       c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
       e:	3d c0       	rjmp	.+122    	; 0x8a <__bad_interrupt>
      10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
      12:	3b c0       	rjmp	.+118    	; 0x8a <__bad_interrupt>
      14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
      16:	0a c5       	rjmp	.+2580   	; 0xa2c <__vector_11>
      18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
      1a:	34 c5       	rjmp	.+2664   	; 0xa84 <__vector_13>
      1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
      1e:	35 c0       	rjmp	.+106    	; 0x8a <__bad_interrupt>
      20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
      22:	33 c0       	rjmp	.+102    	; 0x8a <__bad_interrupt>
      24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
      26:	08 4a       	sbci	r16, 0xA8	; 168
      28:	d7 3b       	cpi	r29, 0xB7	; 183
      2a:	3b ce       	rjmp	.-906    	; 0xfffffca2 <__eeprom_end+0xff7efca2>
      2c:	01 6e       	ori	r16, 0xE1	; 225
      2e:	84 bc       	out	0x24, r8	; 36
      30:	bf fd       	.word	0xfdbf	; ????
      32:	c1 2f       	mov	r28, r17
      34:	3d 6c       	ori	r19, 0xCD	; 205
      36:	74 31       	cpi	r23, 0x14	; 20
      38:	9a bd       	out	0x2a, r25	; 42
      3a:	56 83       	std	Z+6, r21	; 0x06
      3c:	3d da       	rcall	.-2950   	; 0xfffff4b8 <__eeprom_end+0xff7ef4b8>
      3e:	3d 00       	.word	0x003d	; ????
      40:	c7 7f       	andi	r28, 0xF7	; 247
      42:	11 be       	out	0x31, r1	; 49
      44:	d9 e4       	ldi	r29, 0x49	; 73
      46:	bb 4c       	sbci	r27, 0xCB	; 203
      48:	3e 91       	ld	r19, -X
      4a:	6b aa       	std	Y+51, r6	; 0x33
      4c:	aa be       	out	0x3a, r10	; 58
      4e:	00 00       	nop
      50:	00 80       	ld	r0, Z
      52:	3f 00       	.word	0x003f	; ????

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 32       	cpi	r26, 0x2E	; 46
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	a9 d5       	rcall	.+2898   	; 0xbda <main>
      88:	92 ce       	rjmp	.-732    	; 0xfffffdae <__eeprom_end+0xff7efdae>

0000008a <__bad_interrupt>:
      8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <I2C_BeginTransmission>:
	}
	
	return i2c_status;
	
	/* Function End */
}
      8c:	24 ea       	ldi	r18, 0xA4	; 164
      8e:	26 bf       	out	0x36, r18	; 54
      90:	06 b6       	in	r0, 0x36	; 54
      92:	07 fc       	sbrc	r0, 7
      94:	0e c0       	rjmp	.+28     	; 0xb2 <I2C_BeginTransmission+0x26>
      96:	00 97       	sbiw	r24, 0x00	; 0
      98:	61 f0       	breq	.+24     	; 0xb2 <I2C_BeginTransmission+0x26>
      9a:	e9 ef       	ldi	r30, 0xF9	; 249
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	31 97       	sbiw	r30, 0x01	; 1
      a0:	f1 f7       	brne	.-4      	; 0x9e <I2C_BeginTransmission+0x12>
      a2:	00 c0       	rjmp	.+0      	; 0xa4 <I2C_BeginTransmission+0x18>
      a4:	00 00       	nop
      a6:	01 97       	sbiw	r24, 0x01	; 1
      a8:	06 b6       	in	r0, 0x36	; 54
      aa:	07 fc       	sbrc	r0, 7
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <I2C_BeginTransmission+0x26>
      ae:	00 97       	sbiw	r24, 0x00	; 0
      b0:	a1 f7       	brne	.-24     	; 0x9a <I2C_BeginTransmission+0xe>
      b2:	81 b1       	in	r24, 0x01	; 1
      b4:	88 7f       	andi	r24, 0xF8	; 248
      b6:	08 95       	ret

000000b8 <I2C_Transmit>:
      b8:	83 b9       	out	0x03, r24	; 3
      ba:	84 e8       	ldi	r24, 0x84	; 132
      bc:	86 bf       	out	0x36, r24	; 54
      be:	06 b6       	in	r0, 0x36	; 54
      c0:	07 fc       	sbrc	r0, 7
      c2:	11 c0       	rjmp	.+34     	; 0xe6 <I2C_Transmit+0x2e>
      c4:	61 15       	cp	r22, r1
      c6:	71 05       	cpc	r23, r1
      c8:	71 f0       	breq	.+28     	; 0xe6 <I2C_Transmit+0x2e>
      ca:	89 ef       	ldi	r24, 0xF9	; 249
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	01 97       	sbiw	r24, 0x01	; 1
      d0:	f1 f7       	brne	.-4      	; 0xce <I2C_Transmit+0x16>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <I2C_Transmit+0x1c>
      d4:	00 00       	nop
      d6:	61 50       	subi	r22, 0x01	; 1
      d8:	71 09       	sbc	r23, r1
      da:	06 b6       	in	r0, 0x36	; 54
      dc:	07 fc       	sbrc	r0, 7
      de:	03 c0       	rjmp	.+6      	; 0xe6 <I2C_Transmit+0x2e>
      e0:	61 15       	cp	r22, r1
      e2:	71 05       	cpc	r23, r1
      e4:	91 f7       	brne	.-28     	; 0xca <I2C_Transmit+0x12>
      e6:	81 b1       	in	r24, 0x01	; 1
      e8:	88 7f       	andi	r24, 0xF8	; 248
      ea:	08 95       	ret

000000ec <I2C_ReceiveACK>:
      ec:	24 ec       	ldi	r18, 0xC4	; 196
      ee:	26 bf       	out	0x36, r18	; 54
      f0:	06 b6       	in	r0, 0x36	; 54
      f2:	07 fc       	sbrc	r0, 7
      f4:	0e c0       	rjmp	.+28     	; 0x112 <I2C_ReceiveACK+0x26>
      f6:	00 97       	sbiw	r24, 0x00	; 0
      f8:	61 f0       	breq	.+24     	; 0x112 <I2C_ReceiveACK+0x26>
      fa:	e9 ef       	ldi	r30, 0xF9	; 249
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	31 97       	sbiw	r30, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <I2C_ReceiveACK+0x12>
     102:	00 c0       	rjmp	.+0      	; 0x104 <I2C_ReceiveACK+0x18>
     104:	00 00       	nop
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	06 b6       	in	r0, 0x36	; 54
     10a:	07 fc       	sbrc	r0, 7
     10c:	02 c0       	rjmp	.+4      	; 0x112 <I2C_ReceiveACK+0x26>
     10e:	00 97       	sbiw	r24, 0x00	; 0
     110:	a1 f7       	brne	.-24     	; 0xfa <I2C_ReceiveACK+0xe>
     112:	83 b1       	in	r24, 0x03	; 3
     114:	08 95       	ret

00000116 <I2C_ReceiveNACK>:
     116:	24 e8       	ldi	r18, 0x84	; 132
     118:	26 bf       	out	0x36, r18	; 54
     11a:	06 b6       	in	r0, 0x36	; 54
     11c:	07 fc       	sbrc	r0, 7
     11e:	0e c0       	rjmp	.+28     	; 0x13c <I2C_ReceiveNACK+0x26>
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	61 f0       	breq	.+24     	; 0x13c <I2C_ReceiveNACK+0x26>
     124:	e9 ef       	ldi	r30, 0xF9	; 249
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	31 97       	sbiw	r30, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <I2C_ReceiveNACK+0x12>
     12c:	00 c0       	rjmp	.+0      	; 0x12e <I2C_ReceiveNACK+0x18>
     12e:	00 00       	nop
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	06 b6       	in	r0, 0x36	; 54
     134:	07 fc       	sbrc	r0, 7
     136:	02 c0       	rjmp	.+4      	; 0x13c <I2C_ReceiveNACK+0x26>
     138:	00 97       	sbiw	r24, 0x00	; 0
     13a:	a1 f7       	brne	.-24     	; 0x124 <I2C_ReceiveNACK+0xe>
     13c:	83 b1       	in	r24, 0x03	; 3
     13e:	08 95       	ret

00000140 <I2C_EndTransmission>:
     140:	24 e9       	ldi	r18, 0x94	; 148
     142:	26 bf       	out	0x36, r18	; 54
     144:	06 b6       	in	r0, 0x36	; 54
     146:	04 fe       	sbrs	r0, 4
     148:	0e c0       	rjmp	.+28     	; 0x166 <I2C_EndTransmission+0x26>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	61 f0       	breq	.+24     	; 0x166 <I2C_EndTransmission+0x26>
     14e:	e9 ef       	ldi	r30, 0xF9	; 249
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	31 97       	sbiw	r30, 0x01	; 1
     154:	f1 f7       	brne	.-4      	; 0x152 <I2C_EndTransmission+0x12>
     156:	00 c0       	rjmp	.+0      	; 0x158 <I2C_EndTransmission+0x18>
     158:	00 00       	nop
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	06 b6       	in	r0, 0x36	; 54
     15e:	04 fe       	sbrs	r0, 4
     160:	02 c0       	rjmp	.+4      	; 0x166 <I2C_EndTransmission+0x26>
     162:	00 97       	sbiw	r24, 0x00	; 0
     164:	a1 f7       	brne	.-24     	; 0x14e <I2C_EndTransmission+0xe>
     166:	08 95       	ret

00000168 <I2C_Init>:
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	81 b9       	out	0x01, r24	; 1
     16c:	89 ef       	ldi	r24, 0xF9	; 249
     16e:	80 b9       	out	0x00, r24	; 0
     170:	84 e0       	ldi	r24, 0x04	; 4
     172:	86 bf       	out	0x36, r24	; 54
     174:	08 95       	ret

00000176 <I2C_IsDeviceReady>:
     176:	df 92       	push	r13
     178:	ef 92       	push	r14
     17a:	ff 92       	push	r15
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	d8 2e       	mov	r13, r24
     186:	eb 01       	movw	r28, r22
     188:	8a 01       	movw	r16, r20
     18a:	20 97       	sbiw	r28, 0x00	; 0
     18c:	99 f0       	breq	.+38     	; 0x1b4 <I2C_IsDeviceReady+0x3e>
     18e:	e1 2c       	mov	r14, r1
     190:	f1 2c       	mov	r15, r1
     192:	c8 01       	movw	r24, r16
     194:	7b df       	rcall	.-266    	; 0x8c <I2C_BeginTransmission>
     196:	88 30       	cpi	r24, 0x08	; 8
     198:	19 f4       	brne	.+6      	; 0x1a0 <I2C_IsDeviceReady+0x2a>
     19a:	b8 01       	movw	r22, r16
     19c:	8d 2d       	mov	r24, r13
     19e:	8c df       	rcall	.-232    	; 0xb8 <I2C_Transmit>
     1a0:	88 31       	cpi	r24, 0x18	; 24
     1a2:	29 f4       	brne	.+10     	; 0x1ae <I2C_IsDeviceReady+0x38>
     1a4:	c8 01       	movw	r24, r16
     1a6:	cc df       	rcall	.-104    	; 0x140 <I2C_EndTransmission>
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	e8 1a       	sub	r14, r24
     1ac:	f8 0a       	sbc	r15, r24
     1ae:	21 97       	sbiw	r28, 0x01	; 1
     1b0:	81 f7       	brne	.-32     	; 0x192 <I2C_IsDeviceReady+0x1c>
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <I2C_IsDeviceReady+0x42>
     1b4:	e1 2c       	mov	r14, r1
     1b6:	f1 2c       	mov	r15, r1
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	ef 28       	or	r14, r15
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <I2C_IsDeviceReady+0x4a>
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	ff 90       	pop	r15
     1ca:	ef 90       	pop	r14
     1cc:	df 90       	pop	r13
     1ce:	08 95       	ret

000001d0 <I2C_Mem_Write>:
					com_stat = I2C_Master_Receive(0xD2,my_received_data,5,100); (0xD2 : Device Address)
			
*/

StatusTypeDef I2C_Mem_Write(uint8_t dev_address , uint32_t mem_address , uint8_t mem_add_size , uint8_t *mem_data , uint32_t quantity , uint16_t time_out) /* This function is for write data to external memory */
{
     1d0:	2f 92       	push	r2
     1d2:	3f 92       	push	r3
     1d4:	4f 92       	push	r4
     1d6:	5f 92       	push	r5
     1d8:	6f 92       	push	r6
     1da:	7f 92       	push	r7
     1dc:	8f 92       	push	r8
     1de:	9f 92       	push	r9
     1e0:	af 92       	push	r10
     1e2:	bf 92       	push	r11
     1e4:	cf 92       	push	r12
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	c8 2f       	mov	r28, r24
     1f6:	2a 01       	movw	r4, r20
     1f8:	3b 01       	movw	r6, r22
     1fa:	d2 2f       	mov	r29, r18
     1fc:	15 01       	movw	r2, r10
	uint32_t write_quantity = quantity; /* Variable for check write quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
	
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	if ( I2C_IsDeviceReady(dev_address , 1 , time_out) == _TRUE ) /* target device is ready */
     1fe:	a5 01       	movw	r20, r10
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	b8 df       	rcall	.-144    	; 0x176 <I2C_IsDeviceReady>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	09 f0       	breq	.+2      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
     20a:	96 c0       	rjmp	.+300    	; 0x338 <__EEPROM_REGION_LENGTH__+0x138>
	{
		
		i2c_status = I2C_BeginTransmission(time_out); /* Begin Transmission */
     20c:	c5 01       	movw	r24, r10
     20e:	3e df       	rcall	.-388    	; 0x8c <I2C_BeginTransmission>
		
		/* --------------------------------- */
		
		if ( mem_add_size == _I2C_MEMADD_SIZE_8BIT ) /* Check memory address size */
     210:	d8 30       	cpi	r29, 0x08	; 8
     212:	41 f5       	brne	.+80     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     214:	88 30       	cpi	r24, 0x08	; 8
     216:	99 f4       	brne	.+38     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_8BIT) & _P0_BIT_SEL_MEMADD_SIZE_8BIT)) , time_out); /* Send Device Address */
     218:	d3 01       	movw	r26, r6
     21a:	c2 01       	movw	r24, r4
     21c:	68 94       	set
     21e:	16 f8       	bld	r1, 6
     220:	b6 95       	lsr	r27
     222:	a7 95       	ror	r26
     224:	97 95       	ror	r25
     226:	87 95       	ror	r24
     228:	16 94       	lsr	r1
     22a:	d1 f7       	brne	.-12     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
     22c:	8e 70       	andi	r24, 0x0E	; 14
     22e:	b5 01       	movw	r22, r10
     230:	8c 2b       	or	r24, r28
     232:	42 df       	rcall	.-380    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     234:	81 2c       	mov	r8, r1
     236:	91 2c       	mov	r9, r1
     238:	54 01       	movw	r10, r8
     23a:	83 94       	inc	r8
     23c:	03 c0       	rjmp	.+6      	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t write_quantity = quantity; /* Variable for check write quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     23e:	81 2c       	mov	r8, r1
     240:	91 2c       	mov	r9, r1
     242:	54 01       	movw	r10, r8
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     244:	88 31       	cpi	r24, 0x18	; 24
     246:	41 f4       	brne	.+16     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     248:	b1 01       	movw	r22, r2
     24a:	84 2d       	mov	r24, r4
     24c:	35 df       	rcall	.-406    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     24e:	9f ef       	ldi	r25, 0xFF	; 255
     250:	89 1a       	sub	r8, r25
     252:	99 0a       	sbc	r9, r25
     254:	a9 0a       	sbc	r10, r25
     256:	b9 0a       	sbc	r11, r25
			
		}
		
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
     258:	c1 14       	cp	r12, r1
     25a:	d1 04       	cpc	r13, r1
     25c:	e1 04       	cpc	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	81 f5       	brne	.+96     	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
     262:	43 c0       	rjmp	.+134    	; 0x2ea <__EEPROM_REGION_LENGTH__+0xea>
			
		}
		else
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     264:	88 30       	cpi	r24, 0x08	; 8
     266:	a1 f4       	brne	.+40     	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_16BIT) & _P0_BIT_SEL_MEMADD_SIZE_16BIT)) , time_out); /* Send Device Address */
     268:	d3 01       	movw	r26, r6
     26a:	c2 01       	movw	r24, r4
     26c:	07 2e       	mov	r0, r23
     26e:	7f e0       	ldi	r23, 0x0F	; 15
     270:	b6 95       	lsr	r27
     272:	a7 95       	ror	r26
     274:	97 95       	ror	r25
     276:	87 95       	ror	r24
     278:	7a 95       	dec	r23
     27a:	d1 f7       	brne	.-12     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
     27c:	70 2d       	mov	r23, r0
     27e:	82 70       	andi	r24, 0x02	; 2
     280:	b5 01       	movw	r22, r10
     282:	8c 2b       	or	r24, r28
     284:	19 df       	rcall	.-462    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     286:	81 2c       	mov	r8, r1
     288:	91 2c       	mov	r9, r1
     28a:	54 01       	movw	r10, r8
     28c:	83 94       	inc	r8
     28e:	03 c0       	rjmp	.+6      	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t write_quantity = quantity; /* Variable for check write quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     290:	81 2c       	mov	r8, r1
     292:	91 2c       	mov	r9, r1
     294:	54 01       	movw	r10, r8
			}
			else{}
				
			/* ~~~~~~~~~~~~ Send MSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* SLA+W has been transmitted, and ACK has been received. */
     296:	88 31       	cpi	r24, 0x18	; 24
     298:	41 f4       	brne	.+16     	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
			{
				i2c_status = I2C_Transmit( (uint8_t)(mem_address >> _BYTE_SHIFT_VAL) , time_out); /* Send first memory Address */
     29a:	b1 01       	movw	r22, r2
     29c:	85 2d       	mov	r24, r5
     29e:	0c df       	rcall	.-488    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     2a0:	ef ef       	ldi	r30, 0xFF	; 255
     2a2:	8e 1a       	sub	r8, r30
     2a4:	9e 0a       	sbc	r9, r30
     2a6:	ae 0a       	sbc	r10, r30
     2a8:	be 0a       	sbc	r11, r30
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     2aa:	88 32       	cpi	r24, 0x28	; 40
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
     2ae:	48 c0       	rjmp	.+144    	; 0x340 <__EEPROM_REGION_LENGTH__+0x140>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     2b0:	b1 01       	movw	r22, r2
     2b2:	84 2d       	mov	r24, r4
     2b4:	01 df       	rcall	.-510    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     2b6:	ff ef       	ldi	r31, 0xFF	; 255
     2b8:	8f 1a       	sub	r8, r31
     2ba:	9f 0a       	sbc	r9, r31
     2bc:	af 0a       	sbc	r10, r31
     2be:	bf 0a       	sbc	r11, r31
     2c0:	cb cf       	rjmp	.-106    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_16BIT) & _P0_BIT_SEL_MEMADD_SIZE_16BIT)) , time_out); /* Send Device Address */
				step_check++; /* The step is completed */
     2c2:	26 01       	movw	r4, r12
     2c4:	37 01       	movw	r6, r14
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
		{
			
			if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* DATA has been transmitted, and ACK has been received. */
     2c6:	88 32       	cpi	r24, 0x28	; 40
     2c8:	51 f4       	brne	.+20     	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
			{
				
				i2c_status = I2C_Transmit( *mem_data , time_out ); /* Send data to memory */
     2ca:	b1 01       	movw	r22, r2
     2cc:	f8 01       	movw	r30, r16
     2ce:	81 91       	ld	r24, Z+
     2d0:	8f 01       	movw	r16, r30
     2d2:	f2 de       	rcall	.-540    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     2d4:	ff ef       	ldi	r31, 0xFF	; 255
     2d6:	8f 1a       	sub	r8, r31
     2d8:	9f 0a       	sbc	r9, r31
     2da:	af 0a       	sbc	r10, r31
     2dc:	bf 0a       	sbc	r11, r31
			
		}
		
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	49 1a       	sub	r4, r25
     2e2:	51 08       	sbc	r5, r1
     2e4:	61 08       	sbc	r6, r1
     2e6:	71 08       	sbc	r7, r1
     2e8:	71 f7       	brne	.-36     	; 0x2c6 <__EEPROM_REGION_LENGTH__+0xc6>
			
		}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* DATA has been transmitted, and ACK has been received. */
     2ea:	88 32       	cpi	r24, 0x28	; 40
     2ec:	39 f4       	brne	.+14     	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
		{
			I2C_EndTransmission(time_out); /* End Transmission */
     2ee:	c1 01       	movw	r24, r2
     2f0:	27 df       	rcall	.-434    	; 0x140 <I2C_EndTransmission>
			step_check++; /* The step is completed */
     2f2:	ef ef       	ldi	r30, 0xFF	; 255
     2f4:	8e 1a       	sub	r8, r30
     2f6:	9e 0a       	sbc	r9, r30
     2f8:	ae 0a       	sbc	r10, r30
     2fa:	be 0a       	sbc	r11, r30
		}
		else{}
		
		/* --------------------------------- */
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_WRITE_STEPS - 1) + write_quantity)) ) /* The steps are complete */
     2fc:	d8 30       	cpi	r29, 0x08	; 8
     2fe:	69 f4       	brne	.+26     	; 0x31a <__EEPROM_REGION_LENGTH__+0x11a>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_WRITE_STEPS + write_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
     300:	f3 e0       	ldi	r31, 0x03	; 3
     302:	cf 0e       	add	r12, r31
     304:	d1 1c       	adc	r13, r1
     306:	e1 1c       	adc	r14, r1
     308:	f1 1c       	adc	r15, r1
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	c8 14       	cp	r12, r8
     30e:	d9 04       	cpc	r13, r9
     310:	ea 04       	cpc	r14, r10
     312:	fb 04       	cpc	r15, r11
     314:	e1 f0       	breq	.+56     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	1a c0       	rjmp	.+52     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_WRITE_STEPS - 1) + write_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_WRITE_STEPS + write_quantity)) ) /* The steps are complete */
     31a:	d0 31       	cpi	r29, 0x10	; 16
     31c:	79 f4       	brne	.+30     	; 0x33c <__EEPROM_REGION_LENGTH__+0x13c>
		{
			i2c_status = _STAT_OK; /* Set status */
     31e:	84 e0       	ldi	r24, 0x04	; 4
     320:	c8 0e       	add	r12, r24
     322:	d1 1c       	adc	r13, r1
     324:	e1 1c       	adc	r14, r1
     326:	f1 1c       	adc	r15, r1
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	c8 14       	cp	r12, r8
     32c:	d9 04       	cpc	r13, r9
     32e:	ea 04       	cpc	r14, r10
     330:	fb 04       	cpc	r15, r11
     332:	69 f0       	breq	.+26     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	0b c0       	rjmp	.+22     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
		}
		
	}
	else
	{
		i2c_status = _STAT_ERROR; /* Set status */
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	09 c0       	rjmp	.+18     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else
		{
			i2c_status = _STAT_ERROR; /* Set status */
     33c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		i2c_status = _STAT_ERROR; /* Set status */
	}
	
	return i2c_status;
     33e:	07 c0       	rjmp	.+14     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
			
		}
		
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
     340:	c1 14       	cp	r12, r1
     342:	d1 04       	cpc	r13, r1
     344:	e1 04       	cpc	r14, r1
     346:	f1 04       	cpc	r15, r1
     348:	09 f0       	breq	.+2      	; 0x34c <__EEPROM_REGION_LENGTH__+0x14c>
     34a:	bb cf       	rjmp	.-138    	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
     34c:	e6 cf       	rjmp	.-52     	; 0x31a <__EEPROM_REGION_LENGTH__+0x11a>
	}
	
	return i2c_status;
	
	/* Function End */
}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	df 90       	pop	r13
     35c:	cf 90       	pop	r12
     35e:	bf 90       	pop	r11
     360:	af 90       	pop	r10
     362:	9f 90       	pop	r9
     364:	8f 90       	pop	r8
     366:	7f 90       	pop	r7
     368:	6f 90       	pop	r6
     36a:	5f 90       	pop	r5
     36c:	4f 90       	pop	r4
     36e:	3f 90       	pop	r3
     370:	2f 90       	pop	r2
     372:	08 95       	ret

00000374 <I2C_Mem_Read>:
					com_stat = I2C_Mem_Write(0xA0 , 75 , _I2C_MEMADD_SIZE_16BIT , my_data , 20 , 100); (0xA0 : Device Address)
			
*/

StatusTypeDef I2C_Mem_Read(uint8_t dev_address , uint32_t mem_address , uint8_t mem_add_size , uint8_t *mem_data , uint32_t quantity , uint16_t time_out ) /* This function is for read data from external memory */
{
     374:	2f 92       	push	r2
     376:	3f 92       	push	r3
     378:	4f 92       	push	r4
     37a:	5f 92       	push	r5
     37c:	6f 92       	push	r6
     37e:	7f 92       	push	r7
     380:	8f 92       	push	r8
     382:	9f 92       	push	r9
     384:	af 92       	push	r10
     386:	bf 92       	push	r11
     388:	cf 92       	push	r12
     38a:	df 92       	push	r13
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	c8 2f       	mov	r28, r24
     39a:	2a 01       	movw	r4, r20
     39c:	3b 01       	movw	r6, r22
     39e:	d2 2f       	mov	r29, r18
     3a0:	15 01       	movw	r2, r10
	uint32_t read_quantity = quantity; /* Variable for check read quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
	
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	if ( I2C_IsDeviceReady(dev_address , 1 , time_out) == _TRUE ) /* target device is ready */
     3a2:	a5 01       	movw	r20, r10
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	e6 de       	rcall	.-564    	; 0x176 <I2C_IsDeviceReady>
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <I2C_Mem_Read+0x3c>
     3ae:	c1 c0       	rjmp	.+386    	; 0x532 <__stack+0xd3>
	{
		
		i2c_status = I2C_BeginTransmission(time_out); /* Begin Transmission */
     3b0:	c5 01       	movw	r24, r10
     3b2:	6c de       	rcall	.-808    	; 0x8c <I2C_BeginTransmission>
		
		/* --------------------------------- */
		
		if ( mem_add_size == _I2C_MEMADD_SIZE_8BIT ) /* Check memory address size */
     3b4:	d8 30       	cpi	r29, 0x08	; 8
     3b6:	19 f5       	brne	.+70     	; 0x3fe <I2C_Mem_Read+0x8a>
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     3b8:	88 30       	cpi	r24, 0x08	; 8
     3ba:	99 f4       	brne	.+38     	; 0x3e2 <I2C_Mem_Read+0x6e>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_8BIT) & _P0_BIT_SEL_MEMADD_SIZE_8BIT)) , time_out ); /* Send device Address */
     3bc:	d3 01       	movw	r26, r6
     3be:	c2 01       	movw	r24, r4
     3c0:	68 94       	set
     3c2:	16 f8       	bld	r1, 6
     3c4:	b6 95       	lsr	r27
     3c6:	a7 95       	ror	r26
     3c8:	97 95       	ror	r25
     3ca:	87 95       	ror	r24
     3cc:	16 94       	lsr	r1
     3ce:	d1 f7       	brne	.-12     	; 0x3c4 <I2C_Mem_Read+0x50>
     3d0:	8e 70       	andi	r24, 0x0E	; 14
     3d2:	b5 01       	movw	r22, r10
     3d4:	8c 2b       	or	r24, r28
     3d6:	70 de       	rcall	.-800    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     3d8:	81 2c       	mov	r8, r1
     3da:	91 2c       	mov	r9, r1
     3dc:	54 01       	movw	r10, r8
     3de:	83 94       	inc	r8
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <I2C_Mem_Read+0x74>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t read_quantity = quantity; /* Variable for check read quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     3e2:	81 2c       	mov	r8, r1
     3e4:	91 2c       	mov	r9, r1
     3e6:	54 01       	movw	r10, r8
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     3e8:	88 31       	cpi	r24, 0x18	; 24
     3ea:	b1 f5       	brne	.+108    	; 0x458 <__DATA_REGION_LENGTH__+0x58>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     3ec:	b1 01       	movw	r22, r2
     3ee:	84 2d       	mov	r24, r4
     3f0:	63 de       	rcall	.-826    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     3f2:	9f ef       	ldi	r25, 0xFF	; 255
     3f4:	89 1a       	sub	r8, r25
     3f6:	99 0a       	sbc	r9, r25
     3f8:	a9 0a       	sbc	r10, r25
     3fa:	b9 0a       	sbc	r11, r25
     3fc:	2d c0       	rjmp	.+90     	; 0x458 <__DATA_REGION_LENGTH__+0x58>
			
		}
		else
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     3fe:	88 30       	cpi	r24, 0x08	; 8
     400:	a1 f4       	brne	.+40     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_16BIT) & _P0_BIT_SEL_MEMADD_SIZE_16BIT)) , time_out ); /* Send device Address */
     402:	d3 01       	movw	r26, r6
     404:	c2 01       	movw	r24, r4
     406:	07 2e       	mov	r0, r23
     408:	7f e0       	ldi	r23, 0x0F	; 15
     40a:	b6 95       	lsr	r27
     40c:	a7 95       	ror	r26
     40e:	97 95       	ror	r25
     410:	87 95       	ror	r24
     412:	7a 95       	dec	r23
     414:	d1 f7       	brne	.-12     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
     416:	70 2d       	mov	r23, r0
     418:	82 70       	andi	r24, 0x02	; 2
     41a:	b5 01       	movw	r22, r10
     41c:	8c 2b       	or	r24, r28
     41e:	4c de       	rcall	.-872    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     420:	81 2c       	mov	r8, r1
     422:	91 2c       	mov	r9, r1
     424:	54 01       	movw	r10, r8
     426:	83 94       	inc	r8
     428:	03 c0       	rjmp	.+6      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t read_quantity = quantity; /* Variable for check read quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     42a:	81 2c       	mov	r8, r1
     42c:	91 2c       	mov	r9, r1
     42e:	54 01       	movw	r10, r8
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send MSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* SLA+W has been transmitted, and ACK has been received. */
     430:	88 31       	cpi	r24, 0x18	; 24
     432:	41 f4       	brne	.+16     	; 0x444 <__DATA_REGION_LENGTH__+0x44>
			{
				i2c_status = I2C_Transmit( (uint8_t)(mem_address >> _BYTE_SHIFT_VAL) , time_out); /* Send first memory Address */
     434:	b1 01       	movw	r22, r2
     436:	85 2d       	mov	r24, r5
     438:	3f de       	rcall	.-898    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     43a:	ef ef       	ldi	r30, 0xFF	; 255
     43c:	8e 1a       	sub	r8, r30
     43e:	9e 0a       	sbc	r9, r30
     440:	ae 0a       	sbc	r10, r30
     442:	be 0a       	sbc	r11, r30
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     444:	88 32       	cpi	r24, 0x28	; 40
     446:	89 f4       	brne	.+34     	; 0x46a <__stack+0xb>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     448:	b1 01       	movw	r22, r2
     44a:	84 2d       	mov	r24, r4
     44c:	35 de       	rcall	.-918    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     44e:	ff ef       	ldi	r31, 0xFF	; 255
     450:	8f 1a       	sub	r8, r31
     452:	9f 0a       	sbc	r9, r31
     454:	af 0a       	sbc	r10, r31
     456:	bf 0a       	sbc	r11, r31
			
		}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* DATA has been transmitted, and ACK has been received. */
     458:	88 32       	cpi	r24, 0x28	; 40
     45a:	39 f4       	brne	.+14     	; 0x46a <__stack+0xb>
		{
			i2c_status = I2C_BeginTransmission(time_out); /* Repeat Start */
     45c:	c1 01       	movw	r24, r2
     45e:	16 de       	rcall	.-980    	; 0x8c <I2C_BeginTransmission>
			step_check++; /* The step is completed */
     460:	9f ef       	ldi	r25, 0xFF	; 255
     462:	89 1a       	sub	r8, r25
     464:	99 0a       	sbc	r9, r25
     466:	a9 0a       	sbc	r10, r25
     468:	b9 0a       	sbc	r11, r25
		}
		else{}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MT_REP_START_TRANSMITTED ) /* A repeated START condition has been transmitted */
     46a:	80 31       	cpi	r24, 0x10	; 16
     46c:	49 f4       	brne	.+18     	; 0x480 <__stack+0x21>
		{
			i2c_status = I2C_Transmit( (dev_address | _DEVICE_READ) , time_out ); /* Send device Address */
     46e:	b1 01       	movw	r22, r2
     470:	8c 2f       	mov	r24, r28
     472:	81 60       	ori	r24, 0x01	; 1
     474:	21 de       	rcall	.-958    	; 0xb8 <I2C_Transmit>
			step_check++; /* The step is completed */
     476:	ef ef       	ldi	r30, 0xFF	; 255
     478:	8e 1a       	sub	r8, r30
     47a:	9e 0a       	sbc	r9, r30
     47c:	ae 0a       	sbc	r10, r30
     47e:	be 0a       	sbc	r11, r30
		}
		else{}
		
		/* --------------------------------- */
		
		for ( ; quantity > 1 ; quantity-- ) /* Loop for write data to register */
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	cf 16       	cp	r12, r31
     484:	d1 04       	cpc	r13, r1
     486:	e1 04       	cpc	r14, r1
     488:	f1 04       	cpc	r15, r1
     48a:	e8 f0       	brcs	.+58     	; 0x4c6 <__stack+0x67>
     48c:	26 01       	movw	r4, r12
     48e:	37 01       	movw	r6, r14
		{
			
			if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
     490:	98 2f       	mov	r25, r24
     492:	9f 7e       	andi	r25, 0xEF	; 239
     494:	90 34       	cpi	r25, 0x40	; 64
     496:	61 f4       	brne	.+24     	; 0x4b0 <__stack+0x51>
			{
				
				*mem_data = I2C_ReceiveACK(time_out); /* Receive Data with send ACK */
     498:	c1 01       	movw	r24, r2
     49a:	28 de       	rcall	.-944    	; 0xec <I2C_ReceiveACK>
     49c:	f8 01       	movw	r30, r16
     49e:	81 93       	st	Z+, r24
     4a0:	8f 01       	movw	r16, r30
/* ------------------ Functions ------------------ */

uint8_t I2C_Status(void) /* Function for take I2C status */
{
	
	return (_I2C_SR & _I2C_STATUS); /* Return I2C status */
     4a2:	81 b1       	in	r24, 0x01	; 1
     4a4:	88 7f       	andi	r24, 0xF8	; 248
			if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
			{
				
				*mem_data = I2C_ReceiveACK(time_out); /* Receive Data with send ACK */
				i2c_status = I2C_Status(); /* I2C status take */
				step_check++; /* The step is completed */
     4a6:	ff ef       	ldi	r31, 0xFF	; 255
     4a8:	8f 1a       	sub	r8, r31
     4aa:	9f 0a       	sbc	r9, r31
     4ac:	af 0a       	sbc	r10, r31
     4ae:	bf 0a       	sbc	r11, r31
		}
		else{}
		
		/* --------------------------------- */
		
		for ( ; quantity > 1 ; quantity-- ) /* Loop for write data to register */
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	49 1a       	sub	r4, r25
     4b4:	51 08       	sbc	r5, r1
     4b6:	61 08       	sbc	r6, r1
     4b8:	71 08       	sbc	r7, r1
     4ba:	e1 e0       	ldi	r30, 0x01	; 1
     4bc:	4e 16       	cp	r4, r30
     4be:	51 04       	cpc	r5, r1
     4c0:	61 04       	cpc	r6, r1
     4c2:	71 04       	cpc	r7, r1
     4c4:	29 f7       	brne	.-54     	; 0x490 <__stack+0x31>
			
		}
		
		/* --------------------------------- */
		
		if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
     4c6:	98 2f       	mov	r25, r24
     4c8:	9f 7e       	andi	r25, 0xEF	; 239
     4ca:	90 34       	cpi	r25, 0x40	; 64
     4cc:	59 f4       	brne	.+22     	; 0x4e4 <__stack+0x85>
		{
			
			*mem_data = I2C_ReceiveNACK(time_out); /* Receive Data with send NACK */
     4ce:	c1 01       	movw	r24, r2
     4d0:	22 de       	rcall	.-956    	; 0x116 <I2C_ReceiveNACK>
     4d2:	f8 01       	movw	r30, r16
     4d4:	80 83       	st	Z, r24
/* ------------------ Functions ------------------ */

uint8_t I2C_Status(void) /* Function for take I2C status */
{
	
	return (_I2C_SR & _I2C_STATUS); /* Return I2C status */
     4d6:	81 b1       	in	r24, 0x01	; 1
     4d8:	88 7f       	andi	r24, 0xF8	; 248
		if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
		{
			
			*mem_data = I2C_ReceiveNACK(time_out); /* Receive Data with send NACK */
			i2c_status = I2C_Status(); /* I2C status take */
			step_check++; /* The step is completed */
     4da:	ff ef       	ldi	r31, 0xFF	; 255
     4dc:	8f 1a       	sub	r8, r31
     4de:	9f 0a       	sbc	r9, r31
     4e0:	af 0a       	sbc	r10, r31
     4e2:	bf 0a       	sbc	r11, r31
		}
		else{}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MR_DATA_RECEIVED_NACK ) /* Data byte has been received; NOT ACK has been returned */
     4e4:	88 35       	cpi	r24, 0x58	; 88
     4e6:	39 f4       	brne	.+14     	; 0x4f6 <__stack+0x97>
		{
			I2C_EndTransmission(time_out); /* End Transmission */
     4e8:	c1 01       	movw	r24, r2
     4ea:	2a de       	rcall	.-940    	; 0x140 <I2C_EndTransmission>
			step_check++; /* The step is completed */
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	88 1a       	sub	r8, r24
     4f0:	98 0a       	sbc	r9, r24
     4f2:	a8 0a       	sbc	r10, r24
     4f4:	b8 0a       	sbc	r11, r24
		}
		else{}
		
		/* --------------------------------- */
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_READ_STEPS - 1) + read_quantity)) ) /* The steps are complete */
     4f6:	d8 30       	cpi	r29, 0x08	; 8
     4f8:	69 f4       	brne	.+26     	; 0x514 <__stack+0xb5>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_READ_STEPS + read_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
     4fa:	95 e0       	ldi	r25, 0x05	; 5
     4fc:	c9 0e       	add	r12, r25
     4fe:	d1 1c       	adc	r13, r1
     500:	e1 1c       	adc	r14, r1
     502:	f1 1c       	adc	r15, r1
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	c8 14       	cp	r12, r8
     508:	d9 04       	cpc	r13, r9
     50a:	ea 04       	cpc	r14, r10
     50c:	fb 04       	cpc	r15, r11
     50e:	a1 f0       	breq	.+40     	; 0x538 <__stack+0xd9>
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	12 c0       	rjmp	.+36     	; 0x538 <__stack+0xd9>
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_READ_STEPS - 1) + read_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_READ_STEPS + read_quantity)) ) /* The steps are complete */
     514:	d0 31       	cpi	r29, 0x10	; 16
     516:	79 f4       	brne	.+30     	; 0x536 <__stack+0xd7>
		{
			i2c_status = _STAT_OK; /* Set status */
     518:	e6 e0       	ldi	r30, 0x06	; 6
     51a:	ce 0e       	add	r12, r30
     51c:	d1 1c       	adc	r13, r1
     51e:	e1 1c       	adc	r14, r1
     520:	f1 1c       	adc	r15, r1
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	c8 14       	cp	r12, r8
     526:	d9 04       	cpc	r13, r9
     528:	ea 04       	cpc	r14, r10
     52a:	fb 04       	cpc	r15, r11
     52c:	29 f0       	breq	.+10     	; 0x538 <__stack+0xd9>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	03 c0       	rjmp	.+6      	; 0x538 <__stack+0xd9>
		}
		
	}
	else
	{
		i2c_status = _STAT_ERROR; /* Set status */
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	01 c0       	rjmp	.+2      	; 0x538 <__stack+0xd9>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else
		{
			i2c_status = _STAT_ERROR; /* Set status */
     536:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return i2c_status;
	
	/* Function End */
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	bf 90       	pop	r11
     54a:	af 90       	pop	r10
     54c:	9f 90       	pop	r9
     54e:	8f 90       	pop	r8
     550:	7f 90       	pop	r7
     552:	6f 90       	pop	r6
     554:	5f 90       	pop	r5
     556:	4f 90       	pop	r4
     558:	3f 90       	pop	r3
     55a:	2f 90       	pop	r2
     55c:	08 95       	ret

0000055e <float_to_byte>:
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, UART_BUFFER_SIZE, format, args);
	va_end(args);
	UART_Transmit_String(buffer);
}
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	00 d0       	rcall	.+0      	; 0x564 <float_to_byte+0x6>
     564:	00 d0       	rcall	.+0      	; 0x566 <float_to_byte+0x8>
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	69 83       	std	Y+1, r22	; 0x01
     56c:	7a 83       	std	Y+2, r23	; 0x02
     56e:	8b 83       	std	Y+3, r24	; 0x03
     570:	9c 83       	std	Y+4, r25	; 0x04
     572:	fe 01       	movw	r30, r28
     574:	31 96       	adiw	r30, 0x01	; 1
     576:	da 01       	movw	r26, r20
     578:	a2 0f       	add	r26, r18
     57a:	b3 1f       	adc	r27, r19
     57c:	9e 01       	movw	r18, r28
     57e:	2b 5f       	subi	r18, 0xFB	; 251
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	81 91       	ld	r24, Z+
     584:	8d 93       	st	X+, r24
     586:	e2 17       	cp	r30, r18
     588:	f3 07       	cpc	r31, r19
     58a:	d9 f7       	brne	.-10     	; 0x582 <float_to_byte+0x24>
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <kalman_filter>:
     59a:	4f 92       	push	r4
     59c:	5f 92       	push	r5
     59e:	6f 92       	push	r6
     5a0:	7f 92       	push	r7
     5a2:	8f 92       	push	r8
     5a4:	9f 92       	push	r9
     5a6:	af 92       	push	r10
     5a8:	bf 92       	push	r11
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	a0 97       	sbiw	r28, 0x20	; 32
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	6d 87       	std	Y+13, r22	; 0x0d
     5cc:	7e 87       	std	Y+14, r23	; 0x0e
     5ce:	8f 87       	std	Y+15, r24	; 0x0f
     5d0:	98 8b       	std	Y+16, r25	; 0x10
     5d2:	ca 01       	movw	r24, r20
     5d4:	b9 01       	movw	r22, r18
     5d6:	e9 86       	std	Y+9, r14	; 0x09
     5d8:	fa 86       	std	Y+10, r15	; 0x0a
     5da:	0b 87       	std	Y+11, r16	; 0x0b
     5dc:	1c 87       	std	Y+12, r17	; 0x0c
     5de:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <bias.2604>
     5e2:	30 91 9d 00 	lds	r19, 0x009D	; 0x80009d <bias.2604+0x1>
     5e6:	40 91 9e 00 	lds	r20, 0x009E	; 0x80009e <bias.2604+0x2>
     5ea:	50 91 9f 00 	lds	r21, 0x009F	; 0x80009f <bias.2604+0x3>
     5ee:	2d 8b       	std	Y+21, r18	; 0x15
     5f0:	3e 8b       	std	Y+22, r19	; 0x16
     5f2:	4f 8b       	std	Y+23, r20	; 0x17
     5f4:	58 8f       	std	Y+24, r21	; 0x18
     5f6:	82 d6       	rcall	.+3332   	; 0x12fc <__subsf3>
     5f8:	a8 01       	movw	r20, r16
     5fa:	97 01       	movw	r18, r14
     5fc:	90 d8       	rcall	.-3808   	; 0xfffff71e <__eeprom_end+0xff7ef71e>
     5fe:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <angle.2603>
     602:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <angle.2603+0x1>
     606:	40 91 9a 00 	lds	r20, 0x009A	; 0x80009a <angle.2603+0x2>
     60a:	50 91 9b 00 	lds	r21, 0x009B	; 0x80009b <angle.2603+0x3>
     60e:	77 d6       	rcall	.+3310   	; 0x12fe <__addsf3>
     610:	69 8f       	std	Y+25, r22	; 0x19
     612:	7a 8f       	std	Y+26, r23	; 0x1a
     614:	8b 8f       	std	Y+27, r24	; 0x1b
     616:	9c 8f       	std	Y+28, r25	; 0x1c
     618:	c0 90 94 00 	lds	r12, 0x0094	; 0x800094 <__data_end+0xc>
     61c:	d0 90 95 00 	lds	r13, 0x0095	; 0x800095 <__data_end+0xd>
     620:	e0 90 96 00 	lds	r14, 0x0096	; 0x800096 <__data_end+0xe>
     624:	f0 90 97 00 	lds	r15, 0x0097	; 0x800097 <__data_end+0xf>
     628:	a7 01       	movw	r20, r14
     62a:	96 01       	movw	r18, r12
     62c:	69 85       	ldd	r22, Y+9	; 0x09
     62e:	7a 85       	ldd	r23, Y+10	; 0x0a
     630:	8b 85       	ldd	r24, Y+11	; 0x0b
     632:	9c 85       	ldd	r25, Y+12	; 0x0c
     634:	74 d8       	rcall	.-3864   	; 0xfffff71e <__eeprom_end+0xff7ef71e>
     636:	69 83       	std	Y+1, r22	; 0x01
     638:	7a 83       	std	Y+2, r23	; 0x02
     63a:	8b 83       	std	Y+3, r24	; 0x03
     63c:	9c 83       	std	Y+4, r25	; 0x04
     63e:	40 90 8c 00 	lds	r4, 0x008C	; 0x80008c <__data_end+0x4>
     642:	50 90 8d 00 	lds	r5, 0x008D	; 0x80008d <__data_end+0x5>
     646:	60 90 8e 00 	lds	r6, 0x008E	; 0x80008e <__data_end+0x6>
     64a:	70 90 8f 00 	lds	r7, 0x008F	; 0x80008f <__data_end+0x7>
     64e:	80 90 90 00 	lds	r8, 0x0090	; 0x800090 <__data_end+0x8>
     652:	90 90 91 00 	lds	r9, 0x0091	; 0x800091 <__data_end+0x9>
     656:	a0 90 92 00 	lds	r10, 0x0092	; 0x800092 <__data_end+0xa>
     65a:	b0 90 93 00 	lds	r11, 0x0093	; 0x800093 <__data_end+0xb>
     65e:	a3 01       	movw	r20, r6
     660:	92 01       	movw	r18, r4
     662:	4c d6       	rcall	.+3224   	; 0x12fc <__subsf3>
     664:	a5 01       	movw	r20, r10
     666:	94 01       	movw	r18, r8
     668:	49 d6       	rcall	.+3218   	; 0x12fc <__subsf3>
     66a:	2a e0       	ldi	r18, 0x0A	; 10
     66c:	37 ed       	ldi	r19, 0xD7	; 215
     66e:	43 e2       	ldi	r20, 0x23	; 35
     670:	5c e3       	ldi	r21, 0x3C	; 60
     672:	45 d6       	rcall	.+3210   	; 0x12fe <__addsf3>
     674:	29 85       	ldd	r18, Y+9	; 0x09
     676:	3a 85       	ldd	r19, Y+10	; 0x0a
     678:	4b 85       	ldd	r20, Y+11	; 0x0b
     67a:	5c 85       	ldd	r21, Y+12	; 0x0c
     67c:	50 d8       	rcall	.-3936   	; 0xfffff71e <__eeprom_end+0xff7ef71e>
     67e:	e8 e8       	ldi	r30, 0x88	; 136
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	20 81       	ld	r18, Z
     684:	31 81       	ldd	r19, Z+1	; 0x01
     686:	42 81       	ldd	r20, Z+2	; 0x02
     688:	53 81       	ldd	r21, Z+3	; 0x03
     68a:	39 d6       	rcall	.+3186   	; 0x12fe <__addsf3>
     68c:	6d 83       	std	Y+5, r22	; 0x05
     68e:	7e 83       	std	Y+6, r23	; 0x06
     690:	8f 83       	std	Y+7, r24	; 0x07
     692:	98 87       	std	Y+8, r25	; 0x08
     694:	29 81       	ldd	r18, Y+1	; 0x01
     696:	3a 81       	ldd	r19, Y+2	; 0x02
     698:	4b 81       	ldd	r20, Y+3	; 0x03
     69a:	5c 81       	ldd	r21, Y+4	; 0x04
     69c:	c3 01       	movw	r24, r6
     69e:	b2 01       	movw	r22, r4
     6a0:	2d d6       	rcall	.+3162   	; 0x12fc <__subsf3>
     6a2:	2b 01       	movw	r4, r22
     6a4:	3c 01       	movw	r6, r24
     6a6:	29 81       	ldd	r18, Y+1	; 0x01
     6a8:	3a 81       	ldd	r19, Y+2	; 0x02
     6aa:	4b 81       	ldd	r20, Y+3	; 0x03
     6ac:	5c 81       	ldd	r21, Y+4	; 0x04
     6ae:	c5 01       	movw	r24, r10
     6b0:	b4 01       	movw	r22, r8
     6b2:	24 d6       	rcall	.+3144   	; 0x12fc <__subsf3>
     6b4:	6d 8f       	std	Y+29, r22	; 0x1d
     6b6:	7e 8f       	std	Y+30, r23	; 0x1e
     6b8:	8f 8f       	std	Y+31, r24	; 0x1f
     6ba:	98 a3       	std	Y+32, r25	; 0x20
     6bc:	2d ec       	ldi	r18, 0xCD	; 205
     6be:	3c ec       	ldi	r19, 0xCC	; 204
     6c0:	4c ec       	ldi	r20, 0xCC	; 204
     6c2:	5d e3       	ldi	r21, 0x3D	; 61
     6c4:	6d 81       	ldd	r22, Y+5	; 0x05
     6c6:	7e 81       	ldd	r23, Y+6	; 0x06
     6c8:	8f 81       	ldd	r24, Y+7	; 0x07
     6ca:	98 85       	ldd	r25, Y+8	; 0x08
     6cc:	18 d6       	rcall	.+3120   	; 0x12fe <__addsf3>
     6ce:	4b 01       	movw	r8, r22
     6d0:	5c 01       	movw	r10, r24
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	6d 81       	ldd	r22, Y+5	; 0x05
     6d8:	7e 81       	ldd	r23, Y+6	; 0x06
     6da:	8f 81       	ldd	r24, Y+7	; 0x07
     6dc:	98 85       	ldd	r25, Y+8	; 0x08
     6de:	d9 d6       	rcall	.+3506   	; 0x1492 <__divsf3>
     6e0:	69 83       	std	Y+1, r22	; 0x01
     6e2:	7a 83       	std	Y+2, r23	; 0x02
     6e4:	8b 83       	std	Y+3, r24	; 0x03
     6e6:	9c 83       	std	Y+4, r25	; 0x04
     6e8:	a5 01       	movw	r20, r10
     6ea:	94 01       	movw	r18, r8
     6ec:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6ee:	7e 8d       	ldd	r23, Y+30	; 0x1e
     6f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6f2:	98 a1       	ldd	r25, Y+32	; 0x20
     6f4:	ce d6       	rcall	.+3484   	; 0x1492 <__divsf3>
     6f6:	69 8b       	std	Y+17, r22	; 0x11
     6f8:	7a 8b       	std	Y+18, r23	; 0x12
     6fa:	8b 8b       	std	Y+19, r24	; 0x13
     6fc:	9c 8b       	std	Y+20, r25	; 0x14
     6fe:	29 8d       	ldd	r18, Y+25	; 0x19
     700:	3a 8d       	ldd	r19, Y+26	; 0x1a
     702:	4b 8d       	ldd	r20, Y+27	; 0x1b
     704:	5c 8d       	ldd	r21, Y+28	; 0x1c
     706:	6d 85       	ldd	r22, Y+13	; 0x0d
     708:	7e 85       	ldd	r23, Y+14	; 0x0e
     70a:	8f 85       	ldd	r24, Y+15	; 0x0f
     70c:	98 89       	ldd	r25, Y+16	; 0x10
     70e:	f6 d5       	rcall	.+3052   	; 0x12fc <__subsf3>
     710:	6d 87       	std	Y+13, r22	; 0x0d
     712:	7e 87       	std	Y+14, r23	; 0x0e
     714:	8f 87       	std	Y+15, r24	; 0x0f
     716:	98 8b       	std	Y+16, r25	; 0x10
     718:	9b 01       	movw	r18, r22
     71a:	ac 01       	movw	r20, r24
     71c:	69 81       	ldd	r22, Y+1	; 0x01
     71e:	7a 81       	ldd	r23, Y+2	; 0x02
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	9c 81       	ldd	r25, Y+4	; 0x04
     724:	fc d7       	rcall	.+4088   	; 0x171e <__mulsf3>
     726:	29 8d       	ldd	r18, Y+25	; 0x19
     728:	3a 8d       	ldd	r19, Y+26	; 0x1a
     72a:	4b 8d       	ldd	r20, Y+27	; 0x1b
     72c:	5c 8d       	ldd	r21, Y+28	; 0x1c
     72e:	e7 d5       	rcall	.+3022   	; 0x12fe <__addsf3>
     730:	4b 01       	movw	r8, r22
     732:	5c 01       	movw	r10, r24
     734:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <angle.2603>
     738:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <angle.2603+0x1>
     73c:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <angle.2603+0x2>
     740:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <angle.2603+0x3>
     744:	2d 85       	ldd	r18, Y+13	; 0x0d
     746:	3e 85       	ldd	r19, Y+14	; 0x0e
     748:	4f 85       	ldd	r20, Y+15	; 0x0f
     74a:	58 89       	ldd	r21, Y+16	; 0x10
     74c:	69 89       	ldd	r22, Y+17	; 0x11
     74e:	7a 89       	ldd	r23, Y+18	; 0x12
     750:	8b 89       	ldd	r24, Y+19	; 0x13
     752:	9c 89       	ldd	r25, Y+20	; 0x14
     754:	e4 d7       	rcall	.+4040   	; 0x171e <__mulsf3>
     756:	2d 89       	ldd	r18, Y+21	; 0x15
     758:	3e 89       	ldd	r19, Y+22	; 0x16
     75a:	4f 89       	ldd	r20, Y+23	; 0x17
     75c:	58 8d       	ldd	r21, Y+24	; 0x18
     75e:	cf d5       	rcall	.+2974   	; 0x12fe <__addsf3>
     760:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <bias.2604>
     764:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <bias.2604+0x1>
     768:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <bias.2604+0x2>
     76c:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <bias.2604+0x3>
     770:	29 81       	ldd	r18, Y+1	; 0x01
     772:	3a 81       	ldd	r19, Y+2	; 0x02
     774:	4b 81       	ldd	r20, Y+3	; 0x03
     776:	5c 81       	ldd	r21, Y+4	; 0x04
     778:	6d 81       	ldd	r22, Y+5	; 0x05
     77a:	7e 81       	ldd	r23, Y+6	; 0x06
     77c:	8f 81       	ldd	r24, Y+7	; 0x07
     77e:	98 85       	ldd	r25, Y+8	; 0x08
     780:	ce d7       	rcall	.+3996   	; 0x171e <__mulsf3>
     782:	9b 01       	movw	r18, r22
     784:	ac 01       	movw	r20, r24
     786:	6d 81       	ldd	r22, Y+5	; 0x05
     788:	7e 81       	ldd	r23, Y+6	; 0x06
     78a:	8f 81       	ldd	r24, Y+7	; 0x07
     78c:	98 85       	ldd	r25, Y+8	; 0x08
     78e:	b6 d5       	rcall	.+2924   	; 0x12fc <__subsf3>
     790:	e8 e8       	ldi	r30, 0x88	; 136
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	60 83       	st	Z, r22
     796:	71 83       	std	Z+1, r23	; 0x01
     798:	82 83       	std	Z+2, r24	; 0x02
     79a:	93 83       	std	Z+3, r25	; 0x03
     79c:	29 81       	ldd	r18, Y+1	; 0x01
     79e:	3a 81       	ldd	r19, Y+2	; 0x02
     7a0:	4b 81       	ldd	r20, Y+3	; 0x03
     7a2:	5c 81       	ldd	r21, Y+4	; 0x04
     7a4:	c3 01       	movw	r24, r6
     7a6:	b2 01       	movw	r22, r4
     7a8:	ba d7       	rcall	.+3956   	; 0x171e <__mulsf3>
     7aa:	9b 01       	movw	r18, r22
     7ac:	ac 01       	movw	r20, r24
     7ae:	c3 01       	movw	r24, r6
     7b0:	b2 01       	movw	r22, r4
     7b2:	a4 d5       	rcall	.+2888   	; 0x12fc <__subsf3>
     7b4:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <__data_end+0x4>
     7b8:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <__data_end+0x5>
     7bc:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <__data_end+0x6>
     7c0:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <__data_end+0x7>
     7c4:	29 89       	ldd	r18, Y+17	; 0x11
     7c6:	3a 89       	ldd	r19, Y+18	; 0x12
     7c8:	4b 89       	ldd	r20, Y+19	; 0x13
     7ca:	5c 89       	ldd	r21, Y+20	; 0x14
     7cc:	6d 81       	ldd	r22, Y+5	; 0x05
     7ce:	7e 81       	ldd	r23, Y+6	; 0x06
     7d0:	8f 81       	ldd	r24, Y+7	; 0x07
     7d2:	98 85       	ldd	r25, Y+8	; 0x08
     7d4:	a4 d7       	rcall	.+3912   	; 0x171e <__mulsf3>
     7d6:	9b 01       	movw	r18, r22
     7d8:	ac 01       	movw	r20, r24
     7da:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7dc:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7de:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7e0:	98 a1       	ldd	r25, Y+32	; 0x20
     7e2:	8c d5       	rcall	.+2840   	; 0x12fc <__subsf3>
     7e4:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <__data_end+0x8>
     7e8:	70 93 91 00 	sts	0x0091, r23	; 0x800091 <__data_end+0x9>
     7ec:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end+0xa>
     7f0:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <__data_end+0xb>
     7f4:	2d ec       	ldi	r18, 0xCD	; 205
     7f6:	3c ec       	ldi	r19, 0xCC	; 204
     7f8:	4c e4       	ldi	r20, 0x4C	; 76
     7fa:	5d e3       	ldi	r21, 0x3D	; 61
     7fc:	69 85       	ldd	r22, Y+9	; 0x09
     7fe:	7a 85       	ldd	r23, Y+10	; 0x0a
     800:	8b 85       	ldd	r24, Y+11	; 0x0b
     802:	9c 85       	ldd	r25, Y+12	; 0x0c
     804:	8c d7       	rcall	.+3864   	; 0x171e <__mulsf3>
     806:	a7 01       	movw	r20, r14
     808:	96 01       	movw	r18, r12
     80a:	79 d5       	rcall	.+2802   	; 0x12fe <__addsf3>
     80c:	6b 01       	movw	r12, r22
     80e:	7c 01       	movw	r14, r24
     810:	29 89       	ldd	r18, Y+17	; 0x11
     812:	3a 89       	ldd	r19, Y+18	; 0x12
     814:	4b 89       	ldd	r20, Y+19	; 0x13
     816:	5c 89       	ldd	r21, Y+20	; 0x14
     818:	c3 01       	movw	r24, r6
     81a:	b2 01       	movw	r22, r4
     81c:	80 d7       	rcall	.+3840   	; 0x171e <__mulsf3>
     81e:	9b 01       	movw	r18, r22
     820:	ac 01       	movw	r20, r24
     822:	c7 01       	movw	r24, r14
     824:	b6 01       	movw	r22, r12
     826:	6a d5       	rcall	.+2772   	; 0x12fc <__subsf3>
     828:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <__data_end+0xc>
     82c:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <__data_end+0xd>
     830:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end+0xe>
     834:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0xf>
     838:	c5 01       	movw	r24, r10
     83a:	b4 01       	movw	r22, r8
     83c:	a0 96       	adiw	r28, 0x20	; 32
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	9f 90       	pop	r9
     85e:	8f 90       	pop	r8
     860:	7f 90       	pop	r7
     862:	6f 90       	pop	r6
     864:	5f 90       	pop	r5
     866:	4f 90       	pop	r4
     868:	08 95       	ret

0000086a <crc>:
     86a:	66 23       	and	r22, r22
     86c:	b9 f0       	breq	.+46     	; 0x89c <crc+0x32>
     86e:	fc 01       	movw	r30, r24
     870:	61 50       	subi	r22, 0x01	; 1
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	6f 5f       	subi	r22, 0xFF	; 255
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	68 0f       	add	r22, r24
     87a:	79 1f       	adc	r23, r25
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	4c e8       	ldi	r20, 0x8C	; 140
     880:	21 91       	ld	r18, Z+
     882:	98 e0       	ldi	r25, 0x08	; 8
     884:	32 2f       	mov	r19, r18
     886:	38 27       	eor	r19, r24
     888:	86 95       	lsr	r24
     88a:	26 95       	lsr	r18
     88c:	30 fd       	sbrc	r19, 0
     88e:	84 27       	eor	r24, r20
     890:	91 50       	subi	r25, 0x01	; 1
     892:	c1 f7       	brne	.-16     	; 0x884 <crc+0x1a>
     894:	e6 17       	cp	r30, r22
     896:	f7 07       	cpc	r31, r23
     898:	99 f7       	brne	.-26     	; 0x880 <crc+0x16>
     89a:	08 95       	ret
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	08 95       	ret

000008a0 <UART_data_procesing>:
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <rx_buffer>
     8a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8ac:	98 13       	cpse	r25, r24
     8ae:	83 c0       	rjmp	.+262    	; 0x9b6 <UART_data_procesing+0x116>
     8b0:	66 e0       	ldi	r22, 0x06	; 6
     8b2:	82 ef       	ldi	r24, 0xF2	; 242
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	d9 df       	rcall	.-78     	; 0x86a <crc>
     8b8:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <rx_buffer+0x6>
     8bc:	89 13       	cpse	r24, r25
     8be:	7b c0       	rjmp	.+246    	; 0x9b6 <UART_data_procesing+0x116>
     8c0:	e2 ef       	ldi	r30, 0xF2	; 242
     8c2:	f0 e0       	ldi	r31, 0x00	; 0
     8c4:	82 81       	ldd	r24, Z+2	; 0x02
     8c6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <Angle_Type>
     8ca:	83 81       	ldd	r24, Z+3	; 0x03
     8cc:	8f 36       	cpi	r24, 0x6F	; 111
     8ce:	89 f4       	brne	.+34     	; 0x8f2 <UART_data_procesing+0x52>
     8d0:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <Address_Change_Counter>
     8d4:	8a 30       	cpi	r24, 0x0A	; 10
     8d6:	30 f4       	brcc	.+12     	; 0x8e4 <UART_data_procesing+0x44>
     8d8:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <Address_Change_Counter>
     8dc:	8f 5f       	subi	r24, 0xFF	; 255
     8de:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <Address_Change_Counter>
     8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <UART_data_procesing+0x56>
     8e4:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <rx_buffer+0x4>
     8e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     8ec:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <Address_Change_Counter>
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <UART_data_procesing+0x56>
     8f2:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <Address_Change_Counter>
     8f6:	87 e0       	ldi	r24, 0x07	; 7
     8f8:	e2 ef       	ldi	r30, 0xF2	; 242
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	df 01       	movw	r26, r30
     8fe:	98 2f       	mov	r25, r24
     900:	1d 92       	st	X+, r1
     902:	9a 95       	dec	r25
     904:	e9 f7       	brne	.-6      	; 0x900 <UART_data_procesing+0x60>
     906:	e9 ef       	ldi	r30, 0xF9	; 249
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	df 01       	movw	r26, r30
     90c:	1d 92       	st	X+, r1
     90e:	8a 95       	dec	r24
     910:	e9 f7       	brne	.-6      	; 0x90c <UART_data_procesing+0x6c>
     912:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     916:	80 83       	st	Z, r24
     918:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <Angle_Type>
     91c:	8a 3f       	cpi	r24, 0xFA	; 250
     91e:	21 f0       	breq	.+8      	; 0x928 <UART_data_procesing+0x88>
     920:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <Angle_Type>
     924:	8a 3a       	cpi	r24, 0xAA	; 170
     926:	69 f4       	brne	.+26     	; 0x942 <UART_data_procesing+0xa2>
     928:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <Y_angle>
     92c:	70 91 ab 00 	lds	r23, 0x00AB	; 0x8000ab <Y_angle+0x1>
     930:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <Y_angle+0x2>
     934:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <Y_angle+0x3>
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	49 ef       	ldi	r20, 0xF9	; 249
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	0e de       	rcall	.-996    	; 0x55e <float_to_byte>
     942:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <Angle_Type>
     946:	8d 3b       	cpi	r24, 0xBD	; 189
     948:	51 f5       	brne	.+84     	; 0x99e <UART_data_procesing+0xfe>
     94a:	20 91 a8 00 	lds	r18, 0x00A8	; 0x8000a8 <MAX_Accel_Value_X>
     94e:	30 91 a9 00 	lds	r19, 0x00A9	; 0x8000a9 <MAX_Accel_Value_X+0x1>
     952:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <MAX_Accel_Value_Z>
     956:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <MAX_Accel_Value_Z+0x1>
     95a:	82 17       	cp	r24, r18
     95c:	93 07       	cpc	r25, r19
     95e:	2c f4       	brge	.+10     	; 0x96a <UART_data_procesing+0xca>
     960:	e9 ef       	ldi	r30, 0xF9	; 249
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	31 83       	std	Z+1, r19	; 0x01
     966:	22 83       	std	Z+2, r18	; 0x02
     968:	04 c0       	rjmp	.+8      	; 0x972 <UART_data_procesing+0xd2>
     96a:	e9 ef       	ldi	r30, 0xF9	; 249
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	91 83       	std	Z+1, r25	; 0x01
     970:	82 83       	std	Z+2, r24	; 0x02
     972:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <MAX_Accel_Value_Y>
     976:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <MAX_Accel_Value_Y+0x1>
     97a:	e9 ef       	ldi	r30, 0xF9	; 249
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	93 83       	std	Z+3, r25	; 0x03
     980:	84 83       	std	Z+4, r24	; 0x04
     982:	8b e0       	ldi	r24, 0x0B	; 11
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <MAX_Accel_Value_X+0x1>
     98a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <MAX_Accel_Value_X>
     98e:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <MAX_Accel_Value_Y+0x1>
     992:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <MAX_Accel_Value_Y>
     996:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <MAX_Accel_Value_Z+0x1>
     99a:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <MAX_Accel_Value_Z>
     99e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9a2:	c9 ef       	ldi	r28, 0xF9	; 249
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
     9a6:	8d 83       	std	Y+5, r24	; 0x05
     9a8:	66 e0       	ldi	r22, 0x06	; 6
     9aa:	ce 01       	movw	r24, r28
     9ac:	5e df       	rcall	.-324    	; 0x86a <crc>
     9ae:	8e 83       	std	Y+6, r24	; 0x06
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <UART_TX_Pre_Counter>
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	08 95       	ret

000009bc <__vector_3>:
     9bc:	1f 92       	push	r1
     9be:	0f 92       	push	r0
     9c0:	0f b6       	in	r0, 0x3f	; 63
     9c2:	0f 92       	push	r0
     9c4:	11 24       	eor	r1, r1
     9c6:	2f 93       	push	r18
     9c8:	3f 93       	push	r19
     9ca:	4f 93       	push	r20
     9cc:	5f 93       	push	r21
     9ce:	6f 93       	push	r22
     9d0:	7f 93       	push	r23
     9d2:	8f 93       	push	r24
     9d4:	9f 93       	push	r25
     9d6:	af 93       	push	r26
     9d8:	bf 93       	push	r27
     9da:	ef 93       	push	r30
     9dc:	ff 93       	push	r31
     9de:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <UART_RX_Complete_FLAG>
     9e2:	88 23       	and	r24, r24
     9e4:	21 f0       	breq	.+8      	; 0x9ee <__vector_3+0x32>
     9e6:	5c df       	rcall	.-328    	; 0x8a0 <UART_data_procesing>
     9e8:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <UART_RX_Complete_FLAG>
     9ec:	0e c0       	rjmp	.+28     	; 0xa0a <__vector_3+0x4e>
     9ee:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <UART_TX_Pre_Counter>
     9f2:	88 23       	and	r24, r24
     9f4:	51 f0       	breq	.+20     	; 0xa0a <__vector_3+0x4e>
     9f6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <UART_TX_Pre_Counter>
     9fa:	92 9a       	sbi	0x12, 2	; 18
     9fc:	50 9a       	sbi	0x0a, 0	; 10
     9fe:	86 e0       	ldi	r24, 0x06	; 6
     a00:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <tx_counter>
     a04:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <tx_buffer>
     a08:	8c b9       	out	0x0c, r24	; 12
     a0a:	ff 91       	pop	r31
     a0c:	ef 91       	pop	r30
     a0e:	bf 91       	pop	r27
     a10:	af 91       	pop	r26
     a12:	9f 91       	pop	r25
     a14:	8f 91       	pop	r24
     a16:	7f 91       	pop	r23
     a18:	6f 91       	pop	r22
     a1a:	5f 91       	pop	r21
     a1c:	4f 91       	pop	r20
     a1e:	3f 91       	pop	r19
     a20:	2f 91       	pop	r18
     a22:	0f 90       	pop	r0
     a24:	0f be       	out	0x3f, r0	; 63
     a26:	0f 90       	pop	r0
     a28:	1f 90       	pop	r1
     a2a:	18 95       	reti

00000a2c <__vector_11>:
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
     a3a:	ef 93       	push	r30
     a3c:	ff 93       	push	r31
     a3e:	51 9b       	sbis	0x0a, 1	; 10
     a40:	07 c0       	rjmp	.+14     	; 0xa50 <__vector_11+0x24>
     a42:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <rx_counter>
     a46:	8c b1       	in	r24, 0x0c	; 12
     a48:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <rx_buffer>
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	0a c0       	rjmp	.+20     	; 0xa64 <__vector_11+0x38>
     a50:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <rx_counter>
     a54:	e8 2f       	mov	r30, r24
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	9c b1       	in	r25, 0x0c	; 12
     a5a:	ee 50       	subi	r30, 0x0E	; 14
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	90 83       	st	Z, r25
     a60:	86 30       	cpi	r24, 0x06	; 6
     a62:	20 f4       	brcc	.+8      	; 0xa6c <__vector_11+0x40>
     a64:	8f 5f       	subi	r24, 0xFF	; 255
     a66:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <rx_counter>
     a6a:	03 c0       	rjmp	.+6      	; 0xa72 <__vector_11+0x46>
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <UART_RX_Complete_FLAG>
     a72:	ff 91       	pop	r31
     a74:	ef 91       	pop	r30
     a76:	9f 91       	pop	r25
     a78:	8f 91       	pop	r24
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	0f 90       	pop	r0
     a80:	1f 90       	pop	r1
     a82:	18 95       	reti

00000a84 <__vector_13>:
     a84:	1f 92       	push	r1
     a86:	0f 92       	push	r0
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	0f 92       	push	r0
     a8c:	11 24       	eor	r1, r1
     a8e:	8f 93       	push	r24
     a90:	ef 93       	push	r30
     a92:	ff 93       	push	r31
     a94:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <tx_counter>
     a98:	88 23       	and	r24, r24
     a9a:	79 f0       	breq	.+30     	; 0xaba <__vector_13+0x36>
     a9c:	81 50       	subi	r24, 0x01	; 1
     a9e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <tx_counter>
     aa2:	50 98       	cbi	0x0a, 0	; 10
     aa4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <tx_counter>
     aa8:	e6 e0       	ldi	r30, 0x06	; 6
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	e8 1b       	sub	r30, r24
     aae:	f1 09       	sbc	r31, r1
     ab0:	e7 50       	subi	r30, 0x07	; 7
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	80 81       	ld	r24, Z
     ab6:	8c b9       	out	0x0c, r24	; 12
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <__vector_13+0x38>
     aba:	92 98       	cbi	0x12, 2	; 18
     abc:	ff 91       	pop	r31
     abe:	ef 91       	pop	r30
     ac0:	8f 91       	pop	r24
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <Timer_2_Init>:
     acc:	85 b5       	in	r24, 0x25	; 37
     ace:	8c 60       	ori	r24, 0x0C	; 12
     ad0:	85 bd       	out	0x25, r24	; 37
     ad2:	89 b7       	in	r24, 0x39	; 57
     ad4:	80 68       	ori	r24, 0x80	; 128
     ad6:	89 bf       	out	0x39, r24	; 57
     ad8:	86 ee       	ldi	r24, 0xE6	; 230
     ada:	83 bd       	out	0x23, r24	; 35
     adc:	08 95       	ret

00000ade <UART_Init>:
     ade:	90 bd       	out	0x20, r25	; 32
     ae0:	89 b9       	out	0x09, r24	; 9
     ae2:	8a b1       	in	r24, 0x0a	; 10
     ae4:	88 61       	ori	r24, 0x18	; 24
     ae6:	8a b9       	out	0x0a, r24	; 10
     ae8:	80 b5       	in	r24, 0x20	; 32
     aea:	86 68       	ori	r24, 0x86	; 134
     aec:	80 bd       	out	0x20, r24	; 32
     aee:	08 95       	ret

00000af0 <UART_Transmit>:
     af0:	5d 9b       	sbis	0x0b, 5	; 11
     af2:	fe cf       	rjmp	.-4      	; 0xaf0 <UART_Transmit>
     af4:	8c b9       	out	0x0c, r24	; 12
     af6:	08 95       	ret

00000af8 <UART_Transmit_String>:
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ec 01       	movw	r28, r24
     afe:	88 81       	ld	r24, Y
     b00:	88 23       	and	r24, r24
     b02:	29 f0       	breq	.+10     	; 0xb0e <UART_Transmit_String+0x16>
     b04:	21 96       	adiw	r28, 0x01	; 1
     b06:	f4 df       	rcall	.-24     	; 0xaf0 <UART_Transmit>
     b08:	89 91       	ld	r24, Y+
     b0a:	81 11       	cpse	r24, r1
     b0c:	fc cf       	rjmp	.-8      	; 0xb06 <UART_Transmit_String+0xe>
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <UART_PrintLn>:

void UART_PrintLn(const char *format, ...) {
     b14:	0f 93       	push	r16
     b16:	1f 93       	push	r17
     b18:	cf 93       	push	r28
     b1a:	df 93       	push	r29
     b1c:	cd b7       	in	r28, 0x3d	; 61
     b1e:	de b7       	in	r29, 0x3e	; 62
     b20:	c0 58       	subi	r28, 0x80	; 128
     b22:	d1 09       	sbc	r29, r1
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
     b2e:	9e 01       	movw	r18, r28
     b30:	29 57       	subi	r18, 0x79	; 121
     b32:	3f 4f       	sbci	r19, 0xFF	; 255
     b34:	f9 01       	movw	r30, r18
     b36:	41 91       	ld	r20, Z+
     b38:	51 91       	ld	r21, Z+
     b3a:	9f 01       	movw	r18, r30
	char buffer[UART_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, UART_BUFFER_SIZE, format, args);
     b3c:	60 e8       	ldi	r22, 0x80	; 128
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	8e 01       	movw	r16, r28
     b42:	0f 5f       	subi	r16, 0xFF	; 255
     b44:	1f 4f       	sbci	r17, 0xFF	; 255
     b46:	c8 01       	movw	r24, r16
     b48:	50 d6       	rcall	.+3232   	; 0x17ea <vsnprintf>
	va_end(args);
	strcat(buffer, "\r\n");
     b4a:	f8 01       	movw	r30, r16
     b4c:	01 90       	ld	r0, Z+
     b4e:	00 20       	and	r0, r0
     b50:	e9 f7       	brne	.-6      	; 0xb4c <UART_PrintLn+0x38>
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	8d e0       	ldi	r24, 0x0D	; 13
     b56:	9a e0       	ldi	r25, 0x0A	; 10
     b58:	91 83       	std	Z+1, r25	; 0x01
     b5a:	80 83       	st	Z, r24
     b5c:	12 82       	std	Z+2, r1	; 0x02
	UART_Transmit_String(buffer);
     b5e:	c8 01       	movw	r24, r16
     b60:	cb df       	rcall	.-106    	; 0xaf8 <UART_Transmit_String>
}
     b62:	c0 58       	subi	r28, 0x80	; 128
     b64:	df 4f       	sbci	r29, 0xFF	; 255
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <arduino_ploter>:
	return angle;
}

void arduino_ploter(void)
{
	TX_ON;
     b7a:	92 9a       	sbi	0x12, 2	; 18
	
	//====!!!!!!!!!!!====cod to display in arduino ide monitor=====!!!!!!!!!=======
	//UART_Transmit_String("Xa:,Ya:,Za:,Xgy:,Ygy:,Zgy:\r\n");
	//%.2f
	//UART_PrintLn("%d,%d,%d,%d,%d,%d", All_Axis_ROW.Xaccel_raw, All_Axis_ROW.Yaccel_raw, All_Axis_ROW.Zaccel_raw, All_Axis_ROW.Xgyro_raw, All_Axis_ROW.Ygyro_raw, All_Axis_ROW.Zgyro_raw);
	UART_Transmit_String("MAX_A_X:,MAX_A_Y:,MAX_A_Z:\r\n");
     b7c:	81 e6       	ldi	r24, 0x61	; 97
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	bb df       	rcall	.-138    	; 0xaf8 <UART_Transmit_String>
	UART_PrintLn("%d,%d,%d", MAX_Accel_Value_X, MAX_Accel_Value_Y, MAX_Accel_Value_Z);
     b82:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <MAX_Accel_Value_Z+0x1>
     b86:	8f 93       	push	r24
     b88:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <MAX_Accel_Value_Z>
     b8c:	8f 93       	push	r24
     b8e:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <MAX_Accel_Value_Y+0x1>
     b92:	8f 93       	push	r24
     b94:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <MAX_Accel_Value_Y>
     b98:	8f 93       	push	r24
     b9a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <MAX_Accel_Value_X+0x1>
     b9e:	8f 93       	push	r24
     ba0:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <MAX_Accel_Value_X>
     ba4:	8f 93       	push	r24
     ba6:	8e e7       	ldi	r24, 0x7E	; 126
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	9f 93       	push	r25
     bac:	8f 93       	push	r24
     bae:	b2 df       	rcall	.-156    	; 0xb14 <UART_PrintLn>
	MAX_Accel_Value_X = 0;
     bb0:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <MAX_Accel_Value_X+0x1>
     bb4:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <MAX_Accel_Value_X>
	MAX_Accel_Value_Y = 0;
     bb8:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <MAX_Accel_Value_Y+0x1>
     bbc:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <MAX_Accel_Value_Y>
	MAX_Accel_Value_Z = 0;
     bc0:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <MAX_Accel_Value_Z+0x1>
     bc4:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <MAX_Accel_Value_Z>
}
     bc8:	8d b7       	in	r24, 0x3d	; 61
     bca:	9e b7       	in	r25, 0x3e	; 62
     bcc:	08 96       	adiw	r24, 0x08	; 8
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	9e bf       	out	0x3e, r25	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	8d bf       	out	0x3d, r24	; 61
     bd8:	08 95       	ret

00000bda <main>:
	return value;
}


int main(void)
{
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <main+0x6>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <main+0x8>
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	sei();
     be6:	78 94       	sei
	//wdt_enable(WDTO_1S);
	_LCD_PORT_DIR = _ALL_OUTPUT;
     be8:	8f ef       	ldi	r24, 0xFF	; 255
     bea:	84 bb       	out	0x14, r24	; 20
	_I2C_PORT_DIR = ( 1 << _SDA ) | _SCL;
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	84 bb       	out	0x14, r24	; 20
	
	/* MPU6050 Init */
	MPU6050_AutoInit(100);
     bf0:	84 e6       	ldi	r24, 0x64	; 100
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	80 d2       	rcall	.+1280   	; 0x10f6 <MPU6050_AutoInit>
	Timer_2_Init();
     bf6:	6a df       	rcall	.-300    	; 0xacc <Timer_2_Init>
	UART_Init(UBRR_SPEED);
     bf8:	8f e2       	ldi	r24, 0x2F	; 47
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	70 df       	rcall	.-288    	; 0xade <UART_Init>
	RX_TX_DIRECTION = 1;
     bfe:	8a 9a       	sbi	0x11, 2	; 17
	LED_OUT = 1;
     c00:	8b 9a       	sbi	0x11, 3	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c02:	2f ef       	ldi	r18, 0xFF	; 255
     c04:	4f e7       	ldi	r20, 0x7F	; 127
     c06:	84 e0       	ldi	r24, 0x04	; 4
     c08:	21 50       	subi	r18, 0x01	; 1
     c0a:	40 40       	sbci	r20, 0x00	; 0
     c0c:	80 40       	sbci	r24, 0x00	; 0
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <main+0x2e>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <main+0x38>
     c12:	00 00       	nop
		//===
		
		LED = 0;
		//wdt_reset();
		
		All_Axis.x_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Yaccel_raw , -All_Axis_ROW.Zaccel_raw ) + _MATH_PI ) );
     c14:	0f 2e       	mov	r0, r31
     c16:	fe ea       	ldi	r31, 0xAE	; 174
     c18:	2f 2e       	mov	r2, r31
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	3f 2e       	mov	r3, r31
     c1e:	f0 2d       	mov	r31, r0
					MAX_Accel_Value_Z = All_Axis_ROW.Zaccel_raw;
				}
			}
			else
			{
				MAX_Accel_Value_X = 10;
     c20:	0f 2e       	mov	r0, r31
     c22:	fa e0       	ldi	r31, 0x0A	; 10
     c24:	cf 2e       	mov	r12, r31
     c26:	d1 2c       	mov	r13, r1
     c28:	f0 2d       	mov	r31, r0
	//MPU6050_Calibrate(offsetGX, offsetGY, offsetGZ);
	/* ---------------------------------------- */
    while (1) 
    {

		LED = 1;
     c2a:	93 9a       	sbi	0x12, 3	; 18
		MPU6050_GetRawAccel(&All_Axis_ROW.Xaccel_raw, 20);
     c2c:	64 e1       	ldi	r22, 0x14	; 20
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	86 ec       	ldi	r24, 0xC6	; 198
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	fd d2       	rcall	.+1530   	; 0x1230 <MPU6050_GetRawAccel>
		MPU6050_GetRawGyro(&All_Axis_ROW.Xgyro_raw, 20);
     c36:	64 e1       	ldi	r22, 0x14	; 20
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	8c ec       	ldi	r24, 0xCC	; 204
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	2b d3       	rcall	.+1622   	; 0x1296 <MPU6050_GetRawGyro>
// 			*raw_gyro_str = ( (int16_t)raw_gyro[i] << _MPU_HIGH_BYTE_SHIFT ) | (int16_t)raw_gyro[i + 1]; /* Write data */
// 			raw_accel_str++;
// 		}
		//===
		
		LED = 0;
     c40:	93 98       	cbi	0x12, 3	; 18
		//wdt_reset();
		
		All_Axis.x_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Yaccel_raw , -All_Axis_ROW.Zaccel_raw ) + _MATH_PI ) );
     c42:	60 91 ca 00 	lds	r22, 0x00CA	; 0x8000ca <All_Axis_ROW+0x4>
     c46:	70 91 cb 00 	lds	r23, 0x00CB	; 0x8000cb <All_Axis_ROW+0x5>
     c4a:	71 95       	neg	r23
     c4c:	61 95       	neg	r22
     c4e:	71 09       	sbc	r23, r1
     c50:	07 2e       	mov	r0, r23
     c52:	00 0c       	add	r0, r0
     c54:	88 0b       	sbc	r24, r24
     c56:	99 0b       	sbc	r25, r25
     c58:	86 d4       	rcall	.+2316   	; 0x1566 <__floatsisf>
     c5a:	4b 01       	movw	r8, r22
     c5c:	5c 01       	movw	r10, r24
     c5e:	60 91 c8 00 	lds	r22, 0x00C8	; 0x8000c8 <All_Axis_ROW+0x2>
     c62:	70 91 c9 00 	lds	r23, 0x00C9	; 0x8000c9 <All_Axis_ROW+0x3>
     c66:	71 95       	neg	r23
     c68:	61 95       	neg	r22
     c6a:	71 09       	sbc	r23, r1
     c6c:	07 2e       	mov	r0, r23
     c6e:	00 0c       	add	r0, r0
     c70:	88 0b       	sbc	r24, r24
     c72:	99 0b       	sbc	r25, r25
     c74:	78 d4       	rcall	.+2288   	; 0x1566 <__floatsisf>
     c76:	69 83       	std	Y+1, r22	; 0x01
     c78:	7a 83       	std	Y+2, r23	; 0x02
     c7a:	8b 83       	std	Y+3, r24	; 0x03
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	a5 01       	movw	r20, r10
     c80:	94 01       	movw	r18, r8
     c82:	b0 d3       	rcall	.+1888   	; 0x13e4 <atan2>
     c84:	2b ed       	ldi	r18, 0xDB	; 219
     c86:	3f e0       	ldi	r19, 0x0F	; 15
     c88:	49 e4       	ldi	r20, 0x49	; 73
     c8a:	50 e4       	ldi	r21, 0x40	; 64
     c8c:	38 d3       	rcall	.+1648   	; 0x12fe <__addsf3>
     c8e:	21 ee       	ldi	r18, 0xE1	; 225
     c90:	3e e2       	ldi	r19, 0x2E	; 46
     c92:	45 e6       	ldi	r20, 0x65	; 101
     c94:	52 e4       	ldi	r21, 0x42	; 66
     c96:	43 d5       	rcall	.+2694   	; 0x171e <__mulsf3>
     c98:	f1 01       	movw	r30, r2
     c9a:	64 83       	std	Z+4, r22	; 0x04
     c9c:	75 83       	std	Z+5, r23	; 0x05
     c9e:	86 83       	std	Z+6, r24	; 0x06
     ca0:	97 83       	std	Z+7, r25	; 0x07
		All_Axis.y_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Xaccel_raw , -All_Axis_ROW.Zaccel_raw ) + _MATH_PI ) );
     ca2:	e6 ec       	ldi	r30, 0xC6	; 198
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	60 81       	ld	r22, Z
     ca8:	71 81       	ldd	r23, Z+1	; 0x01
     caa:	71 95       	neg	r23
     cac:	61 95       	neg	r22
     cae:	71 09       	sbc	r23, r1
     cb0:	07 2e       	mov	r0, r23
     cb2:	00 0c       	add	r0, r0
     cb4:	88 0b       	sbc	r24, r24
     cb6:	99 0b       	sbc	r25, r25
     cb8:	56 d4       	rcall	.+2220   	; 0x1566 <__floatsisf>
     cba:	2b 01       	movw	r4, r22
     cbc:	3c 01       	movw	r6, r24
     cbe:	a5 01       	movw	r20, r10
     cc0:	94 01       	movw	r18, r8
     cc2:	90 d3       	rcall	.+1824   	; 0x13e4 <atan2>
     cc4:	2b ed       	ldi	r18, 0xDB	; 219
     cc6:	3f e0       	ldi	r19, 0x0F	; 15
     cc8:	49 e4       	ldi	r20, 0x49	; 73
     cca:	50 e4       	ldi	r21, 0x40	; 64
     ccc:	18 d3       	rcall	.+1584   	; 0x12fe <__addsf3>
     cce:	21 ee       	ldi	r18, 0xE1	; 225
     cd0:	3e e2       	ldi	r19, 0x2E	; 46
     cd2:	45 e6       	ldi	r20, 0x65	; 101
     cd4:	52 e4       	ldi	r21, 0x42	; 66
     cd6:	23 d5       	rcall	.+2630   	; 0x171e <__mulsf3>
     cd8:	4b 01       	movw	r8, r22
     cda:	5c 01       	movw	r10, r24
     cdc:	f1 01       	movw	r30, r2
     cde:	64 87       	std	Z+12, r22	; 0x0c
     ce0:	75 87       	std	Z+13, r23	; 0x0d
     ce2:	86 87       	std	Z+14, r24	; 0x0e
     ce4:	97 87       	std	Z+15, r25	; 0x0f
		All_Axis.z_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Yaccel_raw , -All_Axis_ROW.Xaccel_raw ) + _MATH_PI ) );
     ce6:	a3 01       	movw	r20, r6
     ce8:	92 01       	movw	r18, r4
     cea:	69 81       	ldd	r22, Y+1	; 0x01
     cec:	7a 81       	ldd	r23, Y+2	; 0x02
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	78 d3       	rcall	.+1776   	; 0x13e4 <atan2>
     cf4:	2b ed       	ldi	r18, 0xDB	; 219
     cf6:	3f e0       	ldi	r19, 0x0F	; 15
     cf8:	49 e4       	ldi	r20, 0x49	; 73
     cfa:	50 e4       	ldi	r21, 0x40	; 64
     cfc:	00 d3       	rcall	.+1536   	; 0x12fe <__addsf3>
     cfe:	21 ee       	ldi	r18, 0xE1	; 225
     d00:	3e e2       	ldi	r19, 0x2E	; 46
     d02:	45 e6       	ldi	r20, 0x65	; 101
     d04:	52 e4       	ldi	r21, 0x42	; 66
     d06:	0b d5       	rcall	.+2582   	; 0x171e <__mulsf3>
     d08:	f1 01       	movw	r30, r2
     d0a:	64 8b       	std	Z+20, r22	; 0x14
     d0c:	75 8b       	std	Z+21, r23	; 0x15
     d0e:	86 8b       	std	Z+22, r24	; 0x16
     d10:	97 8b       	std	Z+23, r25	; 0x17
		All_Axis.x_gyro = ((All_Axis_ROW.Xgyro_raw /*- offsetGX*/) / _MPU_GYRO_SENS_250_SENS /*/ (1000 / 120)*/);
     d12:	60 91 cc 00 	lds	r22, 0x00CC	; 0x8000cc <All_Axis_ROW+0x6>
     d16:	70 91 cd 00 	lds	r23, 0x00CD	; 0x8000cd <All_Axis_ROW+0x7>
     d1a:	07 2e       	mov	r0, r23
     d1c:	00 0c       	add	r0, r0
     d1e:	88 0b       	sbc	r24, r24
     d20:	99 0b       	sbc	r25, r25
     d22:	21 d4       	rcall	.+2114   	; 0x1566 <__floatsisf>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	43 e0       	ldi	r20, 0x03	; 3
     d2a:	53 e4       	ldi	r21, 0x43	; 67
     d2c:	b2 d3       	rcall	.+1892   	; 0x1492 <__divsf3>
     d2e:	f1 01       	movw	r30, r2
     d30:	60 83       	st	Z, r22
     d32:	71 83       	std	Z+1, r23	; 0x01
     d34:	82 83       	std	Z+2, r24	; 0x02
     d36:	93 83       	std	Z+3, r25	; 0x03
		All_Axis.y_gyro = ((All_Axis_ROW.Ygyro_raw /*- offsetGY*/) / _MPU_GYRO_SENS_250_SENS /*/ (1000 / 120)*/);
     d38:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <All_Axis_ROW+0x8>
     d3c:	70 91 cf 00 	lds	r23, 0x00CF	; 0x8000cf <All_Axis_ROW+0x9>
     d40:	07 2e       	mov	r0, r23
     d42:	00 0c       	add	r0, r0
     d44:	88 0b       	sbc	r24, r24
     d46:	99 0b       	sbc	r25, r25
     d48:	0e d4       	rcall	.+2076   	; 0x1566 <__floatsisf>
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	43 e0       	ldi	r20, 0x03	; 3
     d50:	53 e4       	ldi	r21, 0x43	; 67
     d52:	9f d3       	rcall	.+1854   	; 0x1492 <__divsf3>
     d54:	2b 01       	movw	r4, r22
     d56:	3c 01       	movw	r6, r24
     d58:	f1 01       	movw	r30, r2
     d5a:	60 87       	std	Z+8, r22	; 0x08
     d5c:	71 87       	std	Z+9, r23	; 0x09
     d5e:	82 87       	std	Z+10, r24	; 0x0a
     d60:	93 87       	std	Z+11, r25	; 0x0b
		All_Axis.z_gyro = ((All_Axis_ROW.Zgyro_raw /*- offsetGZ*/) / _MPU_GYRO_SENS_250_SENS /*/ (1000 / 120)*/);
     d62:	60 91 d0 00 	lds	r22, 0x00D0	; 0x8000d0 <All_Axis_ROW+0xa>
     d66:	70 91 d1 00 	lds	r23, 0x00D1	; 0x8000d1 <All_Axis_ROW+0xb>
     d6a:	07 2e       	mov	r0, r23
     d6c:	00 0c       	add	r0, r0
     d6e:	88 0b       	sbc	r24, r24
     d70:	99 0b       	sbc	r25, r25
     d72:	f9 d3       	rcall	.+2034   	; 0x1566 <__floatsisf>
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	43 e0       	ldi	r20, 0x03	; 3
     d7a:	53 e4       	ldi	r21, 0x43	; 67
     d7c:	8a d3       	rcall	.+1812   	; 0x1492 <__divsf3>
     d7e:	f1 01       	movw	r30, r2
     d80:	60 8b       	std	Z+16, r22	; 0x10
     d82:	71 8b       	std	Z+17, r23	; 0x11
     d84:	82 8b       	std	Z+18, r24	; 0x12
     d86:	93 8b       	std	Z+19, r25	; 0x13
// 		//==================Simple KALMAN filter==================
// 		filtered_Y = KOEF * y_accel + (1 - KOEF) * y_accel_OLD;
// 		y_accel_OLD = y_accel;
// 		//========================================================
		//X_angle = kalman_filter(x_accel, x_gyro, 110);
		Y_angle = kalman_filter(All_Axis.y_accel, All_Axis.y_gyro, 27.0);
     d88:	e1 2c       	mov	r14, r1
     d8a:	f1 2c       	mov	r15, r1
     d8c:	08 ed       	ldi	r16, 0xD8	; 216
     d8e:	11 e4       	ldi	r17, 0x41	; 65
     d90:	a3 01       	movw	r20, r6
     d92:	92 01       	movw	r18, r4
     d94:	c5 01       	movw	r24, r10
     d96:	b4 01       	movw	r22, r8
     d98:	00 dc       	rcall	.-2048   	; 0x59a <kalman_filter>
     d9a:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <Y_angle>
     d9e:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <Y_angle+0x1>
     da2:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <Y_angle+0x2>
     da6:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <Y_angle+0x3>
		//Z_angle = kalman_filter(z_accel, z_gyro, 110); //t prev = 120
	//====================================Output depending on the type BEGIN======================================
		if (Angle_Type == RB_DATA_TYPE){
     daa:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <Angle_Type>
     dae:	8a 3f       	cpi	r24, 0xFA	; 250
     db0:	a9 f4       	brne	.+42     	; 0xddc <main+0x202>
			Y_angle -= 90.0;
     db2:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <Y_angle>
     db6:	70 91 ab 00 	lds	r23, 0x00AB	; 0x8000ab <Y_angle+0x1>
     dba:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <Y_angle+0x2>
     dbe:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <Y_angle+0x3>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	44 eb       	ldi	r20, 0xB4	; 180
     dc8:	52 e4       	ldi	r21, 0x42	; 66
     dca:	98 d2       	rcall	.+1328   	; 0x12fc <__subsf3>
     dcc:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <Y_angle>
     dd0:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <Y_angle+0x1>
     dd4:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <Y_angle+0x2>
     dd8:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <Y_angle+0x3>
		}
		if (Y_angle <= 180.0){
     ddc:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <Y_angle>
     de0:	70 91 ab 00 	lds	r23, 0x00AB	; 0x8000ab <Y_angle+0x1>
     de4:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <Y_angle+0x2>
     de8:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <Y_angle+0x3>
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	44 e3       	ldi	r20, 0x34	; 52
     df2:	53 e4       	ldi	r21, 0x43	; 67
     df4:	4a d3       	rcall	.+1684   	; 0x148a <__cmpsf2>
     df6:	18 16       	cp	r1, r24
     df8:	8c f0       	brlt	.+34     	; 0xe1c <main+0x242>
			Y_angle = Y_angle;
     dfa:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <Y_angle>
     dfe:	90 91 ab 00 	lds	r25, 0x00AB	; 0x8000ab <Y_angle+0x1>
     e02:	a0 91 ac 00 	lds	r26, 0x00AC	; 0x8000ac <Y_angle+0x2>
     e06:	b0 91 ad 00 	lds	r27, 0x00AD	; 0x8000ad <Y_angle+0x3>
     e0a:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <Y_angle>
     e0e:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <Y_angle+0x1>
     e12:	a0 93 ac 00 	sts	0x00AC, r26	; 0x8000ac <Y_angle+0x2>
     e16:	b0 93 ad 00 	sts	0x00AD, r27	; 0x8000ad <Y_angle+0x3>
     e1a:	15 c0       	rjmp	.+42     	; 0xe46 <main+0x26c>
		}else{
			Y_angle = Y_angle - 360.0;
     e1c:	60 91 aa 00 	lds	r22, 0x00AA	; 0x8000aa <Y_angle>
     e20:	70 91 ab 00 	lds	r23, 0x00AB	; 0x8000ab <Y_angle+0x1>
     e24:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <Y_angle+0x2>
     e28:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <Y_angle+0x3>
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	44 eb       	ldi	r20, 0xB4	; 180
     e32:	53 e4       	ldi	r21, 0x43	; 67
     e34:	63 d2       	rcall	.+1222   	; 0x12fc <__subsf3>
     e36:	60 93 aa 00 	sts	0x00AA, r22	; 0x8000aa <Y_angle>
     e3a:	70 93 ab 00 	sts	0x00AB, r23	; 0x8000ab <Y_angle+0x1>
     e3e:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <Y_angle+0x2>
     e42:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <Y_angle+0x3>
		}
		bool temp_flag;
		#ifdef DEBUG_MOD
		temp_flag = 1;
		#endif
		if (Angle_Type == BOLLARD_DATA_TYPE || temp_flag)
     e46:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <Angle_Type>
		{
			if (abs(All_Axis_ROW.Yaccel_raw) > 12000)
     e4a:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <All_Axis_ROW+0x2>
     e4e:	30 91 c9 00 	lds	r19, 0x00C9	; 0x8000c9 <All_Axis_ROW+0x3>
     e52:	c9 01       	movw	r24, r18
     e54:	33 23       	and	r19, r19
     e56:	24 f4       	brge	.+8      	; 0xe60 <main+0x286>
     e58:	88 27       	eor	r24, r24
     e5a:	99 27       	eor	r25, r25
     e5c:	82 1b       	sub	r24, r18
     e5e:	93 0b       	sbc	r25, r19
     e60:	81 3e       	cpi	r24, 0xE1	; 225
     e62:	fe e2       	ldi	r31, 0x2E	; 46
     e64:	9f 07       	cpc	r25, r31
     e66:	0c f4       	brge	.+2      	; 0xe6a <main+0x290>
     e68:	47 c0       	rjmp	.+142    	; 0xef8 <main+0x31e>
			{
				if(abs(MAX_Accel_Value_X) < abs(All_Axis_ROW.Xaccel_raw)){
     e6a:	40 91 c6 00 	lds	r20, 0x00C6	; 0x8000c6 <All_Axis_ROW>
     e6e:	50 91 c7 00 	lds	r21, 0x00C7	; 0x8000c7 <All_Axis_ROW+0x1>
     e72:	60 91 a8 00 	lds	r22, 0x00A8	; 0x8000a8 <MAX_Accel_Value_X>
     e76:	70 91 a9 00 	lds	r23, 0x00A9	; 0x8000a9 <MAX_Accel_Value_X+0x1>
     e7a:	77 23       	and	r23, r23
     e7c:	1c f4       	brge	.+6      	; 0xe84 <main+0x2aa>
     e7e:	71 95       	neg	r23
     e80:	61 95       	neg	r22
     e82:	71 09       	sbc	r23, r1
     e84:	fa 01       	movw	r30, r20
     e86:	55 23       	and	r21, r21
     e88:	24 f4       	brge	.+8      	; 0xe92 <main+0x2b8>
     e8a:	ee 27       	eor	r30, r30
     e8c:	ff 27       	eor	r31, r31
     e8e:	e4 1b       	sub	r30, r20
     e90:	f5 0b       	sbc	r31, r21
     e92:	6e 17       	cp	r22, r30
     e94:	7f 07       	cpc	r23, r31
     e96:	24 f4       	brge	.+8      	; 0xea0 <main+0x2c6>
					MAX_Accel_Value_X = All_Axis_ROW.Xaccel_raw;
     e98:	50 93 a9 00 	sts	0x00A9, r21	; 0x8000a9 <MAX_Accel_Value_X+0x1>
     e9c:	40 93 a8 00 	sts	0x00A8, r20	; 0x8000a8 <MAX_Accel_Value_X>
				}
				if(abs(MAX_Accel_Value_Y) < abs(All_Axis_ROW.Yaccel_raw)){
     ea0:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <MAX_Accel_Value_Y>
     ea4:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <MAX_Accel_Value_Y+0x1>
     ea8:	55 23       	and	r21, r21
     eaa:	1c f4       	brge	.+6      	; 0xeb2 <main+0x2d8>
     eac:	51 95       	neg	r21
     eae:	41 95       	neg	r20
     eb0:	51 09       	sbc	r21, r1
     eb2:	48 17       	cp	r20, r24
     eb4:	59 07       	cpc	r21, r25
     eb6:	24 f4       	brge	.+8      	; 0xec0 <main+0x2e6>
					MAX_Accel_Value_Y = All_Axis_ROW.Yaccel_raw;
     eb8:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <MAX_Accel_Value_Y+0x1>
     ebc:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <MAX_Accel_Value_Y>
				}
				if(abs(MAX_Accel_Value_Z) < abs(All_Axis_ROW.Zaccel_raw)){
     ec0:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <All_Axis_ROW+0x4>
     ec4:	90 91 cb 00 	lds	r25, 0x00CB	; 0x8000cb <All_Axis_ROW+0x5>
     ec8:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <MAX_Accel_Value_Z>
     ecc:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <MAX_Accel_Value_Z+0x1>
     ed0:	33 23       	and	r19, r19
     ed2:	1c f4       	brge	.+6      	; 0xeda <main+0x300>
     ed4:	31 95       	neg	r19
     ed6:	21 95       	neg	r18
     ed8:	31 09       	sbc	r19, r1
     eda:	ac 01       	movw	r20, r24
     edc:	99 23       	and	r25, r25
     ede:	24 f4       	brge	.+8      	; 0xee8 <main+0x30e>
     ee0:	44 27       	eor	r20, r20
     ee2:	55 27       	eor	r21, r21
     ee4:	48 1b       	sub	r20, r24
     ee6:	59 0b       	sbc	r21, r25
     ee8:	24 17       	cp	r18, r20
     eea:	35 07       	cpc	r19, r21
     eec:	8c f4       	brge	.+34     	; 0xf10 <main+0x336>
					MAX_Accel_Value_Z = All_Axis_ROW.Zaccel_raw;
     eee:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <MAX_Accel_Value_Z+0x1>
     ef2:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <MAX_Accel_Value_Z>
     ef6:	0c c0       	rjmp	.+24     	; 0xf10 <main+0x336>
				}
			}
			else
			{
				MAX_Accel_Value_X = 10;
     ef8:	d0 92 a9 00 	sts	0x00A9, r13	; 0x8000a9 <MAX_Accel_Value_X+0x1>
     efc:	c0 92 a8 00 	sts	0x00A8, r12	; 0x8000a8 <MAX_Accel_Value_X>
				MAX_Accel_Value_Y = 10;
     f00:	d0 92 a7 00 	sts	0x00A7, r13	; 0x8000a7 <MAX_Accel_Value_Y+0x1>
     f04:	c0 92 a6 00 	sts	0x00A6, r12	; 0x8000a6 <MAX_Accel_Value_Y>
				MAX_Accel_Value_Z = 10;
     f08:	d0 92 a5 00 	sts	0x00A5, r13	; 0x8000a5 <MAX_Accel_Value_Z+0x1>
     f0c:	c0 92 a4 00 	sts	0x00A4, r12	; 0x8000a4 <MAX_Accel_Value_Z>
			}
		}
	//=====================================Output depending on the type END=======================================
	#ifdef DEBUG_MOD
		arduino_ploter();
     f10:	34 de       	rcall	.-920    	; 0xb7a <arduino_ploter>
	#endif
    }
     f12:	8b ce       	rjmp	.-746    	; 0xc2a <main+0x50>

00000f14 <MPU6050_BurstRead>:
		return _MPU_OK;
	}
	
	return _MPU_ERROR;
	
}
     f14:	af 92       	push	r10
     f16:	bf 92       	push	r11
     f18:	cf 92       	push	r12
     f1a:	df 92       	push	r13
     f1c:	ef 92       	push	r14
     f1e:	ff 92       	push	r15
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	8b 01       	movw	r16, r22
     f26:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <g_mpu_com_resp>
     f2a:	c4 2e       	mov	r12, r20
     f2c:	d1 2c       	mov	r13, r1
     f2e:	e1 2c       	mov	r14, r1
     f30:	f1 2c       	mov	r15, r1
     f32:	48 2f       	mov	r20, r24
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	59 01       	movw	r10, r18
     f3c:	28 e0       	ldi	r18, 0x08	; 8
     f3e:	80 ed       	ldi	r24, 0xD0	; 208
     f40:	19 da       	rcall	.-3022   	; 0x374 <I2C_Mem_Read>
     f42:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <g_mpu_com_resp>
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	08 95       	ret

00000f58 <MPU6050_SetParameters>:
     f58:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <MPU6050_Config+0x4>
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	99 f0       	breq	.+38     	; 0xf86 <MPU6050_SetParameters+0x2e>
     f60:	28 f0       	brcs	.+10     	; 0xf6c <MPU6050_SetParameters+0x14>
     f62:	82 30       	cpi	r24, 0x02	; 2
     f64:	e9 f0       	breq	.+58     	; 0xfa0 <MPU6050_SetParameters+0x48>
     f66:	83 30       	cpi	r24, 0x03	; 3
     f68:	41 f1       	breq	.+80     	; 0xfba <MPU6050_SetParameters+0x62>
     f6a:	34 c0       	rjmp	.+104    	; 0xfd4 <MPU6050_SetParameters+0x7c>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 e8       	ldi	r26, 0x80	; 128
     f72:	b6 e4       	ldi	r27, 0x46	; 70
     f74:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <MPU6050_Parameter+0x4>
     f78:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <MPU6050_Parameter+0x5>
     f7c:	a0 93 de 00 	sts	0x00DE, r26	; 0x8000de <MPU6050_Parameter+0x6>
     f80:	b0 93 df 00 	sts	0x00DF, r27	; 0x8000df <MPU6050_Parameter+0x7>
     f84:	33 c0       	rjmp	.+102    	; 0xfec <MPU6050_SetParameters+0x94>
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	a0 e0       	ldi	r26, 0x00	; 0
     f8c:	b6 e4       	ldi	r27, 0x46	; 70
     f8e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <MPU6050_Parameter+0x4>
     f92:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <MPU6050_Parameter+0x5>
     f96:	a0 93 de 00 	sts	0x00DE, r26	; 0x8000de <MPU6050_Parameter+0x6>
     f9a:	b0 93 df 00 	sts	0x00DF, r27	; 0x8000df <MPU6050_Parameter+0x7>
     f9e:	26 c0       	rjmp	.+76     	; 0xfec <MPU6050_SetParameters+0x94>
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	a0 e8       	ldi	r26, 0x80	; 128
     fa6:	b5 e4       	ldi	r27, 0x45	; 69
     fa8:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <MPU6050_Parameter+0x4>
     fac:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <MPU6050_Parameter+0x5>
     fb0:	a0 93 de 00 	sts	0x00DE, r26	; 0x8000de <MPU6050_Parameter+0x6>
     fb4:	b0 93 df 00 	sts	0x00DF, r27	; 0x8000df <MPU6050_Parameter+0x7>
     fb8:	19 c0       	rjmp	.+50     	; 0xfec <MPU6050_SetParameters+0x94>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b5 e4       	ldi	r27, 0x45	; 69
     fc2:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <MPU6050_Parameter+0x4>
     fc6:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <MPU6050_Parameter+0x5>
     fca:	a0 93 de 00 	sts	0x00DE, r26	; 0x8000de <MPU6050_Parameter+0x6>
     fce:	b0 93 df 00 	sts	0x00DF, r27	; 0x8000df <MPU6050_Parameter+0x7>
     fd2:	0c c0       	rjmp	.+24     	; 0xfec <MPU6050_SetParameters+0x94>
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a0 e8       	ldi	r26, 0x80	; 128
     fda:	b6 e4       	ldi	r27, 0x46	; 70
     fdc:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <MPU6050_Parameter+0x4>
     fe0:	90 93 dd 00 	sts	0x00DD, r25	; 0x8000dd <MPU6050_Parameter+0x5>
     fe4:	a0 93 de 00 	sts	0x00DE, r26	; 0x8000de <MPU6050_Parameter+0x6>
     fe8:	b0 93 df 00 	sts	0x00DF, r27	; 0x8000df <MPU6050_Parameter+0x7>
     fec:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <MPU6050_Config+0x3>
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	99 f0       	breq	.+38     	; 0x101a <MPU6050_SetParameters+0xc2>
     ff4:	28 f0       	brcs	.+10     	; 0x1000 <MPU6050_SetParameters+0xa8>
     ff6:	82 30       	cpi	r24, 0x02	; 2
     ff8:	e9 f0       	breq	.+58     	; 0x1034 <MPU6050_SetParameters+0xdc>
     ffa:	83 30       	cpi	r24, 0x03	; 3
     ffc:	41 f1       	breq	.+80     	; 0x104e <MPU6050_SetParameters+0xf6>
     ffe:	34 c0       	rjmp	.+104    	; 0x1068 <MPU6050_SetParameters+0x110>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	a3 e0       	ldi	r26, 0x03	; 3
    1006:	b3 e4       	ldi	r27, 0x43	; 67
    1008:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <MPU6050_Parameter>
    100c:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <MPU6050_Parameter+0x1>
    1010:	a0 93 da 00 	sts	0x00DA, r26	; 0x8000da <MPU6050_Parameter+0x2>
    1014:	b0 93 db 00 	sts	0x00DB, r27	; 0x8000db <MPU6050_Parameter+0x3>
    1018:	08 95       	ret
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a3 e8       	ldi	r26, 0x83	; 131
    1020:	b2 e4       	ldi	r27, 0x42	; 66
    1022:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <MPU6050_Parameter>
    1026:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <MPU6050_Parameter+0x1>
    102a:	a0 93 da 00 	sts	0x00DA, r26	; 0x8000da <MPU6050_Parameter+0x2>
    102e:	b0 93 db 00 	sts	0x00DB, r27	; 0x8000db <MPU6050_Parameter+0x3>
    1032:	08 95       	ret
    1034:	83 e3       	ldi	r24, 0x33	; 51
    1036:	93 e3       	ldi	r25, 0x33	; 51
    1038:	a3 e0       	ldi	r26, 0x03	; 3
    103a:	b2 e4       	ldi	r27, 0x42	; 66
    103c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <MPU6050_Parameter>
    1040:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <MPU6050_Parameter+0x1>
    1044:	a0 93 da 00 	sts	0x00DA, r26	; 0x8000da <MPU6050_Parameter+0x2>
    1048:	b0 93 db 00 	sts	0x00DB, r27	; 0x8000db <MPU6050_Parameter+0x3>
    104c:	08 95       	ret
    104e:	83 e3       	ldi	r24, 0x33	; 51
    1050:	93 e3       	ldi	r25, 0x33	; 51
    1052:	a3 e8       	ldi	r26, 0x83	; 131
    1054:	b1 e4       	ldi	r27, 0x41	; 65
    1056:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <MPU6050_Parameter>
    105a:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <MPU6050_Parameter+0x1>
    105e:	a0 93 da 00 	sts	0x00DA, r26	; 0x8000da <MPU6050_Parameter+0x2>
    1062:	b0 93 db 00 	sts	0x00DB, r27	; 0x8000db <MPU6050_Parameter+0x3>
    1066:	08 95       	ret
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a3 e0       	ldi	r26, 0x03	; 3
    106e:	b3 e4       	ldi	r27, 0x43	; 67
    1070:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <MPU6050_Parameter>
    1074:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <MPU6050_Parameter+0x1>
    1078:	a0 93 da 00 	sts	0x00DA, r26	; 0x8000da <MPU6050_Parameter+0x2>
    107c:	b0 93 db 00 	sts	0x00DB, r27	; 0x8000db <MPU6050_Parameter+0x3>
    1080:	08 95       	ret

00001082 <MPU6050_IsReady>:
    1082:	ac 01       	movw	r20, r24
    1084:	65 e0       	ldi	r22, 0x05	; 5
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 ed       	ldi	r24, 0xD0	; 208
    108a:	75 d8       	rcall	.-3862   	; 0x176 <I2C_IsDeviceReady>
    108c:	08 95       	ret

0000108e <MPU6050_SingleWrite>:
    108e:	af 92       	push	r10
    1090:	bf 92       	push	r11
    1092:	cf 92       	push	r12
    1094:	df 92       	push	r13
    1096:	ef 92       	push	r14
    1098:	ff 92       	push	r15
    109a:	0f 93       	push	r16
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	1f 92       	push	r1
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
    10a8:	18 2f       	mov	r17, r24
    10aa:	69 83       	std	Y+1, r22	; 0x01
    10ac:	5a 01       	movw	r10, r20
    10ae:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <g_mpu_com_resp>
    10b2:	ca 01       	movw	r24, r20
    10b4:	e6 df       	rcall	.-52     	; 0x1082 <MPU6050_IsReady>
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	81 f4       	brne	.+32     	; 0x10da <MPU6050_SingleWrite+0x4c>
    10ba:	41 2f       	mov	r20, r17
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	c1 2c       	mov	r12, r1
    10c4:	d1 2c       	mov	r13, r1
    10c6:	76 01       	movw	r14, r12
    10c8:	c3 94       	inc	r12
    10ca:	8e 01       	movw	r16, r28
    10cc:	0f 5f       	subi	r16, 0xFF	; 255
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	28 e0       	ldi	r18, 0x08	; 8
    10d2:	80 ed       	ldi	r24, 0xD0	; 208
    10d4:	7d d8       	rcall	.-3846   	; 0x1d0 <I2C_Mem_Write>
    10d6:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <g_mpu_com_resp>
    10da:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <g_mpu_com_resp>
    10de:	0f 90       	pop	r0
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	bf 90       	pop	r11
    10f2:	af 90       	pop	r10
    10f4:	08 95       	ret

000010f6 <MPU6050_AutoInit>:
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	8c 01       	movw	r16, r24
    110c:	2d d8       	rcall	.-4006   	; 0x168 <I2C_Init>
    110e:	c6 e2       	ldi	r28, 0x26	; 38
    1110:	d1 e0       	ldi	r29, 0x01	; 1
    1112:	18 82       	st	Y, r1
    1114:	1a 82       	std	Y+2, r1	; 0x02
    1116:	1e 82       	std	Y+6, r1	; 0x06
    1118:	19 82       	std	Y+1, r1	; 0x01
    111a:	0f 2e       	mov	r0, r31
    111c:	fb e2       	ldi	r31, 0x2B	; 43
    111e:	af 2e       	mov	r10, r31
    1120:	f1 e0       	ldi	r31, 0x01	; 1
    1122:	bf 2e       	mov	r11, r31
    1124:	f0 2d       	mov	r31, r0
    1126:	f5 01       	movw	r30, r10
    1128:	80 81       	ld	r24, Z
    112a:	8c 7f       	andi	r24, 0xFC	; 252
    112c:	8b 7f       	andi	r24, 0xFB	; 251
    112e:	80 83       	st	Z, r24
    1130:	1b 82       	std	Y+3, r1	; 0x03
    1132:	1c 82       	std	Y+4, r1	; 0x04
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	8f 83       	std	Y+7, r24	; 0x07
    1138:	a8 01       	movw	r20, r16
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	88 e3       	ldi	r24, 0x38	; 56
    113e:	a7 df       	rcall	.-178    	; 0x108e <MPU6050_SingleWrite>
    1140:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <g_mpu_com_resp>
    1144:	68 81       	ld	r22, Y
    1146:	61 50       	subi	r22, 0x01	; 1
    1148:	a8 01       	movw	r20, r16
    114a:	89 e1       	ldi	r24, 0x19	; 25
    114c:	a0 df       	rcall	.-192    	; 0x108e <MPU6050_SingleWrite>
    114e:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <g_mpu_com_resp>
    1152:	89 0f       	add	r24, r25
    1154:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <g_mpu_com_resp>
    1158:	6b 81       	ldd	r22, Y+3	; 0x03
    115a:	66 0f       	add	r22, r22
    115c:	66 0f       	add	r22, r22
    115e:	66 0f       	add	r22, r22
    1160:	a8 01       	movw	r20, r16
    1162:	8b e1       	ldi	r24, 0x1B	; 27
    1164:	94 df       	rcall	.-216    	; 0x108e <MPU6050_SingleWrite>
    1166:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <g_mpu_com_resp>
    116a:	89 0f       	add	r24, r25
    116c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <g_mpu_com_resp>
    1170:	6c 81       	ldd	r22, Y+4	; 0x04
    1172:	66 0f       	add	r22, r22
    1174:	66 0f       	add	r22, r22
    1176:	66 0f       	add	r22, r22
    1178:	a8 01       	movw	r20, r16
    117a:	8c e1       	ldi	r24, 0x1C	; 28
    117c:	88 df       	rcall	.-240    	; 0x108e <MPU6050_SingleWrite>
    117e:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <g_mpu_com_resp>
    1182:	89 0f       	add	r24, r25
    1184:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <g_mpu_com_resp>
    1188:	69 81       	ldd	r22, Y+1	; 0x01
    118a:	66 0f       	add	r22, r22
    118c:	66 0f       	add	r22, r22
    118e:	66 0f       	add	r22, r22
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	68 2b       	or	r22, r24
    1194:	a8 01       	movw	r20, r16
    1196:	8a e1       	ldi	r24, 0x1A	; 26
    1198:	7a df       	rcall	.-268    	; 0x108e <MPU6050_SingleWrite>
    119a:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <g_mpu_com_resp>
    119e:	89 0f       	add	r24, r25
    11a0:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <g_mpu_com_resp>
    11a4:	f5 01       	movw	r30, r10
    11a6:	80 81       	ld	r24, Z
    11a8:	68 2f       	mov	r22, r24
    11aa:	67 95       	ror	r22
    11ac:	66 27       	eor	r22, r22
    11ae:	67 95       	ror	r22
    11b0:	81 fb       	bst	r24, 1
    11b2:	cc 24       	eor	r12, r12
    11b4:	c0 f8       	bld	r12, 0
    11b6:	d1 2c       	mov	r13, r1
    11b8:	00 24       	eor	r0, r0
    11ba:	d6 94       	lsr	r13
    11bc:	c7 94       	ror	r12
    11be:	07 94       	ror	r0
    11c0:	d6 94       	lsr	r13
    11c2:	c7 94       	ror	r12
    11c4:	07 94       	ror	r0
    11c6:	dc 2c       	mov	r13, r12
    11c8:	c0 2c       	mov	r12, r0
    11ca:	c6 2a       	or	r12, r22
    11cc:	82 fb       	bst	r24, 2
    11ce:	ee 24       	eor	r14, r14
    11d0:	e0 f8       	bld	r14, 0
    11d2:	f1 2c       	mov	r15, r1
    11d4:	ee 0c       	add	r14, r14
    11d6:	ff 1c       	adc	r15, r15
    11d8:	ee 0c       	add	r14, r14
    11da:	ff 1c       	adc	r15, r15
    11dc:	ee 0c       	add	r14, r14
    11de:	ff 1c       	adc	r15, r15
    11e0:	ee 0c       	add	r14, r14
    11e2:	ff 1c       	adc	r15, r15
    11e4:	ee 0c       	add	r14, r14
    11e6:	ff 1c       	adc	r15, r15
    11e8:	6c 2d       	mov	r22, r12
    11ea:	6e 29       	or	r22, r14
    11ec:	a8 01       	movw	r20, r16
    11ee:	87 e3       	ldi	r24, 0x37	; 55
    11f0:	4e df       	rcall	.-356    	; 0x108e <MPU6050_SingleWrite>
    11f2:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <g_mpu_com_resp>
    11f6:	89 0f       	add	r24, r25
    11f8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <g_mpu_com_resp>
    11fc:	a8 01       	movw	r20, r16
    11fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1200:	8b e6       	ldi	r24, 0x6B	; 107
    1202:	45 df       	rcall	.-374    	; 0x108e <MPU6050_SingleWrite>
    1204:	90 91 e0 00 	lds	r25, 0x00E0	; 0x8000e0 <g_mpu_com_resp>
    1208:	89 0f       	add	r24, r25
    120a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <g_mpu_com_resp>
    120e:	87 30       	cpi	r24, 0x07	; 7
    1210:	19 f4       	brne	.+6      	; 0x1218 <MPU6050_AutoInit+0x122>
    1212:	a2 de       	rcall	.-700    	; 0xf58 <MPU6050_SetParameters>
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	01 c0       	rjmp	.+2      	; 0x121a <MPU6050_AutoInit+0x124>
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	df 91       	pop	r29
    121c:	cf 91       	pop	r28
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	df 90       	pop	r13
    1228:	cf 90       	pop	r12
    122a:	bf 90       	pop	r11
    122c:	af 90       	pop	r10
    122e:	08 95       	ret

00001230 <MPU6050_GetRawAccel>:
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	00 d0       	rcall	.+0      	; 0x123a <MPU6050_GetRawAccel+0xa>
    123a:	00 d0       	rcall	.+0      	; 0x123c <MPU6050_GetRawAccel+0xc>
    123c:	00 d0       	rcall	.+0      	; 0x123e <MPU6050_GetRawAccel+0xe>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	8c 01       	movw	r16, r24
    1244:	9b 01       	movw	r18, r22
    1246:	46 e0       	ldi	r20, 0x06	; 6
    1248:	be 01       	movw	r22, r28
    124a:	6f 5f       	subi	r22, 0xFF	; 255
    124c:	7f 4f       	sbci	r23, 0xFF	; 255
    124e:	8b e3       	ldi	r24, 0x3B	; 59
    1250:	61 de       	rcall	.-830    	; 0xf14 <MPU6050_BurstRead>
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	a1 f4       	brne	.+40     	; 0x127e <MPU6050_GetRawAccel+0x4e>
    1256:	fe 01       	movw	r30, r28
    1258:	31 96       	adiw	r30, 0x01	; 1
    125a:	a8 01       	movw	r20, r16
    125c:	4a 5f       	subi	r20, 0xFA	; 250
    125e:	5f 4f       	sbci	r21, 0xFF	; 255
    1260:	20 81       	ld	r18, Z
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	32 2f       	mov	r19, r18
    1266:	22 27       	eor	r18, r18
    1268:	91 81       	ldd	r25, Z+1	; 0x01
    126a:	29 2b       	or	r18, r25
    126c:	d8 01       	movw	r26, r16
    126e:	2d 93       	st	X+, r18
    1270:	3d 93       	st	X+, r19
    1272:	8d 01       	movw	r16, r26
    1274:	32 96       	adiw	r30, 0x02	; 2
    1276:	4a 17       	cp	r20, r26
    1278:	5b 07       	cpc	r21, r27
    127a:	91 f7       	brne	.-28     	; 0x1260 <MPU6050_GetRawAccel+0x30>
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <MPU6050_GetRawAccel+0x50>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	26 96       	adiw	r28, 0x06	; 6
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <MPU6050_GetRawGyro>:
		     -> status is _MPU_OK/_MPU_ERROR
		   
*/

uint8_t MPU6050_GetRawGyro( int16_t *raw_gyro_str, uint16_t _time_out) /* Function for take Gyroscope value */
{
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	00 d0       	rcall	.+0      	; 0x12a0 <MPU6050_GetRawGyro+0xa>
    12a0:	00 d0       	rcall	.+0      	; 0x12a2 <MPU6050_GetRawGyro+0xc>
    12a2:	00 d0       	rcall	.+0      	; 0x12a4 <MPU6050_GetRawGyro+0xe>
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
    12a8:	8c 01       	movw	r16, r24
    12aa:	9b 01       	movw	r18, r22
	/* ----------- Create variable ----------- */
	uint8_t write_counter; /* Variable for count */
	uint8_t raw_gyro[_MPU_AXIS_ALL_REG_LEGTH]; /* String for take value from registers */
	
	/* ----------- Read value from MPU60X0 ----------- */
	if ( MPU6050_BurstRead(_REG_GYRO_XOUT_H, raw_gyro, _MPU_AXIS_ALL_REG_LEGTH, _time_out) == _MPU_OK ) /* The instructions are complete */
    12ac:	46 e0       	ldi	r20, 0x06	; 6
    12ae:	be 01       	movw	r22, r28
    12b0:	6f 5f       	subi	r22, 0xFF	; 255
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	83 e4       	ldi	r24, 0x43	; 67
    12b6:	2e de       	rcall	.-932    	; 0xf14 <MPU6050_BurstRead>
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	a1 f4       	brne	.+40     	; 0x12e4 <MPU6050_GetRawGyro+0x4e>
    12bc:	fe 01       	movw	r30, r28
    12be:	31 96       	adiw	r30, 0x01	; 1
    12c0:	a8 01       	movw	r20, r16
    12c2:	4a 5f       	subi	r20, 0xFA	; 250
    12c4:	5f 4f       	sbci	r21, 0xFF	; 255
	{
		/* --- Save Value in str --- */
		for ( write_counter = 0 ; write_counter < _MPU_AXIS_ALL_REG_LEGTH ; write_counter += _MPU_AXIS_REG_LENGTH ) /* Loop for save data to string */
		{
			
			*raw_gyro_str = ( (int16_t)raw_gyro[write_counter] << _MPU_HIGH_BYTE_SHIFT ) | (int16_t)raw_gyro[write_counter + 1]; /* Write data */
    12c6:	20 81       	ld	r18, Z
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	32 2f       	mov	r19, r18
    12cc:	22 27       	eor	r18, r18
    12ce:	91 81       	ldd	r25, Z+1	; 0x01
    12d0:	29 2b       	or	r18, r25
    12d2:	d8 01       	movw	r26, r16
    12d4:	2d 93       	st	X+, r18
    12d6:	3d 93       	st	X+, r19
    12d8:	8d 01       	movw	r16, r26
    12da:	32 96       	adiw	r30, 0x02	; 2
	
	/* ----------- Read value from MPU60X0 ----------- */
	if ( MPU6050_BurstRead(_REG_GYRO_XOUT_H, raw_gyro, _MPU_AXIS_ALL_REG_LEGTH, _time_out) == _MPU_OK ) /* The instructions are complete */
	{
		/* --- Save Value in str --- */
		for ( write_counter = 0 ; write_counter < _MPU_AXIS_ALL_REG_LEGTH ; write_counter += _MPU_AXIS_REG_LENGTH ) /* Loop for save data to string */
    12dc:	4a 17       	cp	r20, r26
    12de:	5b 07       	cpc	r21, r27
    12e0:	91 f7       	brne	.-28     	; 0x12c6 <MPU6050_GetRawGyro+0x30>
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <MPU6050_GetRawGyro+0x50>
		
		return _MPU_OK;
		
	}
	
	return _MPU_ERROR;
    12e4:	80 e0       	ldi	r24, 0x00	; 0
	
}
    12e6:	26 96       	adiw	r28, 0x06	; 6
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	08 95       	ret

000012fc <__subsf3>:
    12fc:	50 58       	subi	r21, 0x80	; 128

000012fe <__addsf3>:
    12fe:	bb 27       	eor	r27, r27
    1300:	aa 27       	eor	r26, r26
    1302:	0e d0       	rcall	.+28     	; 0x1320 <__addsf3x>
    1304:	cb c1       	rjmp	.+918    	; 0x169c <__fp_round>
    1306:	bc d1       	rcall	.+888    	; 0x1680 <__fp_pscA>
    1308:	30 f0       	brcs	.+12     	; 0x1316 <__addsf3+0x18>
    130a:	c1 d1       	rcall	.+898    	; 0x168e <__fp_pscB>
    130c:	20 f0       	brcs	.+8      	; 0x1316 <__addsf3+0x18>
    130e:	31 f4       	brne	.+12     	; 0x131c <__addsf3+0x1e>
    1310:	9f 3f       	cpi	r25, 0xFF	; 255
    1312:	11 f4       	brne	.+4      	; 0x1318 <__addsf3+0x1a>
    1314:	1e f4       	brtc	.+6      	; 0x131c <__addsf3+0x1e>
    1316:	8c c1       	rjmp	.+792    	; 0x1630 <__fp_nan>
    1318:	0e f4       	brtc	.+2      	; 0x131c <__addsf3+0x1e>
    131a:	e0 95       	com	r30
    131c:	e7 fb       	bst	r30, 7
    131e:	82 c1       	rjmp	.+772    	; 0x1624 <__fp_inf>

00001320 <__addsf3x>:
    1320:	e9 2f       	mov	r30, r25
    1322:	cd d1       	rcall	.+922    	; 0x16be <__fp_split3>
    1324:	80 f3       	brcs	.-32     	; 0x1306 <__addsf3+0x8>
    1326:	ba 17       	cp	r27, r26
    1328:	62 07       	cpc	r22, r18
    132a:	73 07       	cpc	r23, r19
    132c:	84 07       	cpc	r24, r20
    132e:	95 07       	cpc	r25, r21
    1330:	18 f0       	brcs	.+6      	; 0x1338 <__addsf3x+0x18>
    1332:	71 f4       	brne	.+28     	; 0x1350 <__addsf3x+0x30>
    1334:	9e f5       	brtc	.+102    	; 0x139c <__addsf3x+0x7c>
    1336:	e5 c1       	rjmp	.+970    	; 0x1702 <__fp_zero>
    1338:	0e f4       	brtc	.+2      	; 0x133c <__addsf3x+0x1c>
    133a:	e0 95       	com	r30
    133c:	0b 2e       	mov	r0, r27
    133e:	ba 2f       	mov	r27, r26
    1340:	a0 2d       	mov	r26, r0
    1342:	0b 01       	movw	r0, r22
    1344:	b9 01       	movw	r22, r18
    1346:	90 01       	movw	r18, r0
    1348:	0c 01       	movw	r0, r24
    134a:	ca 01       	movw	r24, r20
    134c:	a0 01       	movw	r20, r0
    134e:	11 24       	eor	r1, r1
    1350:	ff 27       	eor	r31, r31
    1352:	59 1b       	sub	r21, r25
    1354:	99 f0       	breq	.+38     	; 0x137c <__addsf3x+0x5c>
    1356:	59 3f       	cpi	r21, 0xF9	; 249
    1358:	50 f4       	brcc	.+20     	; 0x136e <__addsf3x+0x4e>
    135a:	50 3e       	cpi	r21, 0xE0	; 224
    135c:	68 f1       	brcs	.+90     	; 0x13b8 <__addsf3x+0x98>
    135e:	1a 16       	cp	r1, r26
    1360:	f0 40       	sbci	r31, 0x00	; 0
    1362:	a2 2f       	mov	r26, r18
    1364:	23 2f       	mov	r18, r19
    1366:	34 2f       	mov	r19, r20
    1368:	44 27       	eor	r20, r20
    136a:	58 5f       	subi	r21, 0xF8	; 248
    136c:	f3 cf       	rjmp	.-26     	; 0x1354 <__addsf3x+0x34>
    136e:	46 95       	lsr	r20
    1370:	37 95       	ror	r19
    1372:	27 95       	ror	r18
    1374:	a7 95       	ror	r26
    1376:	f0 40       	sbci	r31, 0x00	; 0
    1378:	53 95       	inc	r21
    137a:	c9 f7       	brne	.-14     	; 0x136e <__addsf3x+0x4e>
    137c:	7e f4       	brtc	.+30     	; 0x139c <__addsf3x+0x7c>
    137e:	1f 16       	cp	r1, r31
    1380:	ba 0b       	sbc	r27, r26
    1382:	62 0b       	sbc	r22, r18
    1384:	73 0b       	sbc	r23, r19
    1386:	84 0b       	sbc	r24, r20
    1388:	ba f0       	brmi	.+46     	; 0x13b8 <__addsf3x+0x98>
    138a:	91 50       	subi	r25, 0x01	; 1
    138c:	a1 f0       	breq	.+40     	; 0x13b6 <__addsf3x+0x96>
    138e:	ff 0f       	add	r31, r31
    1390:	bb 1f       	adc	r27, r27
    1392:	66 1f       	adc	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	88 1f       	adc	r24, r24
    1398:	c2 f7       	brpl	.-16     	; 0x138a <__addsf3x+0x6a>
    139a:	0e c0       	rjmp	.+28     	; 0x13b8 <__addsf3x+0x98>
    139c:	ba 0f       	add	r27, r26
    139e:	62 1f       	adc	r22, r18
    13a0:	73 1f       	adc	r23, r19
    13a2:	84 1f       	adc	r24, r20
    13a4:	48 f4       	brcc	.+18     	; 0x13b8 <__addsf3x+0x98>
    13a6:	87 95       	ror	r24
    13a8:	77 95       	ror	r23
    13aa:	67 95       	ror	r22
    13ac:	b7 95       	ror	r27
    13ae:	f7 95       	ror	r31
    13b0:	9e 3f       	cpi	r25, 0xFE	; 254
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <__addsf3x+0x96>
    13b4:	b3 cf       	rjmp	.-154    	; 0x131c <__addsf3+0x1e>
    13b6:	93 95       	inc	r25
    13b8:	88 0f       	add	r24, r24
    13ba:	08 f0       	brcs	.+2      	; 0x13be <__addsf3x+0x9e>
    13bc:	99 27       	eor	r25, r25
    13be:	ee 0f       	add	r30, r30
    13c0:	97 95       	ror	r25
    13c2:	87 95       	ror	r24
    13c4:	08 95       	ret
    13c6:	5c d1       	rcall	.+696    	; 0x1680 <__fp_pscA>
    13c8:	58 f0       	brcs	.+22     	; 0x13e0 <__addsf3x+0xc0>
    13ca:	80 e8       	ldi	r24, 0x80	; 128
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <__addsf3x+0xb2>
    13d0:	9e ef       	ldi	r25, 0xFE	; 254
    13d2:	5d d1       	rcall	.+698    	; 0x168e <__fp_pscB>
    13d4:	28 f0       	brcs	.+10     	; 0x13e0 <__addsf3x+0xc0>
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	51 e0       	ldi	r21, 0x01	; 1
    13da:	59 f4       	brne	.+22     	; 0x13f2 <atan2+0xe>
    13dc:	5e ef       	ldi	r21, 0xFE	; 254
    13de:	09 c0       	rjmp	.+18     	; 0x13f2 <atan2+0xe>
    13e0:	27 c1       	rjmp	.+590    	; 0x1630 <__fp_nan>
    13e2:	8f c1       	rjmp	.+798    	; 0x1702 <__fp_zero>

000013e4 <atan2>:
    13e4:	e9 2f       	mov	r30, r25
    13e6:	e0 78       	andi	r30, 0x80	; 128
    13e8:	6a d1       	rcall	.+724    	; 0x16be <__fp_split3>
    13ea:	68 f3       	brcs	.-38     	; 0x13c6 <__addsf3x+0xa6>
    13ec:	09 2e       	mov	r0, r25
    13ee:	05 2a       	or	r0, r21
    13f0:	c1 f3       	breq	.-16     	; 0x13e2 <__addsf3x+0xc2>
    13f2:	26 17       	cp	r18, r22
    13f4:	37 07       	cpc	r19, r23
    13f6:	48 07       	cpc	r20, r24
    13f8:	59 07       	cpc	r21, r25
    13fa:	38 f0       	brcs	.+14     	; 0x140a <atan2+0x26>
    13fc:	0e 2e       	mov	r0, r30
    13fe:	07 f8       	bld	r0, 7
    1400:	e0 25       	eor	r30, r0
    1402:	69 f0       	breq	.+26     	; 0x141e <atan2+0x3a>
    1404:	e0 25       	eor	r30, r0
    1406:	e0 64       	ori	r30, 0x40	; 64
    1408:	0a c0       	rjmp	.+20     	; 0x141e <atan2+0x3a>
    140a:	ef 63       	ori	r30, 0x3F	; 63
    140c:	07 f8       	bld	r0, 7
    140e:	00 94       	com	r0
    1410:	07 fa       	bst	r0, 7
    1412:	db 01       	movw	r26, r22
    1414:	b9 01       	movw	r22, r18
    1416:	9d 01       	movw	r18, r26
    1418:	dc 01       	movw	r26, r24
    141a:	ca 01       	movw	r24, r20
    141c:	ad 01       	movw	r20, r26
    141e:	ef 93       	push	r30
    1420:	47 d0       	rcall	.+142    	; 0x14b0 <__divsf3_pse>
    1422:	3c d1       	rcall	.+632    	; 0x169c <__fp_round>
    1424:	0a d0       	rcall	.+20     	; 0x143a <atan>
    1426:	5f 91       	pop	r21
    1428:	55 23       	and	r21, r21
    142a:	31 f0       	breq	.+12     	; 0x1438 <atan2+0x54>
    142c:	2b ed       	ldi	r18, 0xDB	; 219
    142e:	3f e0       	ldi	r19, 0x0F	; 15
    1430:	49 e4       	ldi	r20, 0x49	; 73
    1432:	50 fd       	sbrc	r21, 0
    1434:	49 ec       	ldi	r20, 0xC9	; 201
    1436:	63 cf       	rjmp	.-314    	; 0x12fe <__addsf3>
    1438:	08 95       	ret

0000143a <atan>:
    143a:	df 93       	push	r29
    143c:	dd 27       	eor	r29, r29
    143e:	b9 2f       	mov	r27, r25
    1440:	bf 77       	andi	r27, 0x7F	; 127
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	16 16       	cp	r1, r22
    1448:	17 06       	cpc	r1, r23
    144a:	48 07       	cpc	r20, r24
    144c:	5b 07       	cpc	r21, r27
    144e:	10 f4       	brcc	.+4      	; 0x1454 <atan+0x1a>
    1450:	d9 2f       	mov	r29, r25
    1452:	5e d1       	rcall	.+700    	; 0x1710 <inverse>
    1454:	9f 93       	push	r25
    1456:	8f 93       	push	r24
    1458:	7f 93       	push	r23
    145a:	6f 93       	push	r22
    145c:	c3 d1       	rcall	.+902    	; 0x17e4 <square>
    145e:	e6 e2       	ldi	r30, 0x26	; 38
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	e9 d0       	rcall	.+466    	; 0x1636 <__fp_powser>
    1464:	1b d1       	rcall	.+566    	; 0x169c <__fp_round>
    1466:	2f 91       	pop	r18
    1468:	3f 91       	pop	r19
    146a:	4f 91       	pop	r20
    146c:	5f 91       	pop	r21
    146e:	63 d1       	rcall	.+710    	; 0x1736 <__mulsf3x>
    1470:	dd 23       	and	r29, r29
    1472:	49 f0       	breq	.+18     	; 0x1486 <atan+0x4c>
    1474:	90 58       	subi	r25, 0x80	; 128
    1476:	a2 ea       	ldi	r26, 0xA2	; 162
    1478:	2a ed       	ldi	r18, 0xDA	; 218
    147a:	3f e0       	ldi	r19, 0x0F	; 15
    147c:	49 ec       	ldi	r20, 0xC9	; 201
    147e:	5f e3       	ldi	r21, 0x3F	; 63
    1480:	d0 78       	andi	r29, 0x80	; 128
    1482:	5d 27       	eor	r21, r29
    1484:	4d df       	rcall	.-358    	; 0x1320 <__addsf3x>
    1486:	df 91       	pop	r29
    1488:	09 c1       	rjmp	.+530    	; 0x169c <__fp_round>

0000148a <__cmpsf2>:
    148a:	a8 d0       	rcall	.+336    	; 0x15dc <__fp_cmp>
    148c:	08 f4       	brcc	.+2      	; 0x1490 <__cmpsf2+0x6>
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	08 95       	ret

00001492 <__divsf3>:
    1492:	0c d0       	rcall	.+24     	; 0x14ac <__divsf3x>
    1494:	03 c1       	rjmp	.+518    	; 0x169c <__fp_round>
    1496:	fb d0       	rcall	.+502    	; 0x168e <__fp_pscB>
    1498:	40 f0       	brcs	.+16     	; 0x14aa <__divsf3+0x18>
    149a:	f2 d0       	rcall	.+484    	; 0x1680 <__fp_pscA>
    149c:	30 f0       	brcs	.+12     	; 0x14aa <__divsf3+0x18>
    149e:	21 f4       	brne	.+8      	; 0x14a8 <__divsf3+0x16>
    14a0:	5f 3f       	cpi	r21, 0xFF	; 255
    14a2:	19 f0       	breq	.+6      	; 0x14aa <__divsf3+0x18>
    14a4:	bf c0       	rjmp	.+382    	; 0x1624 <__fp_inf>
    14a6:	51 11       	cpse	r21, r1
    14a8:	2d c1       	rjmp	.+602    	; 0x1704 <__fp_szero>
    14aa:	c2 c0       	rjmp	.+388    	; 0x1630 <__fp_nan>

000014ac <__divsf3x>:
    14ac:	08 d1       	rcall	.+528    	; 0x16be <__fp_split3>
    14ae:	98 f3       	brcs	.-26     	; 0x1496 <__divsf3+0x4>

000014b0 <__divsf3_pse>:
    14b0:	99 23       	and	r25, r25
    14b2:	c9 f3       	breq	.-14     	; 0x14a6 <__divsf3+0x14>
    14b4:	55 23       	and	r21, r21
    14b6:	b1 f3       	breq	.-20     	; 0x14a4 <__divsf3+0x12>
    14b8:	95 1b       	sub	r25, r21
    14ba:	55 0b       	sbc	r21, r21
    14bc:	bb 27       	eor	r27, r27
    14be:	aa 27       	eor	r26, r26
    14c0:	62 17       	cp	r22, r18
    14c2:	73 07       	cpc	r23, r19
    14c4:	84 07       	cpc	r24, r20
    14c6:	38 f0       	brcs	.+14     	; 0x14d6 <__divsf3_pse+0x26>
    14c8:	9f 5f       	subi	r25, 0xFF	; 255
    14ca:	5f 4f       	sbci	r21, 0xFF	; 255
    14cc:	22 0f       	add	r18, r18
    14ce:	33 1f       	adc	r19, r19
    14d0:	44 1f       	adc	r20, r20
    14d2:	aa 1f       	adc	r26, r26
    14d4:	a9 f3       	breq	.-22     	; 0x14c0 <__divsf3_pse+0x10>
    14d6:	33 d0       	rcall	.+102    	; 0x153e <__divsf3_pse+0x8e>
    14d8:	0e 2e       	mov	r0, r30
    14da:	3a f0       	brmi	.+14     	; 0x14ea <__divsf3_pse+0x3a>
    14dc:	e0 e8       	ldi	r30, 0x80	; 128
    14de:	30 d0       	rcall	.+96     	; 0x1540 <__divsf3_pse+0x90>
    14e0:	91 50       	subi	r25, 0x01	; 1
    14e2:	50 40       	sbci	r21, 0x00	; 0
    14e4:	e6 95       	lsr	r30
    14e6:	00 1c       	adc	r0, r0
    14e8:	ca f7       	brpl	.-14     	; 0x14dc <__divsf3_pse+0x2c>
    14ea:	29 d0       	rcall	.+82     	; 0x153e <__divsf3_pse+0x8e>
    14ec:	fe 2f       	mov	r31, r30
    14ee:	27 d0       	rcall	.+78     	; 0x153e <__divsf3_pse+0x8e>
    14f0:	66 0f       	add	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	88 1f       	adc	r24, r24
    14f6:	bb 1f       	adc	r27, r27
    14f8:	26 17       	cp	r18, r22
    14fa:	37 07       	cpc	r19, r23
    14fc:	48 07       	cpc	r20, r24
    14fe:	ab 07       	cpc	r26, r27
    1500:	b0 e8       	ldi	r27, 0x80	; 128
    1502:	09 f0       	breq	.+2      	; 0x1506 <__divsf3_pse+0x56>
    1504:	bb 0b       	sbc	r27, r27
    1506:	80 2d       	mov	r24, r0
    1508:	bf 01       	movw	r22, r30
    150a:	ff 27       	eor	r31, r31
    150c:	93 58       	subi	r25, 0x83	; 131
    150e:	5f 4f       	sbci	r21, 0xFF	; 255
    1510:	2a f0       	brmi	.+10     	; 0x151c <__divsf3_pse+0x6c>
    1512:	9e 3f       	cpi	r25, 0xFE	; 254
    1514:	51 05       	cpc	r21, r1
    1516:	68 f0       	brcs	.+26     	; 0x1532 <__divsf3_pse+0x82>
    1518:	85 c0       	rjmp	.+266    	; 0x1624 <__fp_inf>
    151a:	f4 c0       	rjmp	.+488    	; 0x1704 <__fp_szero>
    151c:	5f 3f       	cpi	r21, 0xFF	; 255
    151e:	ec f3       	brlt	.-6      	; 0x151a <__divsf3_pse+0x6a>
    1520:	98 3e       	cpi	r25, 0xE8	; 232
    1522:	dc f3       	brlt	.-10     	; 0x151a <__divsf3_pse+0x6a>
    1524:	86 95       	lsr	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	b7 95       	ror	r27
    152c:	f7 95       	ror	r31
    152e:	9f 5f       	subi	r25, 0xFF	; 255
    1530:	c9 f7       	brne	.-14     	; 0x1524 <__divsf3_pse+0x74>
    1532:	88 0f       	add	r24, r24
    1534:	91 1d       	adc	r25, r1
    1536:	96 95       	lsr	r25
    1538:	87 95       	ror	r24
    153a:	97 f9       	bld	r25, 7
    153c:	08 95       	ret
    153e:	e1 e0       	ldi	r30, 0x01	; 1
    1540:	66 0f       	add	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	88 1f       	adc	r24, r24
    1546:	bb 1f       	adc	r27, r27
    1548:	62 17       	cp	r22, r18
    154a:	73 07       	cpc	r23, r19
    154c:	84 07       	cpc	r24, r20
    154e:	ba 07       	cpc	r27, r26
    1550:	20 f0       	brcs	.+8      	; 0x155a <__divsf3_pse+0xaa>
    1552:	62 1b       	sub	r22, r18
    1554:	73 0b       	sbc	r23, r19
    1556:	84 0b       	sbc	r24, r20
    1558:	ba 0b       	sbc	r27, r26
    155a:	ee 1f       	adc	r30, r30
    155c:	88 f7       	brcc	.-30     	; 0x1540 <__divsf3_pse+0x90>
    155e:	e0 95       	com	r30
    1560:	08 95       	ret

00001562 <__floatunsisf>:
    1562:	e8 94       	clt
    1564:	09 c0       	rjmp	.+18     	; 0x1578 <__floatsisf+0x12>

00001566 <__floatsisf>:
    1566:	97 fb       	bst	r25, 7
    1568:	3e f4       	brtc	.+14     	; 0x1578 <__floatsisf+0x12>
    156a:	90 95       	com	r25
    156c:	80 95       	com	r24
    156e:	70 95       	com	r23
    1570:	61 95       	neg	r22
    1572:	7f 4f       	sbci	r23, 0xFF	; 255
    1574:	8f 4f       	sbci	r24, 0xFF	; 255
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	99 23       	and	r25, r25
    157a:	a9 f0       	breq	.+42     	; 0x15a6 <__floatsisf+0x40>
    157c:	f9 2f       	mov	r31, r25
    157e:	96 e9       	ldi	r25, 0x96	; 150
    1580:	bb 27       	eor	r27, r27
    1582:	93 95       	inc	r25
    1584:	f6 95       	lsr	r31
    1586:	87 95       	ror	r24
    1588:	77 95       	ror	r23
    158a:	67 95       	ror	r22
    158c:	b7 95       	ror	r27
    158e:	f1 11       	cpse	r31, r1
    1590:	f8 cf       	rjmp	.-16     	; 0x1582 <__floatsisf+0x1c>
    1592:	fa f4       	brpl	.+62     	; 0x15d2 <__floatsisf+0x6c>
    1594:	bb 0f       	add	r27, r27
    1596:	11 f4       	brne	.+4      	; 0x159c <__floatsisf+0x36>
    1598:	60 ff       	sbrs	r22, 0
    159a:	1b c0       	rjmp	.+54     	; 0x15d2 <__floatsisf+0x6c>
    159c:	6f 5f       	subi	r22, 0xFF	; 255
    159e:	7f 4f       	sbci	r23, 0xFF	; 255
    15a0:	8f 4f       	sbci	r24, 0xFF	; 255
    15a2:	9f 4f       	sbci	r25, 0xFF	; 255
    15a4:	16 c0       	rjmp	.+44     	; 0x15d2 <__floatsisf+0x6c>
    15a6:	88 23       	and	r24, r24
    15a8:	11 f0       	breq	.+4      	; 0x15ae <__floatsisf+0x48>
    15aa:	96 e9       	ldi	r25, 0x96	; 150
    15ac:	11 c0       	rjmp	.+34     	; 0x15d0 <__floatsisf+0x6a>
    15ae:	77 23       	and	r23, r23
    15b0:	21 f0       	breq	.+8      	; 0x15ba <__floatsisf+0x54>
    15b2:	9e e8       	ldi	r25, 0x8E	; 142
    15b4:	87 2f       	mov	r24, r23
    15b6:	76 2f       	mov	r23, r22
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <__floatsisf+0x5e>
    15ba:	66 23       	and	r22, r22
    15bc:	71 f0       	breq	.+28     	; 0x15da <__floatsisf+0x74>
    15be:	96 e8       	ldi	r25, 0x86	; 134
    15c0:	86 2f       	mov	r24, r22
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	2a f0       	brmi	.+10     	; 0x15d2 <__floatsisf+0x6c>
    15c8:	9a 95       	dec	r25
    15ca:	66 0f       	add	r22, r22
    15cc:	77 1f       	adc	r23, r23
    15ce:	88 1f       	adc	r24, r24
    15d0:	da f7       	brpl	.-10     	; 0x15c8 <__floatsisf+0x62>
    15d2:	88 0f       	add	r24, r24
    15d4:	96 95       	lsr	r25
    15d6:	87 95       	ror	r24
    15d8:	97 f9       	bld	r25, 7
    15da:	08 95       	ret

000015dc <__fp_cmp>:
    15dc:	99 0f       	add	r25, r25
    15de:	00 08       	sbc	r0, r0
    15e0:	55 0f       	add	r21, r21
    15e2:	aa 0b       	sbc	r26, r26
    15e4:	e0 e8       	ldi	r30, 0x80	; 128
    15e6:	fe ef       	ldi	r31, 0xFE	; 254
    15e8:	16 16       	cp	r1, r22
    15ea:	17 06       	cpc	r1, r23
    15ec:	e8 07       	cpc	r30, r24
    15ee:	f9 07       	cpc	r31, r25
    15f0:	c0 f0       	brcs	.+48     	; 0x1622 <__fp_cmp+0x46>
    15f2:	12 16       	cp	r1, r18
    15f4:	13 06       	cpc	r1, r19
    15f6:	e4 07       	cpc	r30, r20
    15f8:	f5 07       	cpc	r31, r21
    15fa:	98 f0       	brcs	.+38     	; 0x1622 <__fp_cmp+0x46>
    15fc:	62 1b       	sub	r22, r18
    15fe:	73 0b       	sbc	r23, r19
    1600:	84 0b       	sbc	r24, r20
    1602:	95 0b       	sbc	r25, r21
    1604:	39 f4       	brne	.+14     	; 0x1614 <__fp_cmp+0x38>
    1606:	0a 26       	eor	r0, r26
    1608:	61 f0       	breq	.+24     	; 0x1622 <__fp_cmp+0x46>
    160a:	23 2b       	or	r18, r19
    160c:	24 2b       	or	r18, r20
    160e:	25 2b       	or	r18, r21
    1610:	21 f4       	brne	.+8      	; 0x161a <__fp_cmp+0x3e>
    1612:	08 95       	ret
    1614:	0a 26       	eor	r0, r26
    1616:	09 f4       	brne	.+2      	; 0x161a <__fp_cmp+0x3e>
    1618:	a1 40       	sbci	r26, 0x01	; 1
    161a:	a6 95       	lsr	r26
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	81 1d       	adc	r24, r1
    1620:	81 1d       	adc	r24, r1
    1622:	08 95       	ret

00001624 <__fp_inf>:
    1624:	97 f9       	bld	r25, 7
    1626:	9f 67       	ori	r25, 0x7F	; 127
    1628:	80 e8       	ldi	r24, 0x80	; 128
    162a:	70 e0       	ldi	r23, 0x00	; 0
    162c:	60 e0       	ldi	r22, 0x00	; 0
    162e:	08 95       	ret

00001630 <__fp_nan>:
    1630:	9f ef       	ldi	r25, 0xFF	; 255
    1632:	80 ec       	ldi	r24, 0xC0	; 192
    1634:	08 95       	ret

00001636 <__fp_powser>:
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	1f 93       	push	r17
    163c:	0f 93       	push	r16
    163e:	ff 92       	push	r15
    1640:	ef 92       	push	r14
    1642:	df 92       	push	r13
    1644:	7b 01       	movw	r14, r22
    1646:	8c 01       	movw	r16, r24
    1648:	68 94       	set
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <__fp_powser+0x20>
    164c:	da 2e       	mov	r13, r26
    164e:	ef 01       	movw	r28, r30
    1650:	72 d0       	rcall	.+228    	; 0x1736 <__mulsf3x>
    1652:	fe 01       	movw	r30, r28
    1654:	e8 94       	clt
    1656:	a5 91       	lpm	r26, Z+
    1658:	25 91       	lpm	r18, Z+
    165a:	35 91       	lpm	r19, Z+
    165c:	45 91       	lpm	r20, Z+
    165e:	55 91       	lpm	r21, Z+
    1660:	ae f3       	brts	.-22     	; 0x164c <__fp_powser+0x16>
    1662:	ef 01       	movw	r28, r30
    1664:	5d de       	rcall	.-838    	; 0x1320 <__addsf3x>
    1666:	fe 01       	movw	r30, r28
    1668:	97 01       	movw	r18, r14
    166a:	a8 01       	movw	r20, r16
    166c:	da 94       	dec	r13
    166e:	79 f7       	brne	.-34     	; 0x164e <__fp_powser+0x18>
    1670:	df 90       	pop	r13
    1672:	ef 90       	pop	r14
    1674:	ff 90       	pop	r15
    1676:	0f 91       	pop	r16
    1678:	1f 91       	pop	r17
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <__fp_pscA>:
    1680:	00 24       	eor	r0, r0
    1682:	0a 94       	dec	r0
    1684:	16 16       	cp	r1, r22
    1686:	17 06       	cpc	r1, r23
    1688:	18 06       	cpc	r1, r24
    168a:	09 06       	cpc	r0, r25
    168c:	08 95       	ret

0000168e <__fp_pscB>:
    168e:	00 24       	eor	r0, r0
    1690:	0a 94       	dec	r0
    1692:	12 16       	cp	r1, r18
    1694:	13 06       	cpc	r1, r19
    1696:	14 06       	cpc	r1, r20
    1698:	05 06       	cpc	r0, r21
    169a:	08 95       	ret

0000169c <__fp_round>:
    169c:	09 2e       	mov	r0, r25
    169e:	03 94       	inc	r0
    16a0:	00 0c       	add	r0, r0
    16a2:	11 f4       	brne	.+4      	; 0x16a8 <__fp_round+0xc>
    16a4:	88 23       	and	r24, r24
    16a6:	52 f0       	brmi	.+20     	; 0x16bc <__fp_round+0x20>
    16a8:	bb 0f       	add	r27, r27
    16aa:	40 f4       	brcc	.+16     	; 0x16bc <__fp_round+0x20>
    16ac:	bf 2b       	or	r27, r31
    16ae:	11 f4       	brne	.+4      	; 0x16b4 <__fp_round+0x18>
    16b0:	60 ff       	sbrs	r22, 0
    16b2:	04 c0       	rjmp	.+8      	; 0x16bc <__fp_round+0x20>
    16b4:	6f 5f       	subi	r22, 0xFF	; 255
    16b6:	7f 4f       	sbci	r23, 0xFF	; 255
    16b8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	08 95       	ret

000016be <__fp_split3>:
    16be:	57 fd       	sbrc	r21, 7
    16c0:	90 58       	subi	r25, 0x80	; 128
    16c2:	44 0f       	add	r20, r20
    16c4:	55 1f       	adc	r21, r21
    16c6:	59 f0       	breq	.+22     	; 0x16de <__fp_splitA+0x10>
    16c8:	5f 3f       	cpi	r21, 0xFF	; 255
    16ca:	71 f0       	breq	.+28     	; 0x16e8 <__fp_splitA+0x1a>
    16cc:	47 95       	ror	r20

000016ce <__fp_splitA>:
    16ce:	88 0f       	add	r24, r24
    16d0:	97 fb       	bst	r25, 7
    16d2:	99 1f       	adc	r25, r25
    16d4:	61 f0       	breq	.+24     	; 0x16ee <__fp_splitA+0x20>
    16d6:	9f 3f       	cpi	r25, 0xFF	; 255
    16d8:	79 f0       	breq	.+30     	; 0x16f8 <__fp_splitA+0x2a>
    16da:	87 95       	ror	r24
    16dc:	08 95       	ret
    16de:	12 16       	cp	r1, r18
    16e0:	13 06       	cpc	r1, r19
    16e2:	14 06       	cpc	r1, r20
    16e4:	55 1f       	adc	r21, r21
    16e6:	f2 cf       	rjmp	.-28     	; 0x16cc <__fp_split3+0xe>
    16e8:	46 95       	lsr	r20
    16ea:	f1 df       	rcall	.-30     	; 0x16ce <__fp_splitA>
    16ec:	08 c0       	rjmp	.+16     	; 0x16fe <__fp_splitA+0x30>
    16ee:	16 16       	cp	r1, r22
    16f0:	17 06       	cpc	r1, r23
    16f2:	18 06       	cpc	r1, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	f1 cf       	rjmp	.-30     	; 0x16da <__fp_splitA+0xc>
    16f8:	86 95       	lsr	r24
    16fa:	71 05       	cpc	r23, r1
    16fc:	61 05       	cpc	r22, r1
    16fe:	08 94       	sec
    1700:	08 95       	ret

00001702 <__fp_zero>:
    1702:	e8 94       	clt

00001704 <__fp_szero>:
    1704:	bb 27       	eor	r27, r27
    1706:	66 27       	eor	r22, r22
    1708:	77 27       	eor	r23, r23
    170a:	cb 01       	movw	r24, r22
    170c:	97 f9       	bld	r25, 7
    170e:	08 95       	ret

00001710 <inverse>:
    1710:	9b 01       	movw	r18, r22
    1712:	ac 01       	movw	r20, r24
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	80 e8       	ldi	r24, 0x80	; 128
    171a:	9f e3       	ldi	r25, 0x3F	; 63
    171c:	ba ce       	rjmp	.-652    	; 0x1492 <__divsf3>

0000171e <__mulsf3>:
    171e:	0b d0       	rcall	.+22     	; 0x1736 <__mulsf3x>
    1720:	bd cf       	rjmp	.-134    	; 0x169c <__fp_round>
    1722:	ae df       	rcall	.-164    	; 0x1680 <__fp_pscA>
    1724:	28 f0       	brcs	.+10     	; 0x1730 <__mulsf3+0x12>
    1726:	b3 df       	rcall	.-154    	; 0x168e <__fp_pscB>
    1728:	18 f0       	brcs	.+6      	; 0x1730 <__mulsf3+0x12>
    172a:	95 23       	and	r25, r21
    172c:	09 f0       	breq	.+2      	; 0x1730 <__mulsf3+0x12>
    172e:	7a cf       	rjmp	.-268    	; 0x1624 <__fp_inf>
    1730:	7f cf       	rjmp	.-258    	; 0x1630 <__fp_nan>
    1732:	11 24       	eor	r1, r1
    1734:	e7 cf       	rjmp	.-50     	; 0x1704 <__fp_szero>

00001736 <__mulsf3x>:
    1736:	c3 df       	rcall	.-122    	; 0x16be <__fp_split3>
    1738:	a0 f3       	brcs	.-24     	; 0x1722 <__mulsf3+0x4>

0000173a <__mulsf3_pse>:
    173a:	95 9f       	mul	r25, r21
    173c:	d1 f3       	breq	.-12     	; 0x1732 <__mulsf3+0x14>
    173e:	95 0f       	add	r25, r21
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	55 1f       	adc	r21, r21
    1744:	62 9f       	mul	r22, r18
    1746:	f0 01       	movw	r30, r0
    1748:	72 9f       	mul	r23, r18
    174a:	bb 27       	eor	r27, r27
    174c:	f0 0d       	add	r31, r0
    174e:	b1 1d       	adc	r27, r1
    1750:	63 9f       	mul	r22, r19
    1752:	aa 27       	eor	r26, r26
    1754:	f0 0d       	add	r31, r0
    1756:	b1 1d       	adc	r27, r1
    1758:	aa 1f       	adc	r26, r26
    175a:	64 9f       	mul	r22, r20
    175c:	66 27       	eor	r22, r22
    175e:	b0 0d       	add	r27, r0
    1760:	a1 1d       	adc	r26, r1
    1762:	66 1f       	adc	r22, r22
    1764:	82 9f       	mul	r24, r18
    1766:	22 27       	eor	r18, r18
    1768:	b0 0d       	add	r27, r0
    176a:	a1 1d       	adc	r26, r1
    176c:	62 1f       	adc	r22, r18
    176e:	73 9f       	mul	r23, r19
    1770:	b0 0d       	add	r27, r0
    1772:	a1 1d       	adc	r26, r1
    1774:	62 1f       	adc	r22, r18
    1776:	83 9f       	mul	r24, r19
    1778:	a0 0d       	add	r26, r0
    177a:	61 1d       	adc	r22, r1
    177c:	22 1f       	adc	r18, r18
    177e:	74 9f       	mul	r23, r20
    1780:	33 27       	eor	r19, r19
    1782:	a0 0d       	add	r26, r0
    1784:	61 1d       	adc	r22, r1
    1786:	23 1f       	adc	r18, r19
    1788:	84 9f       	mul	r24, r20
    178a:	60 0d       	add	r22, r0
    178c:	21 1d       	adc	r18, r1
    178e:	82 2f       	mov	r24, r18
    1790:	76 2f       	mov	r23, r22
    1792:	6a 2f       	mov	r22, r26
    1794:	11 24       	eor	r1, r1
    1796:	9f 57       	subi	r25, 0x7F	; 127
    1798:	50 40       	sbci	r21, 0x00	; 0
    179a:	8a f0       	brmi	.+34     	; 0x17be <__mulsf3_pse+0x84>
    179c:	e1 f0       	breq	.+56     	; 0x17d6 <__mulsf3_pse+0x9c>
    179e:	88 23       	and	r24, r24
    17a0:	4a f0       	brmi	.+18     	; 0x17b4 <__mulsf3_pse+0x7a>
    17a2:	ee 0f       	add	r30, r30
    17a4:	ff 1f       	adc	r31, r31
    17a6:	bb 1f       	adc	r27, r27
    17a8:	66 1f       	adc	r22, r22
    17aa:	77 1f       	adc	r23, r23
    17ac:	88 1f       	adc	r24, r24
    17ae:	91 50       	subi	r25, 0x01	; 1
    17b0:	50 40       	sbci	r21, 0x00	; 0
    17b2:	a9 f7       	brne	.-22     	; 0x179e <__mulsf3_pse+0x64>
    17b4:	9e 3f       	cpi	r25, 0xFE	; 254
    17b6:	51 05       	cpc	r21, r1
    17b8:	70 f0       	brcs	.+28     	; 0x17d6 <__mulsf3_pse+0x9c>
    17ba:	34 cf       	rjmp	.-408    	; 0x1624 <__fp_inf>
    17bc:	a3 cf       	rjmp	.-186    	; 0x1704 <__fp_szero>
    17be:	5f 3f       	cpi	r21, 0xFF	; 255
    17c0:	ec f3       	brlt	.-6      	; 0x17bc <__mulsf3_pse+0x82>
    17c2:	98 3e       	cpi	r25, 0xE8	; 232
    17c4:	dc f3       	brlt	.-10     	; 0x17bc <__mulsf3_pse+0x82>
    17c6:	86 95       	lsr	r24
    17c8:	77 95       	ror	r23
    17ca:	67 95       	ror	r22
    17cc:	b7 95       	ror	r27
    17ce:	f7 95       	ror	r31
    17d0:	e7 95       	ror	r30
    17d2:	9f 5f       	subi	r25, 0xFF	; 255
    17d4:	c1 f7       	brne	.-16     	; 0x17c6 <__mulsf3_pse+0x8c>
    17d6:	fe 2b       	or	r31, r30
    17d8:	88 0f       	add	r24, r24
    17da:	91 1d       	adc	r25, r1
    17dc:	96 95       	lsr	r25
    17de:	87 95       	ror	r24
    17e0:	97 f9       	bld	r25, 7
    17e2:	08 95       	ret

000017e4 <square>:
    17e4:	9b 01       	movw	r18, r22
    17e6:	ac 01       	movw	r20, r24
    17e8:	9a cf       	rjmp	.-204    	; 0x171e <__mulsf3>

000017ea <vsnprintf>:
    17ea:	ae e0       	ldi	r26, 0x0E	; 14
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ea ef       	ldi	r30, 0xFA	; 250
    17f0:	fb e0       	ldi	r31, 0x0B	; 11
    17f2:	b4 c2       	rjmp	.+1384   	; 0x1d5c <__prologue_saves__+0x1c>
    17f4:	8c 01       	movw	r16, r24
    17f6:	fa 01       	movw	r30, r20
    17f8:	86 e0       	ldi	r24, 0x06	; 6
    17fa:	8c 83       	std	Y+4, r24	; 0x04
    17fc:	1a 83       	std	Y+2, r17	; 0x02
    17fe:	09 83       	std	Y+1, r16	; 0x01
    1800:	77 ff       	sbrs	r23, 7
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <vsnprintf+0x1e>
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	70 e8       	ldi	r23, 0x80	; 128
    1808:	cb 01       	movw	r24, r22
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
    1810:	a9 01       	movw	r20, r18
    1812:	bf 01       	movw	r22, r30
    1814:	ce 01       	movw	r24, r28
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	11 d0       	rcall	.+34     	; 0x183c <vfprintf>
    181a:	4d 81       	ldd	r20, Y+5	; 0x05
    181c:	5e 81       	ldd	r21, Y+6	; 0x06
    181e:	57 fd       	sbrc	r21, 7
    1820:	0a c0       	rjmp	.+20     	; 0x1836 <vsnprintf+0x4c>
    1822:	2f 81       	ldd	r18, Y+7	; 0x07
    1824:	38 85       	ldd	r19, Y+8	; 0x08
    1826:	42 17       	cp	r20, r18
    1828:	53 07       	cpc	r21, r19
    182a:	0c f4       	brge	.+2      	; 0x182e <vsnprintf+0x44>
    182c:	9a 01       	movw	r18, r20
    182e:	f8 01       	movw	r30, r16
    1830:	e2 0f       	add	r30, r18
    1832:	f3 1f       	adc	r31, r19
    1834:	10 82       	st	Z, r1
    1836:	2e 96       	adiw	r28, 0x0e	; 14
    1838:	e4 e0       	ldi	r30, 0x04	; 4
    183a:	ac c2       	rjmp	.+1368   	; 0x1d94 <__epilogue_restores__+0x1c>

0000183c <vfprintf>:
    183c:	ab e0       	ldi	r26, 0x0B	; 11
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e3 e2       	ldi	r30, 0x23	; 35
    1842:	fc e0       	ldi	r31, 0x0C	; 12
    1844:	7d c2       	rjmp	.+1274   	; 0x1d40 <__prologue_saves__>
    1846:	6c 01       	movw	r12, r24
    1848:	7b 01       	movw	r14, r22
    184a:	8a 01       	movw	r16, r20
    184c:	fc 01       	movw	r30, r24
    184e:	17 82       	std	Z+7, r1	; 0x07
    1850:	16 82       	std	Z+6, r1	; 0x06
    1852:	83 81       	ldd	r24, Z+3	; 0x03
    1854:	81 ff       	sbrs	r24, 1
    1856:	bf c1       	rjmp	.+894    	; 0x1bd6 <vfprintf+0x39a>
    1858:	ce 01       	movw	r24, r28
    185a:	01 96       	adiw	r24, 0x01	; 1
    185c:	3c 01       	movw	r6, r24
    185e:	f6 01       	movw	r30, r12
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	f7 01       	movw	r30, r14
    1864:	93 fd       	sbrc	r25, 3
    1866:	85 91       	lpm	r24, Z+
    1868:	93 ff       	sbrs	r25, 3
    186a:	81 91       	ld	r24, Z+
    186c:	7f 01       	movw	r14, r30
    186e:	88 23       	and	r24, r24
    1870:	09 f4       	brne	.+2      	; 0x1874 <vfprintf+0x38>
    1872:	ad c1       	rjmp	.+858    	; 0x1bce <vfprintf+0x392>
    1874:	85 32       	cpi	r24, 0x25	; 37
    1876:	39 f4       	brne	.+14     	; 0x1886 <vfprintf+0x4a>
    1878:	93 fd       	sbrc	r25, 3
    187a:	85 91       	lpm	r24, Z+
    187c:	93 ff       	sbrs	r25, 3
    187e:	81 91       	ld	r24, Z+
    1880:	7f 01       	movw	r14, r30
    1882:	85 32       	cpi	r24, 0x25	; 37
    1884:	21 f4       	brne	.+8      	; 0x188e <vfprintf+0x52>
    1886:	b6 01       	movw	r22, r12
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	c0 d1       	rcall	.+896    	; 0x1c0c <fputc>
    188c:	e8 cf       	rjmp	.-48     	; 0x185e <vfprintf+0x22>
    188e:	91 2c       	mov	r9, r1
    1890:	21 2c       	mov	r2, r1
    1892:	31 2c       	mov	r3, r1
    1894:	ff e1       	ldi	r31, 0x1F	; 31
    1896:	f3 15       	cp	r31, r3
    1898:	d8 f0       	brcs	.+54     	; 0x18d0 <vfprintf+0x94>
    189a:	8b 32       	cpi	r24, 0x2B	; 43
    189c:	79 f0       	breq	.+30     	; 0x18bc <vfprintf+0x80>
    189e:	38 f4       	brcc	.+14     	; 0x18ae <vfprintf+0x72>
    18a0:	80 32       	cpi	r24, 0x20	; 32
    18a2:	79 f0       	breq	.+30     	; 0x18c2 <vfprintf+0x86>
    18a4:	83 32       	cpi	r24, 0x23	; 35
    18a6:	a1 f4       	brne	.+40     	; 0x18d0 <vfprintf+0x94>
    18a8:	23 2d       	mov	r18, r3
    18aa:	20 61       	ori	r18, 0x10	; 16
    18ac:	1d c0       	rjmp	.+58     	; 0x18e8 <vfprintf+0xac>
    18ae:	8d 32       	cpi	r24, 0x2D	; 45
    18b0:	61 f0       	breq	.+24     	; 0x18ca <vfprintf+0x8e>
    18b2:	80 33       	cpi	r24, 0x30	; 48
    18b4:	69 f4       	brne	.+26     	; 0x18d0 <vfprintf+0x94>
    18b6:	23 2d       	mov	r18, r3
    18b8:	21 60       	ori	r18, 0x01	; 1
    18ba:	16 c0       	rjmp	.+44     	; 0x18e8 <vfprintf+0xac>
    18bc:	83 2d       	mov	r24, r3
    18be:	82 60       	ori	r24, 0x02	; 2
    18c0:	38 2e       	mov	r3, r24
    18c2:	e3 2d       	mov	r30, r3
    18c4:	e4 60       	ori	r30, 0x04	; 4
    18c6:	3e 2e       	mov	r3, r30
    18c8:	2a c0       	rjmp	.+84     	; 0x191e <vfprintf+0xe2>
    18ca:	f3 2d       	mov	r31, r3
    18cc:	f8 60       	ori	r31, 0x08	; 8
    18ce:	1d c0       	rjmp	.+58     	; 0x190a <vfprintf+0xce>
    18d0:	37 fc       	sbrc	r3, 7
    18d2:	2d c0       	rjmp	.+90     	; 0x192e <vfprintf+0xf2>
    18d4:	20 ed       	ldi	r18, 0xD0	; 208
    18d6:	28 0f       	add	r18, r24
    18d8:	2a 30       	cpi	r18, 0x0A	; 10
    18da:	40 f0       	brcs	.+16     	; 0x18ec <vfprintf+0xb0>
    18dc:	8e 32       	cpi	r24, 0x2E	; 46
    18de:	b9 f4       	brne	.+46     	; 0x190e <vfprintf+0xd2>
    18e0:	36 fc       	sbrc	r3, 6
    18e2:	75 c1       	rjmp	.+746    	; 0x1bce <vfprintf+0x392>
    18e4:	23 2d       	mov	r18, r3
    18e6:	20 64       	ori	r18, 0x40	; 64
    18e8:	32 2e       	mov	r3, r18
    18ea:	19 c0       	rjmp	.+50     	; 0x191e <vfprintf+0xe2>
    18ec:	36 fe       	sbrs	r3, 6
    18ee:	06 c0       	rjmp	.+12     	; 0x18fc <vfprintf+0xc0>
    18f0:	8a e0       	ldi	r24, 0x0A	; 10
    18f2:	98 9e       	mul	r9, r24
    18f4:	20 0d       	add	r18, r0
    18f6:	11 24       	eor	r1, r1
    18f8:	92 2e       	mov	r9, r18
    18fa:	11 c0       	rjmp	.+34     	; 0x191e <vfprintf+0xe2>
    18fc:	ea e0       	ldi	r30, 0x0A	; 10
    18fe:	2e 9e       	mul	r2, r30
    1900:	20 0d       	add	r18, r0
    1902:	11 24       	eor	r1, r1
    1904:	22 2e       	mov	r2, r18
    1906:	f3 2d       	mov	r31, r3
    1908:	f0 62       	ori	r31, 0x20	; 32
    190a:	3f 2e       	mov	r3, r31
    190c:	08 c0       	rjmp	.+16     	; 0x191e <vfprintf+0xe2>
    190e:	8c 36       	cpi	r24, 0x6C	; 108
    1910:	21 f4       	brne	.+8      	; 0x191a <vfprintf+0xde>
    1912:	83 2d       	mov	r24, r3
    1914:	80 68       	ori	r24, 0x80	; 128
    1916:	38 2e       	mov	r3, r24
    1918:	02 c0       	rjmp	.+4      	; 0x191e <vfprintf+0xe2>
    191a:	88 36       	cpi	r24, 0x68	; 104
    191c:	41 f4       	brne	.+16     	; 0x192e <vfprintf+0xf2>
    191e:	f7 01       	movw	r30, r14
    1920:	93 fd       	sbrc	r25, 3
    1922:	85 91       	lpm	r24, Z+
    1924:	93 ff       	sbrs	r25, 3
    1926:	81 91       	ld	r24, Z+
    1928:	7f 01       	movw	r14, r30
    192a:	81 11       	cpse	r24, r1
    192c:	b3 cf       	rjmp	.-154    	; 0x1894 <vfprintf+0x58>
    192e:	98 2f       	mov	r25, r24
    1930:	9f 7d       	andi	r25, 0xDF	; 223
    1932:	95 54       	subi	r25, 0x45	; 69
    1934:	93 30       	cpi	r25, 0x03	; 3
    1936:	28 f4       	brcc	.+10     	; 0x1942 <vfprintf+0x106>
    1938:	0c 5f       	subi	r16, 0xFC	; 252
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
    193c:	9f e3       	ldi	r25, 0x3F	; 63
    193e:	99 83       	std	Y+1, r25	; 0x01
    1940:	0d c0       	rjmp	.+26     	; 0x195c <vfprintf+0x120>
    1942:	83 36       	cpi	r24, 0x63	; 99
    1944:	31 f0       	breq	.+12     	; 0x1952 <vfprintf+0x116>
    1946:	83 37       	cpi	r24, 0x73	; 115
    1948:	71 f0       	breq	.+28     	; 0x1966 <vfprintf+0x12a>
    194a:	83 35       	cpi	r24, 0x53	; 83
    194c:	09 f0       	breq	.+2      	; 0x1950 <vfprintf+0x114>
    194e:	55 c0       	rjmp	.+170    	; 0x19fa <vfprintf+0x1be>
    1950:	20 c0       	rjmp	.+64     	; 0x1992 <vfprintf+0x156>
    1952:	f8 01       	movw	r30, r16
    1954:	80 81       	ld	r24, Z
    1956:	89 83       	std	Y+1, r24	; 0x01
    1958:	0e 5f       	subi	r16, 0xFE	; 254
    195a:	1f 4f       	sbci	r17, 0xFF	; 255
    195c:	88 24       	eor	r8, r8
    195e:	83 94       	inc	r8
    1960:	91 2c       	mov	r9, r1
    1962:	53 01       	movw	r10, r6
    1964:	12 c0       	rjmp	.+36     	; 0x198a <vfprintf+0x14e>
    1966:	28 01       	movw	r4, r16
    1968:	f2 e0       	ldi	r31, 0x02	; 2
    196a:	4f 0e       	add	r4, r31
    196c:	51 1c       	adc	r5, r1
    196e:	f8 01       	movw	r30, r16
    1970:	a0 80       	ld	r10, Z
    1972:	b1 80       	ldd	r11, Z+1	; 0x01
    1974:	36 fe       	sbrs	r3, 6
    1976:	03 c0       	rjmp	.+6      	; 0x197e <vfprintf+0x142>
    1978:	69 2d       	mov	r22, r9
    197a:	70 e0       	ldi	r23, 0x00	; 0
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <vfprintf+0x146>
    197e:	6f ef       	ldi	r22, 0xFF	; 255
    1980:	7f ef       	ldi	r23, 0xFF	; 255
    1982:	c5 01       	movw	r24, r10
    1984:	38 d1       	rcall	.+624    	; 0x1bf6 <strnlen>
    1986:	4c 01       	movw	r8, r24
    1988:	82 01       	movw	r16, r4
    198a:	f3 2d       	mov	r31, r3
    198c:	ff 77       	andi	r31, 0x7F	; 127
    198e:	3f 2e       	mov	r3, r31
    1990:	15 c0       	rjmp	.+42     	; 0x19bc <vfprintf+0x180>
    1992:	28 01       	movw	r4, r16
    1994:	22 e0       	ldi	r18, 0x02	; 2
    1996:	42 0e       	add	r4, r18
    1998:	51 1c       	adc	r5, r1
    199a:	f8 01       	movw	r30, r16
    199c:	a0 80       	ld	r10, Z
    199e:	b1 80       	ldd	r11, Z+1	; 0x01
    19a0:	36 fe       	sbrs	r3, 6
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <vfprintf+0x16e>
    19a4:	69 2d       	mov	r22, r9
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <vfprintf+0x172>
    19aa:	6f ef       	ldi	r22, 0xFF	; 255
    19ac:	7f ef       	ldi	r23, 0xFF	; 255
    19ae:	c5 01       	movw	r24, r10
    19b0:	17 d1       	rcall	.+558    	; 0x1be0 <strnlen_P>
    19b2:	4c 01       	movw	r8, r24
    19b4:	f3 2d       	mov	r31, r3
    19b6:	f0 68       	ori	r31, 0x80	; 128
    19b8:	3f 2e       	mov	r3, r31
    19ba:	82 01       	movw	r16, r4
    19bc:	33 fc       	sbrc	r3, 3
    19be:	19 c0       	rjmp	.+50     	; 0x19f2 <vfprintf+0x1b6>
    19c0:	82 2d       	mov	r24, r2
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	88 16       	cp	r8, r24
    19c6:	99 06       	cpc	r9, r25
    19c8:	a0 f4       	brcc	.+40     	; 0x19f2 <vfprintf+0x1b6>
    19ca:	b6 01       	movw	r22, r12
    19cc:	80 e2       	ldi	r24, 0x20	; 32
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	1d d1       	rcall	.+570    	; 0x1c0c <fputc>
    19d2:	2a 94       	dec	r2
    19d4:	f5 cf       	rjmp	.-22     	; 0x19c0 <vfprintf+0x184>
    19d6:	f5 01       	movw	r30, r10
    19d8:	37 fc       	sbrc	r3, 7
    19da:	85 91       	lpm	r24, Z+
    19dc:	37 fe       	sbrs	r3, 7
    19de:	81 91       	ld	r24, Z+
    19e0:	5f 01       	movw	r10, r30
    19e2:	b6 01       	movw	r22, r12
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	12 d1       	rcall	.+548    	; 0x1c0c <fputc>
    19e8:	21 10       	cpse	r2, r1
    19ea:	2a 94       	dec	r2
    19ec:	21 e0       	ldi	r18, 0x01	; 1
    19ee:	82 1a       	sub	r8, r18
    19f0:	91 08       	sbc	r9, r1
    19f2:	81 14       	cp	r8, r1
    19f4:	91 04       	cpc	r9, r1
    19f6:	79 f7       	brne	.-34     	; 0x19d6 <vfprintf+0x19a>
    19f8:	e1 c0       	rjmp	.+450    	; 0x1bbc <vfprintf+0x380>
    19fa:	84 36       	cpi	r24, 0x64	; 100
    19fc:	11 f0       	breq	.+4      	; 0x1a02 <vfprintf+0x1c6>
    19fe:	89 36       	cpi	r24, 0x69	; 105
    1a00:	39 f5       	brne	.+78     	; 0x1a50 <vfprintf+0x214>
    1a02:	f8 01       	movw	r30, r16
    1a04:	37 fe       	sbrs	r3, 7
    1a06:	07 c0       	rjmp	.+14     	; 0x1a16 <vfprintf+0x1da>
    1a08:	60 81       	ld	r22, Z
    1a0a:	71 81       	ldd	r23, Z+1	; 0x01
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	93 81       	ldd	r25, Z+3	; 0x03
    1a10:	0c 5f       	subi	r16, 0xFC	; 252
    1a12:	1f 4f       	sbci	r17, 0xFF	; 255
    1a14:	08 c0       	rjmp	.+16     	; 0x1a26 <vfprintf+0x1ea>
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	07 2e       	mov	r0, r23
    1a1c:	00 0c       	add	r0, r0
    1a1e:	88 0b       	sbc	r24, r24
    1a20:	99 0b       	sbc	r25, r25
    1a22:	0e 5f       	subi	r16, 0xFE	; 254
    1a24:	1f 4f       	sbci	r17, 0xFF	; 255
    1a26:	f3 2d       	mov	r31, r3
    1a28:	ff 76       	andi	r31, 0x6F	; 111
    1a2a:	3f 2e       	mov	r3, r31
    1a2c:	97 ff       	sbrs	r25, 7
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <vfprintf+0x206>
    1a30:	90 95       	com	r25
    1a32:	80 95       	com	r24
    1a34:	70 95       	com	r23
    1a36:	61 95       	neg	r22
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	f0 68       	ori	r31, 0x80	; 128
    1a40:	3f 2e       	mov	r3, r31
    1a42:	2a e0       	ldi	r18, 0x0A	; 10
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	a3 01       	movw	r20, r6
    1a48:	1d d1       	rcall	.+570    	; 0x1c84 <__ultoa_invert>
    1a4a:	88 2e       	mov	r8, r24
    1a4c:	86 18       	sub	r8, r6
    1a4e:	44 c0       	rjmp	.+136    	; 0x1ad8 <vfprintf+0x29c>
    1a50:	85 37       	cpi	r24, 0x75	; 117
    1a52:	31 f4       	brne	.+12     	; 0x1a60 <vfprintf+0x224>
    1a54:	23 2d       	mov	r18, r3
    1a56:	2f 7e       	andi	r18, 0xEF	; 239
    1a58:	b2 2e       	mov	r11, r18
    1a5a:	2a e0       	ldi	r18, 0x0A	; 10
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	25 c0       	rjmp	.+74     	; 0x1aaa <vfprintf+0x26e>
    1a60:	93 2d       	mov	r25, r3
    1a62:	99 7f       	andi	r25, 0xF9	; 249
    1a64:	b9 2e       	mov	r11, r25
    1a66:	8f 36       	cpi	r24, 0x6F	; 111
    1a68:	c1 f0       	breq	.+48     	; 0x1a9a <vfprintf+0x25e>
    1a6a:	18 f4       	brcc	.+6      	; 0x1a72 <vfprintf+0x236>
    1a6c:	88 35       	cpi	r24, 0x58	; 88
    1a6e:	79 f0       	breq	.+30     	; 0x1a8e <vfprintf+0x252>
    1a70:	ae c0       	rjmp	.+348    	; 0x1bce <vfprintf+0x392>
    1a72:	80 37       	cpi	r24, 0x70	; 112
    1a74:	19 f0       	breq	.+6      	; 0x1a7c <vfprintf+0x240>
    1a76:	88 37       	cpi	r24, 0x78	; 120
    1a78:	21 f0       	breq	.+8      	; 0x1a82 <vfprintf+0x246>
    1a7a:	a9 c0       	rjmp	.+338    	; 0x1bce <vfprintf+0x392>
    1a7c:	e9 2f       	mov	r30, r25
    1a7e:	e0 61       	ori	r30, 0x10	; 16
    1a80:	be 2e       	mov	r11, r30
    1a82:	b4 fe       	sbrs	r11, 4
    1a84:	0d c0       	rjmp	.+26     	; 0x1aa0 <vfprintf+0x264>
    1a86:	fb 2d       	mov	r31, r11
    1a88:	f4 60       	ori	r31, 0x04	; 4
    1a8a:	bf 2e       	mov	r11, r31
    1a8c:	09 c0       	rjmp	.+18     	; 0x1aa0 <vfprintf+0x264>
    1a8e:	34 fe       	sbrs	r3, 4
    1a90:	0a c0       	rjmp	.+20     	; 0x1aa6 <vfprintf+0x26a>
    1a92:	29 2f       	mov	r18, r25
    1a94:	26 60       	ori	r18, 0x06	; 6
    1a96:	b2 2e       	mov	r11, r18
    1a98:	06 c0       	rjmp	.+12     	; 0x1aa6 <vfprintf+0x26a>
    1a9a:	28 e0       	ldi	r18, 0x08	; 8
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	05 c0       	rjmp	.+10     	; 0x1aaa <vfprintf+0x26e>
    1aa0:	20 e1       	ldi	r18, 0x10	; 16
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <vfprintf+0x26e>
    1aa6:	20 e1       	ldi	r18, 0x10	; 16
    1aa8:	32 e0       	ldi	r19, 0x02	; 2
    1aaa:	f8 01       	movw	r30, r16
    1aac:	b7 fe       	sbrs	r11, 7
    1aae:	07 c0       	rjmp	.+14     	; 0x1abe <vfprintf+0x282>
    1ab0:	60 81       	ld	r22, Z
    1ab2:	71 81       	ldd	r23, Z+1	; 0x01
    1ab4:	82 81       	ldd	r24, Z+2	; 0x02
    1ab6:	93 81       	ldd	r25, Z+3	; 0x03
    1ab8:	0c 5f       	subi	r16, 0xFC	; 252
    1aba:	1f 4f       	sbci	r17, 0xFF	; 255
    1abc:	06 c0       	rjmp	.+12     	; 0x1aca <vfprintf+0x28e>
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	0e 5f       	subi	r16, 0xFE	; 254
    1ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aca:	a3 01       	movw	r20, r6
    1acc:	db d0       	rcall	.+438    	; 0x1c84 <__ultoa_invert>
    1ace:	88 2e       	mov	r8, r24
    1ad0:	86 18       	sub	r8, r6
    1ad2:	fb 2d       	mov	r31, r11
    1ad4:	ff 77       	andi	r31, 0x7F	; 127
    1ad6:	3f 2e       	mov	r3, r31
    1ad8:	36 fe       	sbrs	r3, 6
    1ada:	0d c0       	rjmp	.+26     	; 0x1af6 <vfprintf+0x2ba>
    1adc:	23 2d       	mov	r18, r3
    1ade:	2e 7f       	andi	r18, 0xFE	; 254
    1ae0:	a2 2e       	mov	r10, r18
    1ae2:	89 14       	cp	r8, r9
    1ae4:	58 f4       	brcc	.+22     	; 0x1afc <vfprintf+0x2c0>
    1ae6:	34 fe       	sbrs	r3, 4
    1ae8:	0b c0       	rjmp	.+22     	; 0x1b00 <vfprintf+0x2c4>
    1aea:	32 fc       	sbrc	r3, 2
    1aec:	09 c0       	rjmp	.+18     	; 0x1b00 <vfprintf+0x2c4>
    1aee:	83 2d       	mov	r24, r3
    1af0:	8e 7e       	andi	r24, 0xEE	; 238
    1af2:	a8 2e       	mov	r10, r24
    1af4:	05 c0       	rjmp	.+10     	; 0x1b00 <vfprintf+0x2c4>
    1af6:	b8 2c       	mov	r11, r8
    1af8:	a3 2c       	mov	r10, r3
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <vfprintf+0x2c6>
    1afc:	b8 2c       	mov	r11, r8
    1afe:	01 c0       	rjmp	.+2      	; 0x1b02 <vfprintf+0x2c6>
    1b00:	b9 2c       	mov	r11, r9
    1b02:	a4 fe       	sbrs	r10, 4
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <vfprintf+0x2e8>
    1b06:	fe 01       	movw	r30, r28
    1b08:	e8 0d       	add	r30, r8
    1b0a:	f1 1d       	adc	r31, r1
    1b0c:	80 81       	ld	r24, Z
    1b0e:	80 33       	cpi	r24, 0x30	; 48
    1b10:	21 f4       	brne	.+8      	; 0x1b1a <vfprintf+0x2de>
    1b12:	9a 2d       	mov	r25, r10
    1b14:	99 7e       	andi	r25, 0xE9	; 233
    1b16:	a9 2e       	mov	r10, r25
    1b18:	09 c0       	rjmp	.+18     	; 0x1b2c <vfprintf+0x2f0>
    1b1a:	a2 fe       	sbrs	r10, 2
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <vfprintf+0x2ee>
    1b1e:	b3 94       	inc	r11
    1b20:	b3 94       	inc	r11
    1b22:	04 c0       	rjmp	.+8      	; 0x1b2c <vfprintf+0x2f0>
    1b24:	8a 2d       	mov	r24, r10
    1b26:	86 78       	andi	r24, 0x86	; 134
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <vfprintf+0x2f0>
    1b2a:	b3 94       	inc	r11
    1b2c:	a3 fc       	sbrc	r10, 3
    1b2e:	10 c0       	rjmp	.+32     	; 0x1b50 <vfprintf+0x314>
    1b30:	a0 fe       	sbrs	r10, 0
    1b32:	06 c0       	rjmp	.+12     	; 0x1b40 <vfprintf+0x304>
    1b34:	b2 14       	cp	r11, r2
    1b36:	80 f4       	brcc	.+32     	; 0x1b58 <vfprintf+0x31c>
    1b38:	28 0c       	add	r2, r8
    1b3a:	92 2c       	mov	r9, r2
    1b3c:	9b 18       	sub	r9, r11
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <vfprintf+0x31e>
    1b40:	b2 14       	cp	r11, r2
    1b42:	58 f4       	brcc	.+22     	; 0x1b5a <vfprintf+0x31e>
    1b44:	b6 01       	movw	r22, r12
    1b46:	80 e2       	ldi	r24, 0x20	; 32
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	60 d0       	rcall	.+192    	; 0x1c0c <fputc>
    1b4c:	b3 94       	inc	r11
    1b4e:	f8 cf       	rjmp	.-16     	; 0x1b40 <vfprintf+0x304>
    1b50:	b2 14       	cp	r11, r2
    1b52:	18 f4       	brcc	.+6      	; 0x1b5a <vfprintf+0x31e>
    1b54:	2b 18       	sub	r2, r11
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <vfprintf+0x320>
    1b58:	98 2c       	mov	r9, r8
    1b5a:	21 2c       	mov	r2, r1
    1b5c:	a4 fe       	sbrs	r10, 4
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <vfprintf+0x342>
    1b60:	b6 01       	movw	r22, r12
    1b62:	80 e3       	ldi	r24, 0x30	; 48
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	52 d0       	rcall	.+164    	; 0x1c0c <fputc>
    1b68:	a2 fe       	sbrs	r10, 2
    1b6a:	16 c0       	rjmp	.+44     	; 0x1b98 <vfprintf+0x35c>
    1b6c:	a1 fc       	sbrc	r10, 1
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <vfprintf+0x33a>
    1b70:	88 e7       	ldi	r24, 0x78	; 120
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <vfprintf+0x33e>
    1b76:	88 e5       	ldi	r24, 0x58	; 88
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	b6 01       	movw	r22, r12
    1b7c:	0c c0       	rjmp	.+24     	; 0x1b96 <vfprintf+0x35a>
    1b7e:	8a 2d       	mov	r24, r10
    1b80:	86 78       	andi	r24, 0x86	; 134
    1b82:	51 f0       	breq	.+20     	; 0x1b98 <vfprintf+0x35c>
    1b84:	a1 fe       	sbrs	r10, 1
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <vfprintf+0x350>
    1b88:	8b e2       	ldi	r24, 0x2B	; 43
    1b8a:	01 c0       	rjmp	.+2      	; 0x1b8e <vfprintf+0x352>
    1b8c:	80 e2       	ldi	r24, 0x20	; 32
    1b8e:	a7 fc       	sbrc	r10, 7
    1b90:	8d e2       	ldi	r24, 0x2D	; 45
    1b92:	b6 01       	movw	r22, r12
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	3a d0       	rcall	.+116    	; 0x1c0c <fputc>
    1b98:	89 14       	cp	r8, r9
    1b9a:	30 f4       	brcc	.+12     	; 0x1ba8 <vfprintf+0x36c>
    1b9c:	b6 01       	movw	r22, r12
    1b9e:	80 e3       	ldi	r24, 0x30	; 48
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	34 d0       	rcall	.+104    	; 0x1c0c <fputc>
    1ba4:	9a 94       	dec	r9
    1ba6:	f8 cf       	rjmp	.-16     	; 0x1b98 <vfprintf+0x35c>
    1ba8:	8a 94       	dec	r8
    1baa:	f3 01       	movw	r30, r6
    1bac:	e8 0d       	add	r30, r8
    1bae:	f1 1d       	adc	r31, r1
    1bb0:	80 81       	ld	r24, Z
    1bb2:	b6 01       	movw	r22, r12
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	2a d0       	rcall	.+84     	; 0x1c0c <fputc>
    1bb8:	81 10       	cpse	r8, r1
    1bba:	f6 cf       	rjmp	.-20     	; 0x1ba8 <vfprintf+0x36c>
    1bbc:	22 20       	and	r2, r2
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <vfprintf+0x386>
    1bc0:	4e ce       	rjmp	.-868    	; 0x185e <vfprintf+0x22>
    1bc2:	b6 01       	movw	r22, r12
    1bc4:	80 e2       	ldi	r24, 0x20	; 32
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	21 d0       	rcall	.+66     	; 0x1c0c <fputc>
    1bca:	2a 94       	dec	r2
    1bcc:	f7 cf       	rjmp	.-18     	; 0x1bbc <vfprintf+0x380>
    1bce:	f6 01       	movw	r30, r12
    1bd0:	86 81       	ldd	r24, Z+6	; 0x06
    1bd2:	97 81       	ldd	r25, Z+7	; 0x07
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <vfprintf+0x39e>
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	9f ef       	ldi	r25, 0xFF	; 255
    1bda:	2b 96       	adiw	r28, 0x0b	; 11
    1bdc:	e2 e1       	ldi	r30, 0x12	; 18
    1bde:	cc c0       	rjmp	.+408    	; 0x1d78 <__epilogue_restores__>

00001be0 <strnlen_P>:
    1be0:	fc 01       	movw	r30, r24
    1be2:	05 90       	lpm	r0, Z+
    1be4:	61 50       	subi	r22, 0x01	; 1
    1be6:	70 40       	sbci	r23, 0x00	; 0
    1be8:	01 10       	cpse	r0, r1
    1bea:	d8 f7       	brcc	.-10     	; 0x1be2 <strnlen_P+0x2>
    1bec:	80 95       	com	r24
    1bee:	90 95       	com	r25
    1bf0:	8e 0f       	add	r24, r30
    1bf2:	9f 1f       	adc	r25, r31
    1bf4:	08 95       	ret

00001bf6 <strnlen>:
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	61 50       	subi	r22, 0x01	; 1
    1bfa:	70 40       	sbci	r23, 0x00	; 0
    1bfc:	01 90       	ld	r0, Z+
    1bfe:	01 10       	cpse	r0, r1
    1c00:	d8 f7       	brcc	.-10     	; 0x1bf8 <strnlen+0x2>
    1c02:	80 95       	com	r24
    1c04:	90 95       	com	r25
    1c06:	8e 0f       	add	r24, r30
    1c08:	9f 1f       	adc	r25, r31
    1c0a:	08 95       	ret

00001c0c <fputc>:
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	cf 93       	push	r28
    1c12:	df 93       	push	r29
    1c14:	fb 01       	movw	r30, r22
    1c16:	23 81       	ldd	r18, Z+3	; 0x03
    1c18:	21 fd       	sbrc	r18, 1
    1c1a:	03 c0       	rjmp	.+6      	; 0x1c22 <fputc+0x16>
    1c1c:	8f ef       	ldi	r24, 0xFF	; 255
    1c1e:	9f ef       	ldi	r25, 0xFF	; 255
    1c20:	2c c0       	rjmp	.+88     	; 0x1c7a <fputc+0x6e>
    1c22:	22 ff       	sbrs	r18, 2
    1c24:	16 c0       	rjmp	.+44     	; 0x1c52 <fputc+0x46>
    1c26:	46 81       	ldd	r20, Z+6	; 0x06
    1c28:	57 81       	ldd	r21, Z+7	; 0x07
    1c2a:	24 81       	ldd	r18, Z+4	; 0x04
    1c2c:	35 81       	ldd	r19, Z+5	; 0x05
    1c2e:	42 17       	cp	r20, r18
    1c30:	53 07       	cpc	r21, r19
    1c32:	44 f4       	brge	.+16     	; 0x1c44 <fputc+0x38>
    1c34:	a0 81       	ld	r26, Z
    1c36:	b1 81       	ldd	r27, Z+1	; 0x01
    1c38:	9d 01       	movw	r18, r26
    1c3a:	2f 5f       	subi	r18, 0xFF	; 255
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	31 83       	std	Z+1, r19	; 0x01
    1c40:	20 83       	st	Z, r18
    1c42:	8c 93       	st	X, r24
    1c44:	26 81       	ldd	r18, Z+6	; 0x06
    1c46:	37 81       	ldd	r19, Z+7	; 0x07
    1c48:	2f 5f       	subi	r18, 0xFF	; 255
    1c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4c:	37 83       	std	Z+7, r19	; 0x07
    1c4e:	26 83       	std	Z+6, r18	; 0x06
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <fputc+0x6e>
    1c52:	8b 01       	movw	r16, r22
    1c54:	ec 01       	movw	r28, r24
    1c56:	fb 01       	movw	r30, r22
    1c58:	00 84       	ldd	r0, Z+8	; 0x08
    1c5a:	f1 85       	ldd	r31, Z+9	; 0x09
    1c5c:	e0 2d       	mov	r30, r0
    1c5e:	09 95       	icall
    1c60:	89 2b       	or	r24, r25
    1c62:	e1 f6       	brne	.-72     	; 0x1c1c <fputc+0x10>
    1c64:	d8 01       	movw	r26, r16
    1c66:	16 96       	adiw	r26, 0x06	; 6
    1c68:	8d 91       	ld	r24, X+
    1c6a:	9c 91       	ld	r25, X
    1c6c:	17 97       	sbiw	r26, 0x07	; 7
    1c6e:	01 96       	adiw	r24, 0x01	; 1
    1c70:	17 96       	adiw	r26, 0x07	; 7
    1c72:	9c 93       	st	X, r25
    1c74:	8e 93       	st	-X, r24
    1c76:	16 97       	sbiw	r26, 0x06	; 6
    1c78:	ce 01       	movw	r24, r28
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	08 95       	ret

00001c84 <__ultoa_invert>:
    1c84:	fa 01       	movw	r30, r20
    1c86:	aa 27       	eor	r26, r26
    1c88:	28 30       	cpi	r18, 0x08	; 8
    1c8a:	51 f1       	breq	.+84     	; 0x1ce0 <__ultoa_invert+0x5c>
    1c8c:	20 31       	cpi	r18, 0x10	; 16
    1c8e:	81 f1       	breq	.+96     	; 0x1cf0 <__ultoa_invert+0x6c>
    1c90:	e8 94       	clt
    1c92:	6f 93       	push	r22
    1c94:	6e 7f       	andi	r22, 0xFE	; 254
    1c96:	6e 5f       	subi	r22, 0xFE	; 254
    1c98:	7f 4f       	sbci	r23, 0xFF	; 255
    1c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9e:	af 4f       	sbci	r26, 0xFF	; 255
    1ca0:	b1 e0       	ldi	r27, 0x01	; 1
    1ca2:	3e d0       	rcall	.+124    	; 0x1d20 <__ultoa_invert+0x9c>
    1ca4:	b4 e0       	ldi	r27, 0x04	; 4
    1ca6:	3c d0       	rcall	.+120    	; 0x1d20 <__ultoa_invert+0x9c>
    1ca8:	67 0f       	add	r22, r23
    1caa:	78 1f       	adc	r23, r24
    1cac:	89 1f       	adc	r24, r25
    1cae:	9a 1f       	adc	r25, r26
    1cb0:	a1 1d       	adc	r26, r1
    1cb2:	68 0f       	add	r22, r24
    1cb4:	79 1f       	adc	r23, r25
    1cb6:	8a 1f       	adc	r24, r26
    1cb8:	91 1d       	adc	r25, r1
    1cba:	a1 1d       	adc	r26, r1
    1cbc:	6a 0f       	add	r22, r26
    1cbe:	71 1d       	adc	r23, r1
    1cc0:	81 1d       	adc	r24, r1
    1cc2:	91 1d       	adc	r25, r1
    1cc4:	a1 1d       	adc	r26, r1
    1cc6:	20 d0       	rcall	.+64     	; 0x1d08 <__ultoa_invert+0x84>
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <__ultoa_invert+0x48>
    1cca:	68 94       	set
    1ccc:	3f 91       	pop	r19
    1cce:	2a e0       	ldi	r18, 0x0A	; 10
    1cd0:	26 9f       	mul	r18, r22
    1cd2:	11 24       	eor	r1, r1
    1cd4:	30 19       	sub	r19, r0
    1cd6:	30 5d       	subi	r19, 0xD0	; 208
    1cd8:	31 93       	st	Z+, r19
    1cda:	de f6       	brtc	.-74     	; 0x1c92 <__ultoa_invert+0xe>
    1cdc:	cf 01       	movw	r24, r30
    1cde:	08 95       	ret
    1ce0:	46 2f       	mov	r20, r22
    1ce2:	47 70       	andi	r20, 0x07	; 7
    1ce4:	40 5d       	subi	r20, 0xD0	; 208
    1ce6:	41 93       	st	Z+, r20
    1ce8:	b3 e0       	ldi	r27, 0x03	; 3
    1cea:	0f d0       	rcall	.+30     	; 0x1d0a <__ultoa_invert+0x86>
    1cec:	c9 f7       	brne	.-14     	; 0x1ce0 <__ultoa_invert+0x5c>
    1cee:	f6 cf       	rjmp	.-20     	; 0x1cdc <__ultoa_invert+0x58>
    1cf0:	46 2f       	mov	r20, r22
    1cf2:	4f 70       	andi	r20, 0x0F	; 15
    1cf4:	40 5d       	subi	r20, 0xD0	; 208
    1cf6:	4a 33       	cpi	r20, 0x3A	; 58
    1cf8:	18 f0       	brcs	.+6      	; 0x1d00 <__ultoa_invert+0x7c>
    1cfa:	49 5d       	subi	r20, 0xD9	; 217
    1cfc:	31 fd       	sbrc	r19, 1
    1cfe:	40 52       	subi	r20, 0x20	; 32
    1d00:	41 93       	st	Z+, r20
    1d02:	02 d0       	rcall	.+4      	; 0x1d08 <__ultoa_invert+0x84>
    1d04:	a9 f7       	brne	.-22     	; 0x1cf0 <__ultoa_invert+0x6c>
    1d06:	ea cf       	rjmp	.-44     	; 0x1cdc <__ultoa_invert+0x58>
    1d08:	b4 e0       	ldi	r27, 0x04	; 4
    1d0a:	a6 95       	lsr	r26
    1d0c:	97 95       	ror	r25
    1d0e:	87 95       	ror	r24
    1d10:	77 95       	ror	r23
    1d12:	67 95       	ror	r22
    1d14:	ba 95       	dec	r27
    1d16:	c9 f7       	brne	.-14     	; 0x1d0a <__ultoa_invert+0x86>
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	61 05       	cpc	r22, r1
    1d1c:	71 05       	cpc	r23, r1
    1d1e:	08 95       	ret
    1d20:	9b 01       	movw	r18, r22
    1d22:	ac 01       	movw	r20, r24
    1d24:	0a 2e       	mov	r0, r26
    1d26:	06 94       	lsr	r0
    1d28:	57 95       	ror	r21
    1d2a:	47 95       	ror	r20
    1d2c:	37 95       	ror	r19
    1d2e:	27 95       	ror	r18
    1d30:	ba 95       	dec	r27
    1d32:	c9 f7       	brne	.-14     	; 0x1d26 <__ultoa_invert+0xa2>
    1d34:	62 0f       	add	r22, r18
    1d36:	73 1f       	adc	r23, r19
    1d38:	84 1f       	adc	r24, r20
    1d3a:	95 1f       	adc	r25, r21
    1d3c:	a0 1d       	adc	r26, r0
    1d3e:	08 95       	ret

00001d40 <__prologue_saves__>:
    1d40:	2f 92       	push	r2
    1d42:	3f 92       	push	r3
    1d44:	4f 92       	push	r4
    1d46:	5f 92       	push	r5
    1d48:	6f 92       	push	r6
    1d4a:	7f 92       	push	r7
    1d4c:	8f 92       	push	r8
    1d4e:	9f 92       	push	r9
    1d50:	af 92       	push	r10
    1d52:	bf 92       	push	r11
    1d54:	cf 92       	push	r12
    1d56:	df 92       	push	r13
    1d58:	ef 92       	push	r14
    1d5a:	ff 92       	push	r15
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	cf 93       	push	r28
    1d62:	df 93       	push	r29
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	ca 1b       	sub	r28, r26
    1d6a:	db 0b       	sbc	r29, r27
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	09 94       	ijmp

00001d78 <__epilogue_restores__>:
    1d78:	2a 88       	ldd	r2, Y+18	; 0x12
    1d7a:	39 88       	ldd	r3, Y+17	; 0x11
    1d7c:	48 88       	ldd	r4, Y+16	; 0x10
    1d7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d80:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d82:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d84:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d86:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d88:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d8a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d8c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d8e:	df 80       	ldd	r13, Y+7	; 0x07
    1d90:	ee 80       	ldd	r14, Y+6	; 0x06
    1d92:	fd 80       	ldd	r15, Y+5	; 0x05
    1d94:	0c 81       	ldd	r16, Y+4	; 0x04
    1d96:	1b 81       	ldd	r17, Y+3	; 0x03
    1d98:	aa 81       	ldd	r26, Y+2	; 0x02
    1d9a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d9c:	ce 0f       	add	r28, r30
    1d9e:	d1 1d       	adc	r29, r1
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	ed 01       	movw	r28, r26
    1dac:	08 95       	ret

00001dae <_exit>:
    1dae:	f8 94       	cli

00001db0 <__stop_program>:
    1db0:	ff cf       	rjmp	.-2      	; 0x1db0 <__stop_program>
