
DI-601_MPU-6050.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cf8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001cf8  00001d8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a4  00800090  00800090  00001dbc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001e18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b0b  00000000  00000000  000020c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c89  00000000  00000000  00005bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000185a  00000000  00000000  00006858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cf0  00000000  00000000  000080b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019f2  00000000  00000000  00008da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000041a2  00000000  00000000  0000a796  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000e938  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	43 c0       	rjmp	.+134    	; 0x8a <__bad_interrupt>
       4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
       6:	c0 c4       	rjmp	.+2432   	; 0x988 <__vector_3>
       8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
       a:	3f c0       	rjmp	.+126    	; 0x8a <__bad_interrupt>
       c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
       e:	3d c0       	rjmp	.+122    	; 0x8a <__bad_interrupt>
      10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
      12:	3b c0       	rjmp	.+118    	; 0x8a <__bad_interrupt>
      14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
      16:	f3 c4       	rjmp	.+2534   	; 0x9fe <__vector_11>
      18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
      1a:	1d c5       	rjmp	.+2618   	; 0xa56 <__vector_13>
      1c:	36 c0       	rjmp	.+108    	; 0x8a <__bad_interrupt>
      1e:	35 c0       	rjmp	.+106    	; 0x8a <__bad_interrupt>
      20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
      22:	33 c0       	rjmp	.+102    	; 0x8a <__bad_interrupt>
      24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
      26:	08 4a       	sbci	r16, 0xA8	; 168
      28:	d7 3b       	cpi	r29, 0xB7	; 183
      2a:	3b ce       	rjmp	.-906    	; 0xfffffca2 <__eeprom_end+0xff7efca2>
      2c:	01 6e       	ori	r16, 0xE1	; 225
      2e:	84 bc       	out	0x24, r8	; 36
      30:	bf fd       	.word	0xfdbf	; ????
      32:	c1 2f       	mov	r28, r17
      34:	3d 6c       	ori	r19, 0xCD	; 205
      36:	74 31       	cpi	r23, 0x14	; 20
      38:	9a bd       	out	0x2a, r25	; 42
      3a:	56 83       	std	Z+6, r21	; 0x06
      3c:	3d da       	rcall	.-2950   	; 0xfffff4b8 <__eeprom_end+0xff7ef4b8>
      3e:	3d 00       	.word	0x003d	; ????
      40:	c7 7f       	andi	r28, 0xF7	; 247
      42:	11 be       	out	0x31, r1	; 49
      44:	d9 e4       	ldi	r29, 0x49	; 73
      46:	bb 4c       	sbci	r27, 0xCB	; 203
      48:	3e 91       	ld	r19, -X
      4a:	6b aa       	std	Y+51, r6	; 0x33
      4c:	aa be       	out	0x3a, r10	; 58
      4e:	00 00       	nop
      50:	00 80       	ld	r0, Z
      52:	3f 00       	.word	0x003f	; ????

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	98 d5       	rcall	.+2864   	; 0xbb8 <main>
      88:	35 ce       	rjmp	.-918    	; 0xfffffcf4 <__eeprom_end+0xff7efcf4>

0000008a <__bad_interrupt>:
      8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <I2C_BeginTransmission>:
	}
	
	return i2c_status;
	
	/* Function End */
}
      8c:	24 ea       	ldi	r18, 0xA4	; 164
      8e:	26 bf       	out	0x36, r18	; 54
      90:	06 b6       	in	r0, 0x36	; 54
      92:	07 fc       	sbrc	r0, 7
      94:	0e c0       	rjmp	.+28     	; 0xb2 <I2C_BeginTransmission+0x26>
      96:	00 97       	sbiw	r24, 0x00	; 0
      98:	61 f0       	breq	.+24     	; 0xb2 <I2C_BeginTransmission+0x26>
      9a:	e9 ef       	ldi	r30, 0xF9	; 249
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	31 97       	sbiw	r30, 0x01	; 1
      a0:	f1 f7       	brne	.-4      	; 0x9e <I2C_BeginTransmission+0x12>
      a2:	00 c0       	rjmp	.+0      	; 0xa4 <I2C_BeginTransmission+0x18>
      a4:	00 00       	nop
      a6:	01 97       	sbiw	r24, 0x01	; 1
      a8:	06 b6       	in	r0, 0x36	; 54
      aa:	07 fc       	sbrc	r0, 7
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <I2C_BeginTransmission+0x26>
      ae:	00 97       	sbiw	r24, 0x00	; 0
      b0:	a1 f7       	brne	.-24     	; 0x9a <I2C_BeginTransmission+0xe>
      b2:	81 b1       	in	r24, 0x01	; 1
      b4:	88 7f       	andi	r24, 0xF8	; 248
      b6:	08 95       	ret

000000b8 <I2C_Transmit>:
      b8:	83 b9       	out	0x03, r24	; 3
      ba:	84 e8       	ldi	r24, 0x84	; 132
      bc:	86 bf       	out	0x36, r24	; 54
      be:	06 b6       	in	r0, 0x36	; 54
      c0:	07 fc       	sbrc	r0, 7
      c2:	11 c0       	rjmp	.+34     	; 0xe6 <I2C_Transmit+0x2e>
      c4:	61 15       	cp	r22, r1
      c6:	71 05       	cpc	r23, r1
      c8:	71 f0       	breq	.+28     	; 0xe6 <I2C_Transmit+0x2e>
      ca:	89 ef       	ldi	r24, 0xF9	; 249
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	01 97       	sbiw	r24, 0x01	; 1
      d0:	f1 f7       	brne	.-4      	; 0xce <I2C_Transmit+0x16>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <I2C_Transmit+0x1c>
      d4:	00 00       	nop
      d6:	61 50       	subi	r22, 0x01	; 1
      d8:	71 09       	sbc	r23, r1
      da:	06 b6       	in	r0, 0x36	; 54
      dc:	07 fc       	sbrc	r0, 7
      de:	03 c0       	rjmp	.+6      	; 0xe6 <I2C_Transmit+0x2e>
      e0:	61 15       	cp	r22, r1
      e2:	71 05       	cpc	r23, r1
      e4:	91 f7       	brne	.-28     	; 0xca <I2C_Transmit+0x12>
      e6:	81 b1       	in	r24, 0x01	; 1
      e8:	88 7f       	andi	r24, 0xF8	; 248
      ea:	08 95       	ret

000000ec <I2C_ReceiveACK>:
      ec:	24 ec       	ldi	r18, 0xC4	; 196
      ee:	26 bf       	out	0x36, r18	; 54
      f0:	06 b6       	in	r0, 0x36	; 54
      f2:	07 fc       	sbrc	r0, 7
      f4:	0e c0       	rjmp	.+28     	; 0x112 <I2C_ReceiveACK+0x26>
      f6:	00 97       	sbiw	r24, 0x00	; 0
      f8:	61 f0       	breq	.+24     	; 0x112 <I2C_ReceiveACK+0x26>
      fa:	e9 ef       	ldi	r30, 0xF9	; 249
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	31 97       	sbiw	r30, 0x01	; 1
     100:	f1 f7       	brne	.-4      	; 0xfe <I2C_ReceiveACK+0x12>
     102:	00 c0       	rjmp	.+0      	; 0x104 <I2C_ReceiveACK+0x18>
     104:	00 00       	nop
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	06 b6       	in	r0, 0x36	; 54
     10a:	07 fc       	sbrc	r0, 7
     10c:	02 c0       	rjmp	.+4      	; 0x112 <I2C_ReceiveACK+0x26>
     10e:	00 97       	sbiw	r24, 0x00	; 0
     110:	a1 f7       	brne	.-24     	; 0xfa <I2C_ReceiveACK+0xe>
     112:	83 b1       	in	r24, 0x03	; 3
     114:	08 95       	ret

00000116 <I2C_ReceiveNACK>:
     116:	24 e8       	ldi	r18, 0x84	; 132
     118:	26 bf       	out	0x36, r18	; 54
     11a:	06 b6       	in	r0, 0x36	; 54
     11c:	07 fc       	sbrc	r0, 7
     11e:	0e c0       	rjmp	.+28     	; 0x13c <I2C_ReceiveNACK+0x26>
     120:	00 97       	sbiw	r24, 0x00	; 0
     122:	61 f0       	breq	.+24     	; 0x13c <I2C_ReceiveNACK+0x26>
     124:	e9 ef       	ldi	r30, 0xF9	; 249
     126:	f0 e0       	ldi	r31, 0x00	; 0
     128:	31 97       	sbiw	r30, 0x01	; 1
     12a:	f1 f7       	brne	.-4      	; 0x128 <I2C_ReceiveNACK+0x12>
     12c:	00 c0       	rjmp	.+0      	; 0x12e <I2C_ReceiveNACK+0x18>
     12e:	00 00       	nop
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	06 b6       	in	r0, 0x36	; 54
     134:	07 fc       	sbrc	r0, 7
     136:	02 c0       	rjmp	.+4      	; 0x13c <I2C_ReceiveNACK+0x26>
     138:	00 97       	sbiw	r24, 0x00	; 0
     13a:	a1 f7       	brne	.-24     	; 0x124 <I2C_ReceiveNACK+0xe>
     13c:	83 b1       	in	r24, 0x03	; 3
     13e:	08 95       	ret

00000140 <I2C_EndTransmission>:
     140:	24 e9       	ldi	r18, 0x94	; 148
     142:	26 bf       	out	0x36, r18	; 54
     144:	06 b6       	in	r0, 0x36	; 54
     146:	04 fe       	sbrs	r0, 4
     148:	0e c0       	rjmp	.+28     	; 0x166 <I2C_EndTransmission+0x26>
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	61 f0       	breq	.+24     	; 0x166 <I2C_EndTransmission+0x26>
     14e:	e9 ef       	ldi	r30, 0xF9	; 249
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	31 97       	sbiw	r30, 0x01	; 1
     154:	f1 f7       	brne	.-4      	; 0x152 <I2C_EndTransmission+0x12>
     156:	00 c0       	rjmp	.+0      	; 0x158 <I2C_EndTransmission+0x18>
     158:	00 00       	nop
     15a:	01 97       	sbiw	r24, 0x01	; 1
     15c:	06 b6       	in	r0, 0x36	; 54
     15e:	04 fe       	sbrs	r0, 4
     160:	02 c0       	rjmp	.+4      	; 0x166 <I2C_EndTransmission+0x26>
     162:	00 97       	sbiw	r24, 0x00	; 0
     164:	a1 f7       	brne	.-24     	; 0x14e <I2C_EndTransmission+0xe>
     166:	08 95       	ret

00000168 <I2C_Init>:
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	81 b9       	out	0x01, r24	; 1
     16c:	89 ef       	ldi	r24, 0xF9	; 249
     16e:	80 b9       	out	0x00, r24	; 0
     170:	84 e0       	ldi	r24, 0x04	; 4
     172:	86 bf       	out	0x36, r24	; 54
     174:	08 95       	ret

00000176 <I2C_IsDeviceReady>:
     176:	df 92       	push	r13
     178:	ef 92       	push	r14
     17a:	ff 92       	push	r15
     17c:	0f 93       	push	r16
     17e:	1f 93       	push	r17
     180:	cf 93       	push	r28
     182:	df 93       	push	r29
     184:	d8 2e       	mov	r13, r24
     186:	eb 01       	movw	r28, r22
     188:	8a 01       	movw	r16, r20
     18a:	20 97       	sbiw	r28, 0x00	; 0
     18c:	99 f0       	breq	.+38     	; 0x1b4 <I2C_IsDeviceReady+0x3e>
     18e:	e1 2c       	mov	r14, r1
     190:	f1 2c       	mov	r15, r1
     192:	c8 01       	movw	r24, r16
     194:	7b df       	rcall	.-266    	; 0x8c <I2C_BeginTransmission>
     196:	88 30       	cpi	r24, 0x08	; 8
     198:	19 f4       	brne	.+6      	; 0x1a0 <I2C_IsDeviceReady+0x2a>
     19a:	b8 01       	movw	r22, r16
     19c:	8d 2d       	mov	r24, r13
     19e:	8c df       	rcall	.-232    	; 0xb8 <I2C_Transmit>
     1a0:	88 31       	cpi	r24, 0x18	; 24
     1a2:	29 f4       	brne	.+10     	; 0x1ae <I2C_IsDeviceReady+0x38>
     1a4:	c8 01       	movw	r24, r16
     1a6:	cc df       	rcall	.-104    	; 0x140 <I2C_EndTransmission>
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	e8 1a       	sub	r14, r24
     1ac:	f8 0a       	sbc	r15, r24
     1ae:	21 97       	sbiw	r28, 0x01	; 1
     1b0:	81 f7       	brne	.-32     	; 0x192 <I2C_IsDeviceReady+0x1c>
     1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <I2C_IsDeviceReady+0x42>
     1b4:	e1 2c       	mov	r14, r1
     1b6:	f1 2c       	mov	r15, r1
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	ef 28       	or	r14, r15
     1bc:	09 f4       	brne	.+2      	; 0x1c0 <I2C_IsDeviceReady+0x4a>
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	df 91       	pop	r29
     1c2:	cf 91       	pop	r28
     1c4:	1f 91       	pop	r17
     1c6:	0f 91       	pop	r16
     1c8:	ff 90       	pop	r15
     1ca:	ef 90       	pop	r14
     1cc:	df 90       	pop	r13
     1ce:	08 95       	ret

000001d0 <I2C_Mem_Write>:
					com_stat = I2C_Master_Receive(0xD2,my_received_data,5,100); (0xD2 : Device Address)
			
*/

StatusTypeDef I2C_Mem_Write(uint8_t dev_address , uint32_t mem_address , uint8_t mem_add_size , uint8_t *mem_data , uint32_t quantity , uint16_t time_out) /* This function is for write data to external memory */
{
     1d0:	2f 92       	push	r2
     1d2:	3f 92       	push	r3
     1d4:	4f 92       	push	r4
     1d6:	5f 92       	push	r5
     1d8:	6f 92       	push	r6
     1da:	7f 92       	push	r7
     1dc:	8f 92       	push	r8
     1de:	9f 92       	push	r9
     1e0:	af 92       	push	r10
     1e2:	bf 92       	push	r11
     1e4:	cf 92       	push	r12
     1e6:	df 92       	push	r13
     1e8:	ef 92       	push	r14
     1ea:	ff 92       	push	r15
     1ec:	0f 93       	push	r16
     1ee:	1f 93       	push	r17
     1f0:	cf 93       	push	r28
     1f2:	df 93       	push	r29
     1f4:	c8 2f       	mov	r28, r24
     1f6:	2a 01       	movw	r4, r20
     1f8:	3b 01       	movw	r6, r22
     1fa:	d2 2f       	mov	r29, r18
     1fc:	15 01       	movw	r2, r10
	uint32_t write_quantity = quantity; /* Variable for check write quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
	
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	if ( I2C_IsDeviceReady(dev_address , 1 , time_out) == _TRUE ) /* target device is ready */
     1fe:	a5 01       	movw	r20, r10
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	70 e0       	ldi	r23, 0x00	; 0
     204:	b8 df       	rcall	.-144    	; 0x176 <I2C_IsDeviceReady>
     206:	81 30       	cpi	r24, 0x01	; 1
     208:	09 f0       	breq	.+2      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
     20a:	96 c0       	rjmp	.+300    	; 0x338 <__EEPROM_REGION_LENGTH__+0x138>
	{
		
		i2c_status = I2C_BeginTransmission(time_out); /* Begin Transmission */
     20c:	c5 01       	movw	r24, r10
     20e:	3e df       	rcall	.-388    	; 0x8c <I2C_BeginTransmission>
		
		/* --------------------------------- */
		
		if ( mem_add_size == _I2C_MEMADD_SIZE_8BIT ) /* Check memory address size */
     210:	d8 30       	cpi	r29, 0x08	; 8
     212:	41 f5       	brne	.+80     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     214:	88 30       	cpi	r24, 0x08	; 8
     216:	99 f4       	brne	.+38     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_8BIT) & _P0_BIT_SEL_MEMADD_SIZE_8BIT)) , time_out); /* Send Device Address */
     218:	d3 01       	movw	r26, r6
     21a:	c2 01       	movw	r24, r4
     21c:	68 94       	set
     21e:	16 f8       	bld	r1, 6
     220:	b6 95       	lsr	r27
     222:	a7 95       	ror	r26
     224:	97 95       	ror	r25
     226:	87 95       	ror	r24
     228:	16 94       	lsr	r1
     22a:	d1 f7       	brne	.-12     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
     22c:	8e 70       	andi	r24, 0x0E	; 14
     22e:	b5 01       	movw	r22, r10
     230:	8c 2b       	or	r24, r28
     232:	42 df       	rcall	.-380    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     234:	81 2c       	mov	r8, r1
     236:	91 2c       	mov	r9, r1
     238:	54 01       	movw	r10, r8
     23a:	83 94       	inc	r8
     23c:	03 c0       	rjmp	.+6      	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t write_quantity = quantity; /* Variable for check write quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     23e:	81 2c       	mov	r8, r1
     240:	91 2c       	mov	r9, r1
     242:	54 01       	movw	r10, r8
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     244:	88 31       	cpi	r24, 0x18	; 24
     246:	41 f4       	brne	.+16     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     248:	b1 01       	movw	r22, r2
     24a:	84 2d       	mov	r24, r4
     24c:	35 df       	rcall	.-406    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     24e:	9f ef       	ldi	r25, 0xFF	; 255
     250:	89 1a       	sub	r8, r25
     252:	99 0a       	sbc	r9, r25
     254:	a9 0a       	sbc	r10, r25
     256:	b9 0a       	sbc	r11, r25
			
		}
		
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
     258:	c1 14       	cp	r12, r1
     25a:	d1 04       	cpc	r13, r1
     25c:	e1 04       	cpc	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	81 f5       	brne	.+96     	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
     262:	43 c0       	rjmp	.+134    	; 0x2ea <__EEPROM_REGION_LENGTH__+0xea>
			
		}
		else
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     264:	88 30       	cpi	r24, 0x08	; 8
     266:	a1 f4       	brne	.+40     	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_16BIT) & _P0_BIT_SEL_MEMADD_SIZE_16BIT)) , time_out); /* Send Device Address */
     268:	d3 01       	movw	r26, r6
     26a:	c2 01       	movw	r24, r4
     26c:	07 2e       	mov	r0, r23
     26e:	7f e0       	ldi	r23, 0x0F	; 15
     270:	b6 95       	lsr	r27
     272:	a7 95       	ror	r26
     274:	97 95       	ror	r25
     276:	87 95       	ror	r24
     278:	7a 95       	dec	r23
     27a:	d1 f7       	brne	.-12     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
     27c:	70 2d       	mov	r23, r0
     27e:	82 70       	andi	r24, 0x02	; 2
     280:	b5 01       	movw	r22, r10
     282:	8c 2b       	or	r24, r28
     284:	19 df       	rcall	.-462    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     286:	81 2c       	mov	r8, r1
     288:	91 2c       	mov	r9, r1
     28a:	54 01       	movw	r10, r8
     28c:	83 94       	inc	r8
     28e:	03 c0       	rjmp	.+6      	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t write_quantity = quantity; /* Variable for check write quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     290:	81 2c       	mov	r8, r1
     292:	91 2c       	mov	r9, r1
     294:	54 01       	movw	r10, r8
			}
			else{}
				
			/* ~~~~~~~~~~~~ Send MSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* SLA+W has been transmitted, and ACK has been received. */
     296:	88 31       	cpi	r24, 0x18	; 24
     298:	41 f4       	brne	.+16     	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
			{
				i2c_status = I2C_Transmit( (uint8_t)(mem_address >> _BYTE_SHIFT_VAL) , time_out); /* Send first memory Address */
     29a:	b1 01       	movw	r22, r2
     29c:	85 2d       	mov	r24, r5
     29e:	0c df       	rcall	.-488    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     2a0:	ef ef       	ldi	r30, 0xFF	; 255
     2a2:	8e 1a       	sub	r8, r30
     2a4:	9e 0a       	sbc	r9, r30
     2a6:	ae 0a       	sbc	r10, r30
     2a8:	be 0a       	sbc	r11, r30
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     2aa:	88 32       	cpi	r24, 0x28	; 40
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
     2ae:	48 c0       	rjmp	.+144    	; 0x340 <__EEPROM_REGION_LENGTH__+0x140>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     2b0:	b1 01       	movw	r22, r2
     2b2:	84 2d       	mov	r24, r4
     2b4:	01 df       	rcall	.-510    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     2b6:	ff ef       	ldi	r31, 0xFF	; 255
     2b8:	8f 1a       	sub	r8, r31
     2ba:	9f 0a       	sbc	r9, r31
     2bc:	af 0a       	sbc	r10, r31
     2be:	bf 0a       	sbc	r11, r31
     2c0:	cb cf       	rjmp	.-106    	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_16BIT) & _P0_BIT_SEL_MEMADD_SIZE_16BIT)) , time_out); /* Send Device Address */
				step_check++; /* The step is completed */
     2c2:	26 01       	movw	r4, r12
     2c4:	37 01       	movw	r6, r14
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
		{
			
			if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* DATA has been transmitted, and ACK has been received. */
     2c6:	88 32       	cpi	r24, 0x28	; 40
     2c8:	51 f4       	brne	.+20     	; 0x2de <__EEPROM_REGION_LENGTH__+0xde>
			{
				
				i2c_status = I2C_Transmit( *mem_data , time_out ); /* Send data to memory */
     2ca:	b1 01       	movw	r22, r2
     2cc:	f8 01       	movw	r30, r16
     2ce:	81 91       	ld	r24, Z+
     2d0:	8f 01       	movw	r16, r30
     2d2:	f2 de       	rcall	.-540    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     2d4:	ff ef       	ldi	r31, 0xFF	; 255
     2d6:	8f 1a       	sub	r8, r31
     2d8:	9f 0a       	sbc	r9, r31
     2da:	af 0a       	sbc	r10, r31
     2dc:	bf 0a       	sbc	r11, r31
			
		}
		
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	49 1a       	sub	r4, r25
     2e2:	51 08       	sbc	r5, r1
     2e4:	61 08       	sbc	r6, r1
     2e6:	71 08       	sbc	r7, r1
     2e8:	71 f7       	brne	.-36     	; 0x2c6 <__EEPROM_REGION_LENGTH__+0xc6>
			
		}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* DATA has been transmitted, and ACK has been received. */
     2ea:	88 32       	cpi	r24, 0x28	; 40
     2ec:	39 f4       	brne	.+14     	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
		{
			I2C_EndTransmission(time_out); /* End Transmission */
     2ee:	c1 01       	movw	r24, r2
     2f0:	27 df       	rcall	.-434    	; 0x140 <I2C_EndTransmission>
			step_check++; /* The step is completed */
     2f2:	ef ef       	ldi	r30, 0xFF	; 255
     2f4:	8e 1a       	sub	r8, r30
     2f6:	9e 0a       	sbc	r9, r30
     2f8:	ae 0a       	sbc	r10, r30
     2fa:	be 0a       	sbc	r11, r30
		}
		else{}
		
		/* --------------------------------- */
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_WRITE_STEPS - 1) + write_quantity)) ) /* The steps are complete */
     2fc:	d8 30       	cpi	r29, 0x08	; 8
     2fe:	69 f4       	brne	.+26     	; 0x31a <__EEPROM_REGION_LENGTH__+0x11a>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_WRITE_STEPS + write_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
     300:	f3 e0       	ldi	r31, 0x03	; 3
     302:	cf 0e       	add	r12, r31
     304:	d1 1c       	adc	r13, r1
     306:	e1 1c       	adc	r14, r1
     308:	f1 1c       	adc	r15, r1
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	c8 14       	cp	r12, r8
     30e:	d9 04       	cpc	r13, r9
     310:	ea 04       	cpc	r14, r10
     312:	fb 04       	cpc	r15, r11
     314:	e1 f0       	breq	.+56     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	1a c0       	rjmp	.+52     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_WRITE_STEPS - 1) + write_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_WRITE_STEPS + write_quantity)) ) /* The steps are complete */
     31a:	d0 31       	cpi	r29, 0x10	; 16
     31c:	79 f4       	brne	.+30     	; 0x33c <__EEPROM_REGION_LENGTH__+0x13c>
		{
			i2c_status = _STAT_OK; /* Set status */
     31e:	84 e0       	ldi	r24, 0x04	; 4
     320:	c8 0e       	add	r12, r24
     322:	d1 1c       	adc	r13, r1
     324:	e1 1c       	adc	r14, r1
     326:	f1 1c       	adc	r15, r1
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	c8 14       	cp	r12, r8
     32c:	d9 04       	cpc	r13, r9
     32e:	ea 04       	cpc	r14, r10
     330:	fb 04       	cpc	r15, r11
     332:	69 f0       	breq	.+26     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	0b c0       	rjmp	.+22     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
		}
		
	}
	else
	{
		i2c_status = _STAT_ERROR; /* Set status */
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	09 c0       	rjmp	.+18     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else
		{
			i2c_status = _STAT_ERROR; /* Set status */
     33c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		i2c_status = _STAT_ERROR; /* Set status */
	}
	
	return i2c_status;
     33e:	07 c0       	rjmp	.+14     	; 0x34e <__EEPROM_REGION_LENGTH__+0x14e>
			
		}
		
		/* --------------------------------- */
		
		for ( ; quantity > 0 ; quantity-- ) /* Loop for write data to memory */
     340:	c1 14       	cp	r12, r1
     342:	d1 04       	cpc	r13, r1
     344:	e1 04       	cpc	r14, r1
     346:	f1 04       	cpc	r15, r1
     348:	09 f0       	breq	.+2      	; 0x34c <__EEPROM_REGION_LENGTH__+0x14c>
     34a:	bb cf       	rjmp	.-138    	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
     34c:	e6 cf       	rjmp	.-52     	; 0x31a <__EEPROM_REGION_LENGTH__+0x11a>
	}
	
	return i2c_status;
	
	/* Function End */
}
     34e:	df 91       	pop	r29
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
     356:	ff 90       	pop	r15
     358:	ef 90       	pop	r14
     35a:	df 90       	pop	r13
     35c:	cf 90       	pop	r12
     35e:	bf 90       	pop	r11
     360:	af 90       	pop	r10
     362:	9f 90       	pop	r9
     364:	8f 90       	pop	r8
     366:	7f 90       	pop	r7
     368:	6f 90       	pop	r6
     36a:	5f 90       	pop	r5
     36c:	4f 90       	pop	r4
     36e:	3f 90       	pop	r3
     370:	2f 90       	pop	r2
     372:	08 95       	ret

00000374 <I2C_Mem_Read>:
					com_stat = I2C_Mem_Write(0xA0 , 75 , _I2C_MEMADD_SIZE_16BIT , my_data , 20 , 100); (0xA0 : Device Address)
			
*/

StatusTypeDef I2C_Mem_Read(uint8_t dev_address , uint32_t mem_address , uint8_t mem_add_size , uint8_t *mem_data , uint32_t quantity , uint16_t time_out ) /* This function is for read data from external memory */
{
     374:	2f 92       	push	r2
     376:	3f 92       	push	r3
     378:	4f 92       	push	r4
     37a:	5f 92       	push	r5
     37c:	6f 92       	push	r6
     37e:	7f 92       	push	r7
     380:	8f 92       	push	r8
     382:	9f 92       	push	r9
     384:	af 92       	push	r10
     386:	bf 92       	push	r11
     388:	cf 92       	push	r12
     38a:	df 92       	push	r13
     38c:	ef 92       	push	r14
     38e:	ff 92       	push	r15
     390:	0f 93       	push	r16
     392:	1f 93       	push	r17
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	c8 2f       	mov	r28, r24
     39a:	2a 01       	movw	r4, r20
     39c:	3b 01       	movw	r6, r22
     39e:	d2 2f       	mov	r29, r18
     3a0:	15 01       	movw	r2, r10
	uint32_t read_quantity = quantity; /* Variable for check read quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
	
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	if ( I2C_IsDeviceReady(dev_address , 1 , time_out) == _TRUE ) /* target device is ready */
     3a2:	a5 01       	movw	r20, r10
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	e6 de       	rcall	.-564    	; 0x176 <I2C_IsDeviceReady>
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <I2C_Mem_Read+0x3c>
     3ae:	c1 c0       	rjmp	.+386    	; 0x532 <__stack+0xd3>
	{
		
		i2c_status = I2C_BeginTransmission(time_out); /* Begin Transmission */
     3b0:	c5 01       	movw	r24, r10
     3b2:	6c de       	rcall	.-808    	; 0x8c <I2C_BeginTransmission>
		
		/* --------------------------------- */
		
		if ( mem_add_size == _I2C_MEMADD_SIZE_8BIT ) /* Check memory address size */
     3b4:	d8 30       	cpi	r29, 0x08	; 8
     3b6:	19 f5       	brne	.+70     	; 0x3fe <I2C_Mem_Read+0x8a>
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     3b8:	88 30       	cpi	r24, 0x08	; 8
     3ba:	99 f4       	brne	.+38     	; 0x3e2 <I2C_Mem_Read+0x6e>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_8BIT) & _P0_BIT_SEL_MEMADD_SIZE_8BIT)) , time_out ); /* Send device Address */
     3bc:	d3 01       	movw	r26, r6
     3be:	c2 01       	movw	r24, r4
     3c0:	68 94       	set
     3c2:	16 f8       	bld	r1, 6
     3c4:	b6 95       	lsr	r27
     3c6:	a7 95       	ror	r26
     3c8:	97 95       	ror	r25
     3ca:	87 95       	ror	r24
     3cc:	16 94       	lsr	r1
     3ce:	d1 f7       	brne	.-12     	; 0x3c4 <I2C_Mem_Read+0x50>
     3d0:	8e 70       	andi	r24, 0x0E	; 14
     3d2:	b5 01       	movw	r22, r10
     3d4:	8c 2b       	or	r24, r28
     3d6:	70 de       	rcall	.-800    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     3d8:	81 2c       	mov	r8, r1
     3da:	91 2c       	mov	r9, r1
     3dc:	54 01       	movw	r10, r8
     3de:	83 94       	inc	r8
     3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <I2C_Mem_Read+0x74>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t read_quantity = quantity; /* Variable for check read quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     3e2:	81 2c       	mov	r8, r1
     3e4:	91 2c       	mov	r9, r1
     3e6:	54 01       	movw	r10, r8
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     3e8:	88 31       	cpi	r24, 0x18	; 24
     3ea:	b1 f5       	brne	.+108    	; 0x458 <__DATA_REGION_LENGTH__+0x58>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     3ec:	b1 01       	movw	r22, r2
     3ee:	84 2d       	mov	r24, r4
     3f0:	63 de       	rcall	.-826    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     3f2:	9f ef       	ldi	r25, 0xFF	; 255
     3f4:	89 1a       	sub	r8, r25
     3f6:	99 0a       	sbc	r9, r25
     3f8:	a9 0a       	sbc	r10, r25
     3fa:	b9 0a       	sbc	r11, r25
     3fc:	2d c0       	rjmp	.+90     	; 0x458 <__DATA_REGION_LENGTH__+0x58>
			
		}
		else
		{
			
			if ( i2c_status == _MT_START_TRANSMITTED ) /* START condition has been transmitted */
     3fe:	88 30       	cpi	r24, 0x08	; 8
     400:	a1 f4       	brne	.+40     	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
			{
				i2c_status = I2C_Transmit( (dev_address | (uint8_t)((mem_address >> _P0_SHIFT_VAL_MEMADD_SIZE_16BIT) & _P0_BIT_SEL_MEMADD_SIZE_16BIT)) , time_out ); /* Send device Address */
     402:	d3 01       	movw	r26, r6
     404:	c2 01       	movw	r24, r4
     406:	07 2e       	mov	r0, r23
     408:	7f e0       	ldi	r23, 0x0F	; 15
     40a:	b6 95       	lsr	r27
     40c:	a7 95       	ror	r26
     40e:	97 95       	ror	r25
     410:	87 95       	ror	r24
     412:	7a 95       	dec	r23
     414:	d1 f7       	brne	.-12     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
     416:	70 2d       	mov	r23, r0
     418:	82 70       	andi	r24, 0x02	; 2
     41a:	b5 01       	movw	r22, r10
     41c:	8c 2b       	or	r24, r28
     41e:	4c de       	rcall	.-872    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     420:	81 2c       	mov	r8, r1
     422:	91 2c       	mov	r9, r1
     424:	54 01       	movw	r10, r8
     426:	83 94       	inc	r8
     428:	03 c0       	rjmp	.+6      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
{
	/* ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ */
	
	uint8_t i2c_status = 0; /* Variable for check status */
	uint32_t read_quantity = quantity; /* Variable for check read quantity */
	uint32_t step_check = 0; /* Variable to check the completed steps */
     42a:	81 2c       	mov	r8, r1
     42c:	91 2c       	mov	r9, r1
     42e:	54 01       	movw	r10, r8
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send MSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_SLA_W_TRANSMITTED_ACK ) /* SLA+W has been transmitted, and ACK has been received. */
     430:	88 31       	cpi	r24, 0x18	; 24
     432:	41 f4       	brne	.+16     	; 0x444 <__DATA_REGION_LENGTH__+0x44>
			{
				i2c_status = I2C_Transmit( (uint8_t)(mem_address >> _BYTE_SHIFT_VAL) , time_out); /* Send first memory Address */
     434:	b1 01       	movw	r22, r2
     436:	85 2d       	mov	r24, r5
     438:	3f de       	rcall	.-898    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     43a:	ef ef       	ldi	r30, 0xFF	; 255
     43c:	8e 1a       	sub	r8, r30
     43e:	9e 0a       	sbc	r9, r30
     440:	ae 0a       	sbc	r10, r30
     442:	be 0a       	sbc	r11, r30
			}
			else{}
			
			/* ~~~~~~~~~~~~ Send LSB Memory Address ~~~~~~~~~~~~ */
			
			if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* Data has been transmitted, and ACK has been received. */
     444:	88 32       	cpi	r24, 0x28	; 40
     446:	89 f4       	brne	.+34     	; 0x46a <__stack+0xb>
			{
				i2c_status = I2C_Transmit( (uint8_t)mem_address , time_out ); /* Send second memory Address */
     448:	b1 01       	movw	r22, r2
     44a:	84 2d       	mov	r24, r4
     44c:	35 de       	rcall	.-918    	; 0xb8 <I2C_Transmit>
				step_check++; /* The step is completed */
     44e:	ff ef       	ldi	r31, 0xFF	; 255
     450:	8f 1a       	sub	r8, r31
     452:	9f 0a       	sbc	r9, r31
     454:	af 0a       	sbc	r10, r31
     456:	bf 0a       	sbc	r11, r31
			
		}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MT_DATA_TRANSMITTED_ACK ) /* DATA has been transmitted, and ACK has been received. */
     458:	88 32       	cpi	r24, 0x28	; 40
     45a:	39 f4       	brne	.+14     	; 0x46a <__stack+0xb>
		{
			i2c_status = I2C_BeginTransmission(time_out); /* Repeat Start */
     45c:	c1 01       	movw	r24, r2
     45e:	16 de       	rcall	.-980    	; 0x8c <I2C_BeginTransmission>
			step_check++; /* The step is completed */
     460:	9f ef       	ldi	r25, 0xFF	; 255
     462:	89 1a       	sub	r8, r25
     464:	99 0a       	sbc	r9, r25
     466:	a9 0a       	sbc	r10, r25
     468:	b9 0a       	sbc	r11, r25
		}
		else{}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MT_REP_START_TRANSMITTED ) /* A repeated START condition has been transmitted */
     46a:	80 31       	cpi	r24, 0x10	; 16
     46c:	49 f4       	brne	.+18     	; 0x480 <__stack+0x21>
		{
			i2c_status = I2C_Transmit( (dev_address | _DEVICE_READ) , time_out ); /* Send device Address */
     46e:	b1 01       	movw	r22, r2
     470:	8c 2f       	mov	r24, r28
     472:	81 60       	ori	r24, 0x01	; 1
     474:	21 de       	rcall	.-958    	; 0xb8 <I2C_Transmit>
			step_check++; /* The step is completed */
     476:	ef ef       	ldi	r30, 0xFF	; 255
     478:	8e 1a       	sub	r8, r30
     47a:	9e 0a       	sbc	r9, r30
     47c:	ae 0a       	sbc	r10, r30
     47e:	be 0a       	sbc	r11, r30
		}
		else{}
		
		/* --------------------------------- */
		
		for ( ; quantity > 1 ; quantity-- ) /* Loop for write data to register */
     480:	f2 e0       	ldi	r31, 0x02	; 2
     482:	cf 16       	cp	r12, r31
     484:	d1 04       	cpc	r13, r1
     486:	e1 04       	cpc	r14, r1
     488:	f1 04       	cpc	r15, r1
     48a:	e8 f0       	brcs	.+58     	; 0x4c6 <__stack+0x67>
     48c:	26 01       	movw	r4, r12
     48e:	37 01       	movw	r6, r14
		{
			
			if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
     490:	98 2f       	mov	r25, r24
     492:	9f 7e       	andi	r25, 0xEF	; 239
     494:	90 34       	cpi	r25, 0x40	; 64
     496:	61 f4       	brne	.+24     	; 0x4b0 <__stack+0x51>
			{
				
				*mem_data = I2C_ReceiveACK(time_out); /* Receive Data with send ACK */
     498:	c1 01       	movw	r24, r2
     49a:	28 de       	rcall	.-944    	; 0xec <I2C_ReceiveACK>
     49c:	f8 01       	movw	r30, r16
     49e:	81 93       	st	Z+, r24
     4a0:	8f 01       	movw	r16, r30
/* ------------------ Functions ------------------ */

uint8_t I2C_Status(void) /* Function for take I2C status */
{
	
	return (_I2C_SR & _I2C_STATUS); /* Return I2C status */
     4a2:	81 b1       	in	r24, 0x01	; 1
     4a4:	88 7f       	andi	r24, 0xF8	; 248
			if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
			{
				
				*mem_data = I2C_ReceiveACK(time_out); /* Receive Data with send ACK */
				i2c_status = I2C_Status(); /* I2C status take */
				step_check++; /* The step is completed */
     4a6:	ff ef       	ldi	r31, 0xFF	; 255
     4a8:	8f 1a       	sub	r8, r31
     4aa:	9f 0a       	sbc	r9, r31
     4ac:	af 0a       	sbc	r10, r31
     4ae:	bf 0a       	sbc	r11, r31
		}
		else{}
		
		/* --------------------------------- */
		
		for ( ; quantity > 1 ; quantity-- ) /* Loop for write data to register */
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	49 1a       	sub	r4, r25
     4b4:	51 08       	sbc	r5, r1
     4b6:	61 08       	sbc	r6, r1
     4b8:	71 08       	sbc	r7, r1
     4ba:	e1 e0       	ldi	r30, 0x01	; 1
     4bc:	4e 16       	cp	r4, r30
     4be:	51 04       	cpc	r5, r1
     4c0:	61 04       	cpc	r6, r1
     4c2:	71 04       	cpc	r7, r1
     4c4:	29 f7       	brne	.-54     	; 0x490 <__stack+0x31>
			
		}
		
		/* --------------------------------- */
		
		if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
     4c6:	98 2f       	mov	r25, r24
     4c8:	9f 7e       	andi	r25, 0xEF	; 239
     4ca:	90 34       	cpi	r25, 0x40	; 64
     4cc:	59 f4       	brne	.+22     	; 0x4e4 <__stack+0x85>
		{
			
			*mem_data = I2C_ReceiveNACK(time_out); /* Receive Data with send NACK */
     4ce:	c1 01       	movw	r24, r2
     4d0:	22 de       	rcall	.-956    	; 0x116 <I2C_ReceiveNACK>
     4d2:	f8 01       	movw	r30, r16
     4d4:	80 83       	st	Z, r24
/* ------------------ Functions ------------------ */

uint8_t I2C_Status(void) /* Function for take I2C status */
{
	
	return (_I2C_SR & _I2C_STATUS); /* Return I2C status */
     4d6:	81 b1       	in	r24, 0x01	; 1
     4d8:	88 7f       	andi	r24, 0xF8	; 248
		if ( ( i2c_status == _MR_SLA_R_TRANSMITTED_ACK ) || ( i2c_status == _MR_DATA_RECEIVED_ACK ) ) /* SLA+R/DATA has been transmitted, and ACK has been received. */
		{
			
			*mem_data = I2C_ReceiveNACK(time_out); /* Receive Data with send NACK */
			i2c_status = I2C_Status(); /* I2C status take */
			step_check++; /* The step is completed */
     4da:	ff ef       	ldi	r31, 0xFF	; 255
     4dc:	8f 1a       	sub	r8, r31
     4de:	9f 0a       	sbc	r9, r31
     4e0:	af 0a       	sbc	r10, r31
     4e2:	bf 0a       	sbc	r11, r31
		}
		else{}
		
		/* --------------------------------- */
		
		if ( i2c_status == _MR_DATA_RECEIVED_NACK ) /* Data byte has been received; NOT ACK has been returned */
     4e4:	88 35       	cpi	r24, 0x58	; 88
     4e6:	39 f4       	brne	.+14     	; 0x4f6 <__stack+0x97>
		{
			I2C_EndTransmission(time_out); /* End Transmission */
     4e8:	c1 01       	movw	r24, r2
     4ea:	2a de       	rcall	.-940    	; 0x140 <I2C_EndTransmission>
			step_check++; /* The step is completed */
     4ec:	8f ef       	ldi	r24, 0xFF	; 255
     4ee:	88 1a       	sub	r8, r24
     4f0:	98 0a       	sbc	r9, r24
     4f2:	a8 0a       	sbc	r10, r24
     4f4:	b8 0a       	sbc	r11, r24
		}
		else{}
		
		/* --------------------------------- */
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_READ_STEPS - 1) + read_quantity)) ) /* The steps are complete */
     4f6:	d8 30       	cpi	r29, 0x08	; 8
     4f8:	69 f4       	brne	.+26     	; 0x514 <__stack+0xb5>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_READ_STEPS + read_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
     4fa:	95 e0       	ldi	r25, 0x05	; 5
     4fc:	c9 0e       	add	r12, r25
     4fe:	d1 1c       	adc	r13, r1
     500:	e1 1c       	adc	r14, r1
     502:	f1 1c       	adc	r15, r1
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	c8 14       	cp	r12, r8
     508:	d9 04       	cpc	r13, r9
     50a:	ea 04       	cpc	r14, r10
     50c:	fb 04       	cpc	r15, r11
     50e:	a1 f0       	breq	.+40     	; 0x538 <__stack+0xd9>
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	12 c0       	rjmp	.+36     	; 0x538 <__stack+0xd9>
		
		if ( (mem_add_size == _I2C_MEMADD_SIZE_8BIT) && (step_check == ((_MEMORY_BURST_READ_STEPS - 1) + read_quantity)) ) /* The steps are complete */
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else if ( (mem_add_size == _I2C_MEMADD_SIZE_16BIT) && (step_check == (_MEMORY_BURST_READ_STEPS + read_quantity)) ) /* The steps are complete */
     514:	d0 31       	cpi	r29, 0x10	; 16
     516:	79 f4       	brne	.+30     	; 0x536 <__stack+0xd7>
		{
			i2c_status = _STAT_OK; /* Set status */
     518:	e6 e0       	ldi	r30, 0x06	; 6
     51a:	ce 0e       	add	r12, r30
     51c:	d1 1c       	adc	r13, r1
     51e:	e1 1c       	adc	r14, r1
     520:	f1 1c       	adc	r15, r1
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	c8 14       	cp	r12, r8
     526:	d9 04       	cpc	r13, r9
     528:	ea 04       	cpc	r14, r10
     52a:	fb 04       	cpc	r15, r11
     52c:	29 f0       	breq	.+10     	; 0x538 <__stack+0xd9>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	03 c0       	rjmp	.+6      	; 0x538 <__stack+0xd9>
		}
		
	}
	else
	{
		i2c_status = _STAT_ERROR; /* Set status */
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	01 c0       	rjmp	.+2      	; 0x538 <__stack+0xd9>
		{
			i2c_status = _STAT_OK; /* Set status */
		}
		else
		{
			i2c_status = _STAT_ERROR; /* Set status */
     536:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return i2c_status;
	
	/* Function End */
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	ff 90       	pop	r15
     542:	ef 90       	pop	r14
     544:	df 90       	pop	r13
     546:	cf 90       	pop	r12
     548:	bf 90       	pop	r11
     54a:	af 90       	pop	r10
     54c:	9f 90       	pop	r9
     54e:	8f 90       	pop	r8
     550:	7f 90       	pop	r7
     552:	6f 90       	pop	r6
     554:	5f 90       	pop	r5
     556:	4f 90       	pop	r4
     558:	3f 90       	pop	r3
     55a:	2f 90       	pop	r2
     55c:	08 95       	ret

0000055e <float_to_byte>:
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, UART_BUFFER_SIZE, format, args);
	va_end(args);
	UART_Transmit_String(buffer);
}
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	00 d0       	rcall	.+0      	; 0x564 <float_to_byte+0x6>
     564:	00 d0       	rcall	.+0      	; 0x566 <float_to_byte+0x8>
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	69 83       	std	Y+1, r22	; 0x01
     56c:	7a 83       	std	Y+2, r23	; 0x02
     56e:	8b 83       	std	Y+3, r24	; 0x03
     570:	9c 83       	std	Y+4, r25	; 0x04
     572:	fe 01       	movw	r30, r28
     574:	31 96       	adiw	r30, 0x01	; 1
     576:	da 01       	movw	r26, r20
     578:	a2 0f       	add	r26, r18
     57a:	b3 1f       	adc	r27, r19
     57c:	9e 01       	movw	r18, r28
     57e:	2b 5f       	subi	r18, 0xFB	; 251
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	81 91       	ld	r24, Z+
     584:	8d 93       	st	X+, r24
     586:	e2 17       	cp	r30, r18
     588:	f3 07       	cpc	r31, r19
     58a:	d9 f7       	brne	.-10     	; 0x582 <float_to_byte+0x24>
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	08 95       	ret

0000059a <kalman_filter>:
     59a:	4f 92       	push	r4
     59c:	5f 92       	push	r5
     59e:	6f 92       	push	r6
     5a0:	7f 92       	push	r7
     5a2:	8f 92       	push	r8
     5a4:	9f 92       	push	r9
     5a6:	af 92       	push	r10
     5a8:	bf 92       	push	r11
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	a0 97       	sbiw	r28, 0x20	; 32
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	6d 87       	std	Y+13, r22	; 0x0d
     5cc:	7e 87       	std	Y+14, r23	; 0x0e
     5ce:	8f 87       	std	Y+15, r24	; 0x0f
     5d0:	98 8b       	std	Y+16, r25	; 0x10
     5d2:	ca 01       	movw	r24, r20
     5d4:	b9 01       	movw	r22, r18
     5d6:	e9 86       	std	Y+9, r14	; 0x09
     5d8:	fa 86       	std	Y+10, r15	; 0x0a
     5da:	0b 87       	std	Y+11, r16	; 0x0b
     5dc:	1c 87       	std	Y+12, r17	; 0x0c
     5de:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <bias.2602>
     5e2:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <bias.2602+0x1>
     5e6:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <bias.2602+0x2>
     5ea:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <bias.2602+0x3>
     5ee:	2d 8b       	std	Y+21, r18	; 0x15
     5f0:	3e 8b       	std	Y+22, r19	; 0x16
     5f2:	4f 8b       	std	Y+23, r20	; 0x17
     5f4:	58 8f       	std	Y+24, r21	; 0x18
     5f6:	25 d6       	rcall	.+3146   	; 0x1242 <__subsf3>
     5f8:	a8 01       	movw	r20, r16
     5fa:	97 01       	movw	r18, r14
     5fc:	33 d8       	rcall	.-3994   	; 0xfffff664 <__eeprom_end+0xff7ef664>
     5fe:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <angle.2601>
     602:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <angle.2601+0x1>
     606:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <angle.2601+0x2>
     60a:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <angle.2601+0x3>
     60e:	1a d6       	rcall	.+3124   	; 0x1244 <__addsf3>
     610:	69 8f       	std	Y+25, r22	; 0x19
     612:	7a 8f       	std	Y+26, r23	; 0x1a
     614:	8b 8f       	std	Y+27, r24	; 0x1b
     616:	9c 8f       	std	Y+28, r25	; 0x1c
     618:	c0 90 9c 00 	lds	r12, 0x009C	; 0x80009c <__data_end+0xc>
     61c:	d0 90 9d 00 	lds	r13, 0x009D	; 0x80009d <__data_end+0xd>
     620:	e0 90 9e 00 	lds	r14, 0x009E	; 0x80009e <__data_end+0xe>
     624:	f0 90 9f 00 	lds	r15, 0x009F	; 0x80009f <__data_end+0xf>
     628:	a7 01       	movw	r20, r14
     62a:	96 01       	movw	r18, r12
     62c:	69 85       	ldd	r22, Y+9	; 0x09
     62e:	7a 85       	ldd	r23, Y+10	; 0x0a
     630:	8b 85       	ldd	r24, Y+11	; 0x0b
     632:	9c 85       	ldd	r25, Y+12	; 0x0c
     634:	17 d8       	rcall	.-4050   	; 0xfffff664 <__eeprom_end+0xff7ef664>
     636:	69 83       	std	Y+1, r22	; 0x01
     638:	7a 83       	std	Y+2, r23	; 0x02
     63a:	8b 83       	std	Y+3, r24	; 0x03
     63c:	9c 83       	std	Y+4, r25	; 0x04
     63e:	40 90 94 00 	lds	r4, 0x0094	; 0x800094 <__data_end+0x4>
     642:	50 90 95 00 	lds	r5, 0x0095	; 0x800095 <__data_end+0x5>
     646:	60 90 96 00 	lds	r6, 0x0096	; 0x800096 <__data_end+0x6>
     64a:	70 90 97 00 	lds	r7, 0x0097	; 0x800097 <__data_end+0x7>
     64e:	80 90 98 00 	lds	r8, 0x0098	; 0x800098 <__data_end+0x8>
     652:	90 90 99 00 	lds	r9, 0x0099	; 0x800099 <__data_end+0x9>
     656:	a0 90 9a 00 	lds	r10, 0x009A	; 0x80009a <__data_end+0xa>
     65a:	b0 90 9b 00 	lds	r11, 0x009B	; 0x80009b <__data_end+0xb>
     65e:	a3 01       	movw	r20, r6
     660:	92 01       	movw	r18, r4
     662:	ef d5       	rcall	.+3038   	; 0x1242 <__subsf3>
     664:	a5 01       	movw	r20, r10
     666:	94 01       	movw	r18, r8
     668:	ec d5       	rcall	.+3032   	; 0x1242 <__subsf3>
     66a:	2a e0       	ldi	r18, 0x0A	; 10
     66c:	37 ed       	ldi	r19, 0xD7	; 215
     66e:	43 e2       	ldi	r20, 0x23	; 35
     670:	5c e3       	ldi	r21, 0x3C	; 60
     672:	e8 d5       	rcall	.+3024   	; 0x1244 <__addsf3>
     674:	29 85       	ldd	r18, Y+9	; 0x09
     676:	3a 85       	ldd	r19, Y+10	; 0x0a
     678:	4b 85       	ldd	r20, Y+11	; 0x0b
     67a:	5c 85       	ldd	r21, Y+12	; 0x0c
     67c:	f3 d7       	rcall	.+4070   	; 0x1664 <__mulsf3>
     67e:	e0 e9       	ldi	r30, 0x90	; 144
     680:	f0 e0       	ldi	r31, 0x00	; 0
     682:	20 81       	ld	r18, Z
     684:	31 81       	ldd	r19, Z+1	; 0x01
     686:	42 81       	ldd	r20, Z+2	; 0x02
     688:	53 81       	ldd	r21, Z+3	; 0x03
     68a:	dc d5       	rcall	.+3000   	; 0x1244 <__addsf3>
     68c:	6d 83       	std	Y+5, r22	; 0x05
     68e:	7e 83       	std	Y+6, r23	; 0x06
     690:	8f 83       	std	Y+7, r24	; 0x07
     692:	98 87       	std	Y+8, r25	; 0x08
     694:	29 81       	ldd	r18, Y+1	; 0x01
     696:	3a 81       	ldd	r19, Y+2	; 0x02
     698:	4b 81       	ldd	r20, Y+3	; 0x03
     69a:	5c 81       	ldd	r21, Y+4	; 0x04
     69c:	c3 01       	movw	r24, r6
     69e:	b2 01       	movw	r22, r4
     6a0:	d0 d5       	rcall	.+2976   	; 0x1242 <__subsf3>
     6a2:	2b 01       	movw	r4, r22
     6a4:	3c 01       	movw	r6, r24
     6a6:	29 81       	ldd	r18, Y+1	; 0x01
     6a8:	3a 81       	ldd	r19, Y+2	; 0x02
     6aa:	4b 81       	ldd	r20, Y+3	; 0x03
     6ac:	5c 81       	ldd	r21, Y+4	; 0x04
     6ae:	c5 01       	movw	r24, r10
     6b0:	b4 01       	movw	r22, r8
     6b2:	c7 d5       	rcall	.+2958   	; 0x1242 <__subsf3>
     6b4:	6d 8f       	std	Y+29, r22	; 0x1d
     6b6:	7e 8f       	std	Y+30, r23	; 0x1e
     6b8:	8f 8f       	std	Y+31, r24	; 0x1f
     6ba:	98 a3       	std	Y+32, r25	; 0x20
     6bc:	2d ec       	ldi	r18, 0xCD	; 205
     6be:	3c ec       	ldi	r19, 0xCC	; 204
     6c0:	4c ec       	ldi	r20, 0xCC	; 204
     6c2:	5d e3       	ldi	r21, 0x3D	; 61
     6c4:	6d 81       	ldd	r22, Y+5	; 0x05
     6c6:	7e 81       	ldd	r23, Y+6	; 0x06
     6c8:	8f 81       	ldd	r24, Y+7	; 0x07
     6ca:	98 85       	ldd	r25, Y+8	; 0x08
     6cc:	bb d5       	rcall	.+2934   	; 0x1244 <__addsf3>
     6ce:	4b 01       	movw	r8, r22
     6d0:	5c 01       	movw	r10, r24
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	6d 81       	ldd	r22, Y+5	; 0x05
     6d8:	7e 81       	ldd	r23, Y+6	; 0x06
     6da:	8f 81       	ldd	r24, Y+7	; 0x07
     6dc:	98 85       	ldd	r25, Y+8	; 0x08
     6de:	7c d6       	rcall	.+3320   	; 0x13d8 <__divsf3>
     6e0:	69 83       	std	Y+1, r22	; 0x01
     6e2:	7a 83       	std	Y+2, r23	; 0x02
     6e4:	8b 83       	std	Y+3, r24	; 0x03
     6e6:	9c 83       	std	Y+4, r25	; 0x04
     6e8:	a5 01       	movw	r20, r10
     6ea:	94 01       	movw	r18, r8
     6ec:	6d 8d       	ldd	r22, Y+29	; 0x1d
     6ee:	7e 8d       	ldd	r23, Y+30	; 0x1e
     6f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     6f2:	98 a1       	ldd	r25, Y+32	; 0x20
     6f4:	71 d6       	rcall	.+3298   	; 0x13d8 <__divsf3>
     6f6:	69 8b       	std	Y+17, r22	; 0x11
     6f8:	7a 8b       	std	Y+18, r23	; 0x12
     6fa:	8b 8b       	std	Y+19, r24	; 0x13
     6fc:	9c 8b       	std	Y+20, r25	; 0x14
     6fe:	29 8d       	ldd	r18, Y+25	; 0x19
     700:	3a 8d       	ldd	r19, Y+26	; 0x1a
     702:	4b 8d       	ldd	r20, Y+27	; 0x1b
     704:	5c 8d       	ldd	r21, Y+28	; 0x1c
     706:	6d 85       	ldd	r22, Y+13	; 0x0d
     708:	7e 85       	ldd	r23, Y+14	; 0x0e
     70a:	8f 85       	ldd	r24, Y+15	; 0x0f
     70c:	98 89       	ldd	r25, Y+16	; 0x10
     70e:	99 d5       	rcall	.+2866   	; 0x1242 <__subsf3>
     710:	6d 87       	std	Y+13, r22	; 0x0d
     712:	7e 87       	std	Y+14, r23	; 0x0e
     714:	8f 87       	std	Y+15, r24	; 0x0f
     716:	98 8b       	std	Y+16, r25	; 0x10
     718:	9b 01       	movw	r18, r22
     71a:	ac 01       	movw	r20, r24
     71c:	69 81       	ldd	r22, Y+1	; 0x01
     71e:	7a 81       	ldd	r23, Y+2	; 0x02
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	9c 81       	ldd	r25, Y+4	; 0x04
     724:	9f d7       	rcall	.+3902   	; 0x1664 <__mulsf3>
     726:	29 8d       	ldd	r18, Y+25	; 0x19
     728:	3a 8d       	ldd	r19, Y+26	; 0x1a
     72a:	4b 8d       	ldd	r20, Y+27	; 0x1b
     72c:	5c 8d       	ldd	r21, Y+28	; 0x1c
     72e:	8a d5       	rcall	.+2836   	; 0x1244 <__addsf3>
     730:	4b 01       	movw	r8, r22
     732:	5c 01       	movw	r10, r24
     734:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <angle.2601>
     738:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <angle.2601+0x1>
     73c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <angle.2601+0x2>
     740:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <angle.2601+0x3>
     744:	2d 85       	ldd	r18, Y+13	; 0x0d
     746:	3e 85       	ldd	r19, Y+14	; 0x0e
     748:	4f 85       	ldd	r20, Y+15	; 0x0f
     74a:	58 89       	ldd	r21, Y+16	; 0x10
     74c:	69 89       	ldd	r22, Y+17	; 0x11
     74e:	7a 89       	ldd	r23, Y+18	; 0x12
     750:	8b 89       	ldd	r24, Y+19	; 0x13
     752:	9c 89       	ldd	r25, Y+20	; 0x14
     754:	87 d7       	rcall	.+3854   	; 0x1664 <__mulsf3>
     756:	2d 89       	ldd	r18, Y+21	; 0x15
     758:	3e 89       	ldd	r19, Y+22	; 0x16
     75a:	4f 89       	ldd	r20, Y+23	; 0x17
     75c:	58 8d       	ldd	r21, Y+24	; 0x18
     75e:	72 d5       	rcall	.+2788   	; 0x1244 <__addsf3>
     760:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <bias.2602>
     764:	70 93 a5 00 	sts	0x00A5, r23	; 0x8000a5 <bias.2602+0x1>
     768:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <bias.2602+0x2>
     76c:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <bias.2602+0x3>
     770:	29 81       	ldd	r18, Y+1	; 0x01
     772:	3a 81       	ldd	r19, Y+2	; 0x02
     774:	4b 81       	ldd	r20, Y+3	; 0x03
     776:	5c 81       	ldd	r21, Y+4	; 0x04
     778:	6d 81       	ldd	r22, Y+5	; 0x05
     77a:	7e 81       	ldd	r23, Y+6	; 0x06
     77c:	8f 81       	ldd	r24, Y+7	; 0x07
     77e:	98 85       	ldd	r25, Y+8	; 0x08
     780:	71 d7       	rcall	.+3810   	; 0x1664 <__mulsf3>
     782:	9b 01       	movw	r18, r22
     784:	ac 01       	movw	r20, r24
     786:	6d 81       	ldd	r22, Y+5	; 0x05
     788:	7e 81       	ldd	r23, Y+6	; 0x06
     78a:	8f 81       	ldd	r24, Y+7	; 0x07
     78c:	98 85       	ldd	r25, Y+8	; 0x08
     78e:	59 d5       	rcall	.+2738   	; 0x1242 <__subsf3>
     790:	e0 e9       	ldi	r30, 0x90	; 144
     792:	f0 e0       	ldi	r31, 0x00	; 0
     794:	60 83       	st	Z, r22
     796:	71 83       	std	Z+1, r23	; 0x01
     798:	82 83       	std	Z+2, r24	; 0x02
     79a:	93 83       	std	Z+3, r25	; 0x03
     79c:	29 81       	ldd	r18, Y+1	; 0x01
     79e:	3a 81       	ldd	r19, Y+2	; 0x02
     7a0:	4b 81       	ldd	r20, Y+3	; 0x03
     7a2:	5c 81       	ldd	r21, Y+4	; 0x04
     7a4:	c3 01       	movw	r24, r6
     7a6:	b2 01       	movw	r22, r4
     7a8:	5d d7       	rcall	.+3770   	; 0x1664 <__mulsf3>
     7aa:	9b 01       	movw	r18, r22
     7ac:	ac 01       	movw	r20, r24
     7ae:	c3 01       	movw	r24, r6
     7b0:	b2 01       	movw	r22, r4
     7b2:	47 d5       	rcall	.+2702   	; 0x1242 <__subsf3>
     7b4:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <__data_end+0x4>
     7b8:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <__data_end+0x5>
     7bc:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end+0x6>
     7c0:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x7>
     7c4:	29 89       	ldd	r18, Y+17	; 0x11
     7c6:	3a 89       	ldd	r19, Y+18	; 0x12
     7c8:	4b 89       	ldd	r20, Y+19	; 0x13
     7ca:	5c 89       	ldd	r21, Y+20	; 0x14
     7cc:	6d 81       	ldd	r22, Y+5	; 0x05
     7ce:	7e 81       	ldd	r23, Y+6	; 0x06
     7d0:	8f 81       	ldd	r24, Y+7	; 0x07
     7d2:	98 85       	ldd	r25, Y+8	; 0x08
     7d4:	47 d7       	rcall	.+3726   	; 0x1664 <__mulsf3>
     7d6:	9b 01       	movw	r18, r22
     7d8:	ac 01       	movw	r20, r24
     7da:	6d 8d       	ldd	r22, Y+29	; 0x1d
     7dc:	7e 8d       	ldd	r23, Y+30	; 0x1e
     7de:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7e0:	98 a1       	ldd	r25, Y+32	; 0x20
     7e2:	2f d5       	rcall	.+2654   	; 0x1242 <__subsf3>
     7e4:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__data_end+0x8>
     7e8:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__data_end+0x9>
     7ec:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__data_end+0xa>
     7f0:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__data_end+0xb>
     7f4:	2d ec       	ldi	r18, 0xCD	; 205
     7f6:	3c ec       	ldi	r19, 0xCC	; 204
     7f8:	4c e4       	ldi	r20, 0x4C	; 76
     7fa:	5d e3       	ldi	r21, 0x3D	; 61
     7fc:	69 85       	ldd	r22, Y+9	; 0x09
     7fe:	7a 85       	ldd	r23, Y+10	; 0x0a
     800:	8b 85       	ldd	r24, Y+11	; 0x0b
     802:	9c 85       	ldd	r25, Y+12	; 0x0c
     804:	2f d7       	rcall	.+3678   	; 0x1664 <__mulsf3>
     806:	a7 01       	movw	r20, r14
     808:	96 01       	movw	r18, r12
     80a:	1c d5       	rcall	.+2616   	; 0x1244 <__addsf3>
     80c:	6b 01       	movw	r12, r22
     80e:	7c 01       	movw	r14, r24
     810:	29 89       	ldd	r18, Y+17	; 0x11
     812:	3a 89       	ldd	r19, Y+18	; 0x12
     814:	4b 89       	ldd	r20, Y+19	; 0x13
     816:	5c 89       	ldd	r21, Y+20	; 0x14
     818:	c3 01       	movw	r24, r6
     81a:	b2 01       	movw	r22, r4
     81c:	23 d7       	rcall	.+3654   	; 0x1664 <__mulsf3>
     81e:	9b 01       	movw	r18, r22
     820:	ac 01       	movw	r20, r24
     822:	c7 01       	movw	r24, r14
     824:	b6 01       	movw	r22, r12
     826:	0d d5       	rcall	.+2586   	; 0x1242 <__subsf3>
     828:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__data_end+0xc>
     82c:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__data_end+0xd>
     830:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <__data_end+0xe>
     834:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <__data_end+0xf>
     838:	c5 01       	movw	r24, r10
     83a:	b4 01       	movw	r22, r8
     83c:	a0 96       	adiw	r28, 0x20	; 32
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	df 90       	pop	r13
     856:	cf 90       	pop	r12
     858:	bf 90       	pop	r11
     85a:	af 90       	pop	r10
     85c:	9f 90       	pop	r9
     85e:	8f 90       	pop	r8
     860:	7f 90       	pop	r7
     862:	6f 90       	pop	r6
     864:	5f 90       	pop	r5
     866:	4f 90       	pop	r4
     868:	08 95       	ret

0000086a <crc>:
     86a:	66 23       	and	r22, r22
     86c:	b9 f0       	breq	.+46     	; 0x89c <crc+0x32>
     86e:	fc 01       	movw	r30, r24
     870:	61 50       	subi	r22, 0x01	; 1
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	6f 5f       	subi	r22, 0xFF	; 255
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	68 0f       	add	r22, r24
     87a:	79 1f       	adc	r23, r25
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	4c e8       	ldi	r20, 0x8C	; 140
     880:	21 91       	ld	r18, Z+
     882:	98 e0       	ldi	r25, 0x08	; 8
     884:	32 2f       	mov	r19, r18
     886:	38 27       	eor	r19, r24
     888:	86 95       	lsr	r24
     88a:	26 95       	lsr	r18
     88c:	30 fd       	sbrc	r19, 0
     88e:	84 27       	eor	r24, r20
     890:	91 50       	subi	r25, 0x01	; 1
     892:	c1 f7       	brne	.-16     	; 0x884 <crc+0x1a>
     894:	e6 17       	cp	r30, r22
     896:	f7 07       	cpc	r31, r23
     898:	99 f7       	brne	.-26     	; 0x880 <crc+0x16>
     89a:	08 95       	ret
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	08 95       	ret

000008a0 <UART_data_procesing>:
     8a0:	90 91 f8 00 	lds	r25, 0x00F8	; 0x8000f8 <rx_buffer>
     8a4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8a8:	98 13       	cpse	r25, r24
     8aa:	6d c0       	rjmp	.+218    	; 0x986 <UART_data_procesing+0xe6>
     8ac:	66 e0       	ldi	r22, 0x06	; 6
     8ae:	88 ef       	ldi	r24, 0xF8	; 248
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	db df       	rcall	.-74     	; 0x86a <crc>
     8b4:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <rx_buffer+0x6>
     8b8:	89 13       	cpse	r24, r25
     8ba:	65 c0       	rjmp	.+202    	; 0x986 <UART_data_procesing+0xe6>
     8bc:	e8 ef       	ldi	r30, 0xF8	; 248
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	82 81       	ldd	r24, Z+2	; 0x02
     8c2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <Angle_Type>
     8c6:	83 81       	ldd	r24, Z+3	; 0x03
     8c8:	8f 36       	cpi	r24, 0x6F	; 111
     8ca:	89 f4       	brne	.+34     	; 0x8ee <UART_data_procesing+0x4e>
     8cc:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Address_Change_Counter>
     8d0:	8a 30       	cpi	r24, 0x0A	; 10
     8d2:	30 f4       	brcc	.+12     	; 0x8e0 <UART_data_procesing+0x40>
     8d4:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Address_Change_Counter>
     8d8:	8f 5f       	subi	r24, 0xFF	; 255
     8da:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <Address_Change_Counter>
     8de:	09 c0       	rjmp	.+18     	; 0x8f2 <UART_data_procesing+0x52>
     8e0:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <rx_buffer+0x4>
     8e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     8e8:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <Address_Change_Counter>
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <UART_data_procesing+0x52>
     8ee:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <Address_Change_Counter>
     8f2:	87 e0       	ldi	r24, 0x07	; 7
     8f4:	e8 ef       	ldi	r30, 0xF8	; 248
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	df 01       	movw	r26, r30
     8fa:	98 2f       	mov	r25, r24
     8fc:	1d 92       	st	X+, r1
     8fe:	9a 95       	dec	r25
     900:	e9 f7       	brne	.-6      	; 0x8fc <UART_data_procesing+0x5c>
     902:	ef ef       	ldi	r30, 0xFF	; 255
     904:	f0 e0       	ldi	r31, 0x00	; 0
     906:	df 01       	movw	r26, r30
     908:	1d 92       	st	X+, r1
     90a:	8a 95       	dec	r24
     90c:	e9 f7       	brne	.-6      	; 0x908 <UART_data_procesing+0x68>
     90e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     912:	80 83       	st	Z, r24
     914:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Angle_Type>
     918:	8a 3f       	cpi	r24, 0xFA	; 250
     91a:	21 f0       	breq	.+8      	; 0x924 <UART_data_procesing+0x84>
     91c:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Angle_Type>
     920:	8a 3a       	cpi	r24, 0xAA	; 170
     922:	89 f4       	brne	.+34     	; 0x946 <UART_data_procesing+0xa6>
     924:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <Y_angle>
     928:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <Y_angle+0x1>
     92c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Y_angle+0x2>
     930:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <Y_angle+0x3>
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	10 de       	rcall	.-992    	; 0x55e <float_to_byte>
     93e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     942:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <tx_buffer+0x5>
     946:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Angle_Type>
     94a:	8d 3b       	cpi	r24, 0xBD	; 189
     94c:	b1 f4       	brne	.+44     	; 0x97a <UART_data_procesing+0xda>
     94e:	80 91 ae 00 	lds	r24, 0x00AE	; 0x8000ae <MAX_Accel_Value_X>
     952:	90 91 af 00 	lds	r25, 0x00AF	; 0x8000af <MAX_Accel_Value_X+0x1>
     956:	ef ef       	ldi	r30, 0xFF	; 255
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	91 83       	std	Z+1, r25	; 0x01
     95c:	82 83       	std	Z+2, r24	; 0x02
     95e:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <MAX_Accel_Value_Z>
     962:	90 91 ad 00 	lds	r25, 0x00AD	; 0x8000ad <MAX_Accel_Value_Z+0x1>
     966:	93 83       	std	Z+3, r25	; 0x03
     968:	84 83       	std	Z+4, r24	; 0x04
     96a:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <MAX_Accel_Value_X+0x1>
     96e:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <MAX_Accel_Value_X>
     972:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <MAX_Accel_Value_Z+0x1>
     976:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <MAX_Accel_Value_Z>
     97a:	66 e0       	ldi	r22, 0x06	; 6
     97c:	8f ef       	ldi	r24, 0xFF	; 255
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	74 df       	rcall	.-280    	; 0x86a <crc>
     982:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tx_buffer+0x6>
     986:	08 95       	ret

00000988 <__vector_3>:
     988:	1f 92       	push	r1
     98a:	0f 92       	push	r0
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	0f 92       	push	r0
     990:	11 24       	eor	r1, r1
     992:	2f 93       	push	r18
     994:	3f 93       	push	r19
     996:	4f 93       	push	r20
     998:	5f 93       	push	r21
     99a:	6f 93       	push	r22
     99c:	7f 93       	push	r23
     99e:	8f 93       	push	r24
     9a0:	9f 93       	push	r25
     9a2:	af 93       	push	r26
     9a4:	bf 93       	push	r27
     9a6:	ef 93       	push	r30
     9a8:	ff 93       	push	r31
     9aa:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <UART_RX_Complete_FLAG>
     9ae:	88 23       	and	r24, r24
     9b0:	39 f0       	breq	.+14     	; 0x9c0 <__vector_3+0x38>
     9b2:	76 df       	rcall	.-276    	; 0x8a0 <UART_data_procesing>
     9b4:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <UART_RX_Complete_FLAG>
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <UART_TX_Pre_Counter>
     9be:	0e c0       	rjmp	.+28     	; 0x9dc <__vector_3+0x54>
     9c0:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <UART_TX_Pre_Counter>
     9c4:	88 23       	and	r24, r24
     9c6:	51 f0       	breq	.+20     	; 0x9dc <__vector_3+0x54>
     9c8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <UART_TX_Pre_Counter>
     9cc:	92 9a       	sbi	0x12, 2	; 18
     9ce:	50 9a       	sbi	0x0a, 0	; 10
     9d0:	86 e0       	ldi	r24, 0x06	; 6
     9d2:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <tx_counter>
     9d6:	80 91 ff 00 	lds	r24, 0x00FF	; 0x8000ff <tx_buffer>
     9da:	8c b9       	out	0x0c, r24	; 12
     9dc:	ff 91       	pop	r31
     9de:	ef 91       	pop	r30
     9e0:	bf 91       	pop	r27
     9e2:	af 91       	pop	r26
     9e4:	9f 91       	pop	r25
     9e6:	8f 91       	pop	r24
     9e8:	7f 91       	pop	r23
     9ea:	6f 91       	pop	r22
     9ec:	5f 91       	pop	r21
     9ee:	4f 91       	pop	r20
     9f0:	3f 91       	pop	r19
     9f2:	2f 91       	pop	r18
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	0f 90       	pop	r0
     9fa:	1f 90       	pop	r1
     9fc:	18 95       	reti

000009fe <__vector_11>:
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	8f 93       	push	r24
     a0a:	9f 93       	push	r25
     a0c:	ef 93       	push	r30
     a0e:	ff 93       	push	r31
     a10:	51 9b       	sbis	0x0a, 1	; 10
     a12:	07 c0       	rjmp	.+14     	; 0xa22 <__vector_11+0x24>
     a14:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <rx_counter>
     a18:	8c b1       	in	r24, 0x0c	; 12
     a1a:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <rx_buffer>
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	0a c0       	rjmp	.+20     	; 0xa36 <__vector_11+0x38>
     a22:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <rx_counter>
     a26:	e8 2f       	mov	r30, r24
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	9c b1       	in	r25, 0x0c	; 12
     a2c:	e8 50       	subi	r30, 0x08	; 8
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	90 83       	st	Z, r25
     a32:	86 30       	cpi	r24, 0x06	; 6
     a34:	20 f4       	brcc	.+8      	; 0xa3e <__vector_11+0x40>
     a36:	8f 5f       	subi	r24, 0xFF	; 255
     a38:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <rx_counter>
     a3c:	03 c0       	rjmp	.+6      	; 0xa44 <__vector_11+0x46>
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <UART_RX_Complete_FLAG>
     a44:	ff 91       	pop	r31
     a46:	ef 91       	pop	r30
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <__vector_13>:
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	8f 93       	push	r24
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
     a66:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <tx_counter>
     a6a:	88 23       	and	r24, r24
     a6c:	79 f0       	breq	.+30     	; 0xa8c <__vector_13+0x36>
     a6e:	81 50       	subi	r24, 0x01	; 1
     a70:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <tx_counter>
     a74:	50 98       	cbi	0x0a, 0	; 10
     a76:	80 91 f7 00 	lds	r24, 0x00F7	; 0x8000f7 <tx_counter>
     a7a:	e6 e0       	ldi	r30, 0x06	; 6
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	e8 1b       	sub	r30, r24
     a80:	f1 09       	sbc	r31, r1
     a82:	e1 50       	subi	r30, 0x01	; 1
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	8c b9       	out	0x0c, r24	; 12
     a8a:	01 c0       	rjmp	.+2      	; 0xa8e <__vector_13+0x38>
     a8c:	92 98       	cbi	0x12, 2	; 18
     a8e:	ff 91       	pop	r31
     a90:	ef 91       	pop	r30
     a92:	8f 91       	pop	r24
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0
     a9a:	1f 90       	pop	r1
     a9c:	18 95       	reti

00000a9e <Timer_2_Init>:
     a9e:	85 b5       	in	r24, 0x25	; 37
     aa0:	8c 60       	ori	r24, 0x0C	; 12
     aa2:	85 bd       	out	0x25, r24	; 37
     aa4:	89 b7       	in	r24, 0x39	; 57
     aa6:	80 68       	ori	r24, 0x80	; 128
     aa8:	89 bf       	out	0x39, r24	; 57
     aaa:	86 ee       	ldi	r24, 0xE6	; 230
     aac:	83 bd       	out	0x23, r24	; 35
     aae:	08 95       	ret

00000ab0 <UART_Init>:
     ab0:	90 bd       	out	0x20, r25	; 32
     ab2:	89 b9       	out	0x09, r24	; 9
     ab4:	8a b1       	in	r24, 0x0a	; 10
     ab6:	88 61       	ori	r24, 0x18	; 24
     ab8:	8a b9       	out	0x0a, r24	; 10
     aba:	80 b5       	in	r24, 0x20	; 32
     abc:	86 68       	ori	r24, 0x86	; 134
     abe:	80 bd       	out	0x20, r24	; 32
     ac0:	08 95       	ret

00000ac2 <UART_Transmit>:
     ac2:	5d 9b       	sbis	0x0b, 5	; 11
     ac4:	fe cf       	rjmp	.-4      	; 0xac2 <UART_Transmit>
     ac6:	8c b9       	out	0x0c, r24	; 12
     ac8:	08 95       	ret

00000aca <UART_Transmit_String>:
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	ec 01       	movw	r28, r24
     ad0:	88 81       	ld	r24, Y
     ad2:	88 23       	and	r24, r24
     ad4:	29 f0       	breq	.+10     	; 0xae0 <UART_Transmit_String+0x16>
     ad6:	21 96       	adiw	r28, 0x01	; 1
     ad8:	f4 df       	rcall	.-24     	; 0xac2 <UART_Transmit>
     ada:	89 91       	ld	r24, Y+
     adc:	81 11       	cpse	r24, r1
     ade:	fc cf       	rjmp	.-8      	; 0xad8 <UART_Transmit_String+0xe>
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <UART_PrintLn>:

void UART_PrintLn(const char *format, ...) {
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
     af2:	c0 58       	subi	r28, 0x80	; 128
     af4:	d1 09       	sbc	r29, r1
     af6:	0f b6       	in	r0, 0x3f	; 63
     af8:	f8 94       	cli
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	0f be       	out	0x3f, r0	; 63
     afe:	cd bf       	out	0x3d, r28	; 61
     b00:	9e 01       	movw	r18, r28
     b02:	29 57       	subi	r18, 0x79	; 121
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	f9 01       	movw	r30, r18
     b08:	41 91       	ld	r20, Z+
     b0a:	51 91       	ld	r21, Z+
     b0c:	9f 01       	movw	r18, r30
	char buffer[UART_BUFFER_SIZE];
	va_list args;
	va_start(args, format);
	vsnprintf(buffer, UART_BUFFER_SIZE, format, args);
     b0e:	60 e8       	ldi	r22, 0x80	; 128
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	8e 01       	movw	r16, r28
     b14:	0f 5f       	subi	r16, 0xFF	; 255
     b16:	1f 4f       	sbci	r17, 0xFF	; 255
     b18:	c8 01       	movw	r24, r16
     b1a:	0a d6       	rcall	.+3092   	; 0x1730 <vsnprintf>
	va_end(args);
	strcat(buffer, "\r\n");
     b1c:	f8 01       	movw	r30, r16
     b1e:	01 90       	ld	r0, Z+
     b20:	00 20       	and	r0, r0
     b22:	e9 f7       	brne	.-6      	; 0xb1e <UART_PrintLn+0x38>
     b24:	31 97       	sbiw	r30, 0x01	; 1
     b26:	8d e0       	ldi	r24, 0x0D	; 13
     b28:	9a e0       	ldi	r25, 0x0A	; 10
     b2a:	91 83       	std	Z+1, r25	; 0x01
     b2c:	80 83       	st	Z, r24
     b2e:	12 82       	std	Z+2, r1	; 0x02
	UART_Transmit_String(buffer);
     b30:	c8 01       	movw	r24, r16
     b32:	cb df       	rcall	.-106    	; 0xaca <UART_Transmit_String>
}
     b34:	c0 58       	subi	r28, 0x80	; 128
     b36:	df 4f       	sbci	r29, 0xFF	; 255
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	1f 91       	pop	r17
     b48:	0f 91       	pop	r16
     b4a:	08 95       	ret

00000b4c <arduino_ploter>:
	return angle;
}

void arduino_ploter(void)
{
	TX_ON;
     b4c:	92 9a       	sbi	0x12, 2	; 18
	LED = !LED;
     b4e:	82 b3       	in	r24, 0x12	; 18
     b50:	83 fb       	bst	r24, 3
     b52:	99 27       	eor	r25, r25
     b54:	90 f9       	bld	r25, 0
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	89 27       	eor	r24, r25
     b5a:	80 fd       	sbrc	r24, 0
     b5c:	93 9a       	sbi	0x12, 3	; 18
     b5e:	80 ff       	sbrs	r24, 0
     b60:	93 98       	cbi	0x12, 3	; 18
	//Xgyro_int = (int)Gyro_Data_arr [0];
	
	//====!!!!!!!!!!!====cod to display in arduino ide monitor=====!!!!!!!!!=======
	UART_Transmit_String("Xa:,Ya:,Za:,Xgy:,Ygy:,Zgy:\r\n");
     b62:	81 e6       	ldi	r24, 0x61	; 97
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	b1 df       	rcall	.-158    	; 0xaca <UART_Transmit_String>

	UART_PrintLn("%d,%d,%d,%d,%d,%d", All_Axis_ROW.Xaccel_raw, All_Axis_ROW.Yaccel_raw, All_Axis_ROW.Zaccel_raw, All_Axis_ROW.Xgyro_raw, All_Axis_ROW.Ygyro_raw, All_Axis_ROW.Zgyro_raw);
     b68:	ec ec       	ldi	r30, 0xCC	; 204
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	83 85       	ldd	r24, Z+11	; 0x0b
     b6e:	8f 93       	push	r24
     b70:	82 85       	ldd	r24, Z+10	; 0x0a
     b72:	8f 93       	push	r24
     b74:	81 85       	ldd	r24, Z+9	; 0x09
     b76:	8f 93       	push	r24
     b78:	80 85       	ldd	r24, Z+8	; 0x08
     b7a:	8f 93       	push	r24
     b7c:	87 81       	ldd	r24, Z+7	; 0x07
     b7e:	8f 93       	push	r24
     b80:	86 81       	ldd	r24, Z+6	; 0x06
     b82:	8f 93       	push	r24
     b84:	85 81       	ldd	r24, Z+5	; 0x05
     b86:	8f 93       	push	r24
     b88:	84 81       	ldd	r24, Z+4	; 0x04
     b8a:	8f 93       	push	r24
     b8c:	83 81       	ldd	r24, Z+3	; 0x03
     b8e:	8f 93       	push	r24
     b90:	82 81       	ldd	r24, Z+2	; 0x02
     b92:	8f 93       	push	r24
     b94:	81 81       	ldd	r24, Z+1	; 0x01
     b96:	8f 93       	push	r24
     b98:	80 81       	ld	r24, Z
     b9a:	8f 93       	push	r24
     b9c:	8e e7       	ldi	r24, 0x7E	; 126
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	9f 93       	push	r25
     ba2:	8f 93       	push	r24
     ba4:	a0 df       	rcall	.-192    	; 0xae6 <UART_PrintLn>
	//UART_PrintLn("%d,%d,%d", Xaccel_int, Yaccel_int, Zaccel_int); //%.2f
}
     ba6:	8d b7       	in	r24, 0x3d	; 61
     ba8:	9e b7       	in	r25, 0x3e	; 62
     baa:	0e 96       	adiw	r24, 0x0e	; 14
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	9e bf       	out	0x3e, r25	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	8d bf       	out	0x3d, r24	; 61
     bb6:	08 95       	ret

00000bb8 <main>:
	return value;
}

int main(void)
{
	sei();
     bb8:	78 94       	sei
	//wdt_enable(WDTO_1S);
	_LCD_PORT_DIR = _ALL_OUTPUT;
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	84 bb       	out	0x14, r24	; 20
	_I2C_PORT_DIR = ( 1 << _SDA ) | _SCL;
     bbe:	83 e0       	ldi	r24, 0x03	; 3
     bc0:	84 bb       	out	0x14, r24	; 20
	
	/* MPU6050 Init */
	MPU6050_AutoInit(100);
     bc2:	84 e6       	ldi	r24, 0x64	; 100
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	3a d2       	rcall	.+1140   	; 0x103c <MPU6050_AutoInit>
	Timer_2_Init();
     bc8:	6a df       	rcall	.-300    	; 0xa9e <Timer_2_Init>
	UART_Init(UBRR_SPEED);
     bca:	8f e2       	ldi	r24, 0x2F	; 47
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	70 df       	rcall	.-288    	; 0xab0 <UART_Init>
	RX_TX_DIRECTION = 1;
     bd0:	8a 9a       	sbi	0x11, 2	; 17
	LED_OUT = 1;
     bd2:	8b 9a       	sbi	0x11, 3	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bd4:	2f ef       	ldi	r18, 0xFF	; 255
     bd6:	8f e7       	ldi	r24, 0x7F	; 127
     bd8:	94 e0       	ldi	r25, 0x04	; 4
     bda:	21 50       	subi	r18, 0x01	; 1
     bdc:	80 40       	sbci	r24, 0x00	; 0
     bde:	90 40       	sbci	r25, 0x00	; 0
     be0:	e1 f7       	brne	.-8      	; 0xbda <main+0x22>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <main+0x2c>
     be4:	00 00       	nop
		MPU6050_GetRawAccel(&All_Axis_ROW.Xaccel_raw, 20);
		MPU6050_GetRawGyro(&All_Axis_ROW.Xgyro_raw, 20);
		//wdt_reset();
// 		MPU6050_GetAccelAngleX(&x_accel, 100);
// 		MPU6050_GetGyroX(&x_gyro, 100);
		All_Axis.x_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Yaccel_raw , -All_Axis_ROW.Zaccel_raw ) + _MATH_PI ) );
     be6:	0f 2e       	mov	r0, r31
     be8:	f4 eb       	ldi	r31, 0xB4	; 180
     bea:	2f 2e       	mov	r2, r31
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	3f 2e       	mov	r3, r31
     bf0:	f0 2d       	mov	r31, r0

// 		MPU6050_GetRawAccelX(&All_Axis_ROW.Xaccel_raw, 100);...Y,Z
// 		MPU6050_GetRawGyroX(&All_Axis_ROW.Xgyro_raw, 100);...

		
		MPU6050_GetRawAccel(&All_Axis_ROW.Xaccel_raw, 20);
     bf2:	64 e1       	ldi	r22, 0x14	; 20
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	8c ec       	ldi	r24, 0xCC	; 204
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	bd d2       	rcall	.+1402   	; 0x1176 <MPU6050_GetRawAccel>
		MPU6050_GetRawGyro(&All_Axis_ROW.Xgyro_raw, 20);
     bfc:	64 e1       	ldi	r22, 0x14	; 20
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	82 ed       	ldi	r24, 0xD2	; 210
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	eb d2       	rcall	.+1494   	; 0x11dc <MPU6050_GetRawGyro>
		//wdt_reset();
// 		MPU6050_GetAccelAngleX(&x_accel, 100);
// 		MPU6050_GetGyroX(&x_gyro, 100);
		All_Axis.x_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Yaccel_raw , -All_Axis_ROW.Zaccel_raw ) + _MATH_PI ) );
     c06:	cc ec       	ldi	r28, 0xCC	; 204
     c08:	d0 e0       	ldi	r29, 0x00	; 0
     c0a:	6c 81       	ldd	r22, Y+4	; 0x04
     c0c:	7d 81       	ldd	r23, Y+5	; 0x05
     c0e:	71 95       	neg	r23
     c10:	61 95       	neg	r22
     c12:	71 09       	sbc	r23, r1
     c14:	07 2e       	mov	r0, r23
     c16:	00 0c       	add	r0, r0
     c18:	88 0b       	sbc	r24, r24
     c1a:	99 0b       	sbc	r25, r25
     c1c:	47 d4       	rcall	.+2190   	; 0x14ac <__floatsisf>
     c1e:	4b 01       	movw	r8, r22
     c20:	5c 01       	movw	r10, r24
     c22:	6a 81       	ldd	r22, Y+2	; 0x02
     c24:	7b 81       	ldd	r23, Y+3	; 0x03
     c26:	71 95       	neg	r23
     c28:	61 95       	neg	r22
     c2a:	71 09       	sbc	r23, r1
     c2c:	07 2e       	mov	r0, r23
     c2e:	00 0c       	add	r0, r0
     c30:	88 0b       	sbc	r24, r24
     c32:	99 0b       	sbc	r25, r25
     c34:	3b d4       	rcall	.+2166   	; 0x14ac <__floatsisf>
     c36:	6b 01       	movw	r12, r22
     c38:	7c 01       	movw	r14, r24
     c3a:	a5 01       	movw	r20, r10
     c3c:	94 01       	movw	r18, r8
     c3e:	75 d3       	rcall	.+1770   	; 0x132a <atan2>
     c40:	2b ed       	ldi	r18, 0xDB	; 219
     c42:	3f e0       	ldi	r19, 0x0F	; 15
     c44:	49 e4       	ldi	r20, 0x49	; 73
     c46:	50 e4       	ldi	r21, 0x40	; 64
     c48:	fd d2       	rcall	.+1530   	; 0x1244 <__addsf3>
     c4a:	21 ee       	ldi	r18, 0xE1	; 225
     c4c:	3e e2       	ldi	r19, 0x2E	; 46
     c4e:	45 e6       	ldi	r20, 0x65	; 101
     c50:	52 e4       	ldi	r21, 0x42	; 66
     c52:	08 d5       	rcall	.+2576   	; 0x1664 <__mulsf3>
     c54:	f1 01       	movw	r30, r2
     c56:	64 83       	std	Z+4, r22	; 0x04
     c58:	75 83       	std	Z+5, r23	; 0x05
     c5a:	86 83       	std	Z+6, r24	; 0x06
     c5c:	97 83       	std	Z+7, r25	; 0x07
		All_Axis.y_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Xaccel_raw , -All_Axis_ROW.Zaccel_raw ) + _MATH_PI ) );
     c5e:	68 81       	ld	r22, Y
     c60:	79 81       	ldd	r23, Y+1	; 0x01
     c62:	71 95       	neg	r23
     c64:	61 95       	neg	r22
     c66:	71 09       	sbc	r23, r1
     c68:	07 2e       	mov	r0, r23
     c6a:	00 0c       	add	r0, r0
     c6c:	88 0b       	sbc	r24, r24
     c6e:	99 0b       	sbc	r25, r25
     c70:	1d d4       	rcall	.+2106   	; 0x14ac <__floatsisf>
     c72:	2b 01       	movw	r4, r22
     c74:	3c 01       	movw	r6, r24
     c76:	a5 01       	movw	r20, r10
     c78:	94 01       	movw	r18, r8
     c7a:	57 d3       	rcall	.+1710   	; 0x132a <atan2>
     c7c:	2b ed       	ldi	r18, 0xDB	; 219
     c7e:	3f e0       	ldi	r19, 0x0F	; 15
     c80:	49 e4       	ldi	r20, 0x49	; 73
     c82:	50 e4       	ldi	r21, 0x40	; 64
     c84:	df d2       	rcall	.+1470   	; 0x1244 <__addsf3>
     c86:	21 ee       	ldi	r18, 0xE1	; 225
     c88:	3e e2       	ldi	r19, 0x2E	; 46
     c8a:	45 e6       	ldi	r20, 0x65	; 101
     c8c:	52 e4       	ldi	r21, 0x42	; 66
     c8e:	ea d4       	rcall	.+2516   	; 0x1664 <__mulsf3>
     c90:	4b 01       	movw	r8, r22
     c92:	5c 01       	movw	r10, r24
     c94:	f1 01       	movw	r30, r2
     c96:	64 87       	std	Z+12, r22	; 0x0c
     c98:	75 87       	std	Z+13, r23	; 0x0d
     c9a:	86 87       	std	Z+14, r24	; 0x0e
     c9c:	97 87       	std	Z+15, r25	; 0x0f
		All_Axis.z_accel = ( _MPU_RAD_TO_DEG * ( atan2( -All_Axis_ROW.Yaccel_raw , -All_Axis_ROW.Xaccel_raw ) + _MATH_PI ) );
     c9e:	a3 01       	movw	r20, r6
     ca0:	92 01       	movw	r18, r4
     ca2:	c7 01       	movw	r24, r14
     ca4:	b6 01       	movw	r22, r12
     ca6:	41 d3       	rcall	.+1666   	; 0x132a <atan2>
     ca8:	2b ed       	ldi	r18, 0xDB	; 219
     caa:	3f e0       	ldi	r19, 0x0F	; 15
     cac:	49 e4       	ldi	r20, 0x49	; 73
     cae:	50 e4       	ldi	r21, 0x40	; 64
     cb0:	c9 d2       	rcall	.+1426   	; 0x1244 <__addsf3>
     cb2:	21 ee       	ldi	r18, 0xE1	; 225
     cb4:	3e e2       	ldi	r19, 0x2E	; 46
     cb6:	45 e6       	ldi	r20, 0x65	; 101
     cb8:	52 e4       	ldi	r21, 0x42	; 66
     cba:	d4 d4       	rcall	.+2472   	; 0x1664 <__mulsf3>
     cbc:	f1 01       	movw	r30, r2
     cbe:	64 8b       	std	Z+20, r22	; 0x14
     cc0:	75 8b       	std	Z+21, r23	; 0x15
     cc2:	86 8b       	std	Z+22, r24	; 0x16
     cc4:	97 8b       	std	Z+23, r25	; 0x17
		All_Axis.x_gyro = ((All_Axis_ROW.Xgyro_raw /*- offsetGX*/) / _MPU_GYRO_SENS_250_SENS /*/ (1000 / 120)*/);
     cc6:	6e 81       	ldd	r22, Y+6	; 0x06
     cc8:	7f 81       	ldd	r23, Y+7	; 0x07
     cca:	07 2e       	mov	r0, r23
     ccc:	00 0c       	add	r0, r0
     cce:	88 0b       	sbc	r24, r24
     cd0:	99 0b       	sbc	r25, r25
     cd2:	ec d3       	rcall	.+2008   	; 0x14ac <__floatsisf>
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	43 e0       	ldi	r20, 0x03	; 3
     cda:	53 e4       	ldi	r21, 0x43	; 67
     cdc:	7d d3       	rcall	.+1786   	; 0x13d8 <__divsf3>
     cde:	f1 01       	movw	r30, r2
     ce0:	60 83       	st	Z, r22
     ce2:	71 83       	std	Z+1, r23	; 0x01
     ce4:	82 83       	std	Z+2, r24	; 0x02
     ce6:	93 83       	std	Z+3, r25	; 0x03
		All_Axis.y_gyro = ((All_Axis_ROW.Ygyro_raw /*- offsetGY*/) / _MPU_GYRO_SENS_250_SENS /*/ (1000 / 120)*/);
     ce8:	68 85       	ldd	r22, Y+8	; 0x08
     cea:	79 85       	ldd	r23, Y+9	; 0x09
     cec:	07 2e       	mov	r0, r23
     cee:	00 0c       	add	r0, r0
     cf0:	88 0b       	sbc	r24, r24
     cf2:	99 0b       	sbc	r25, r25
     cf4:	db d3       	rcall	.+1974   	; 0x14ac <__floatsisf>
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	43 e0       	ldi	r20, 0x03	; 3
     cfc:	53 e4       	ldi	r21, 0x43	; 67
     cfe:	6c d3       	rcall	.+1752   	; 0x13d8 <__divsf3>
     d00:	2b 01       	movw	r4, r22
     d02:	3c 01       	movw	r6, r24
     d04:	f1 01       	movw	r30, r2
     d06:	60 87       	std	Z+8, r22	; 0x08
     d08:	71 87       	std	Z+9, r23	; 0x09
     d0a:	82 87       	std	Z+10, r24	; 0x0a
     d0c:	93 87       	std	Z+11, r25	; 0x0b
		All_Axis.z_gyro = ((All_Axis_ROW.Zgyro_raw /*- offsetGZ*/) / _MPU_GYRO_SENS_250_SENS /*/ (1000 / 120)*/);
     d0e:	6a 85       	ldd	r22, Y+10	; 0x0a
     d10:	7b 85       	ldd	r23, Y+11	; 0x0b
     d12:	07 2e       	mov	r0, r23
     d14:	00 0c       	add	r0, r0
     d16:	88 0b       	sbc	r24, r24
     d18:	99 0b       	sbc	r25, r25
     d1a:	c8 d3       	rcall	.+1936   	; 0x14ac <__floatsisf>
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	43 e0       	ldi	r20, 0x03	; 3
     d22:	53 e4       	ldi	r21, 0x43	; 67
     d24:	59 d3       	rcall	.+1714   	; 0x13d8 <__divsf3>
     d26:	f1 01       	movw	r30, r2
     d28:	60 8b       	std	Z+16, r22	; 0x10
     d2a:	71 8b       	std	Z+17, r23	; 0x11
     d2c:	82 8b       	std	Z+18, r24	; 0x12
     d2e:	93 8b       	std	Z+19, r25	; 0x13
// 		//==================Simple KALMAN filter==================
// 		filtered_Y = KOEF * y_accel + (1 - KOEF) * y_accel_OLD;
// 		y_accel_OLD = y_accel;
// 		//========================================================
		//X_angle = kalman_filter(x_accel, x_gyro, 110);
		Y_angle = kalman_filter(All_Axis.y_accel, All_Axis.y_gyro, 51.0);
     d30:	e1 2c       	mov	r14, r1
     d32:	f1 2c       	mov	r15, r1
     d34:	0c e4       	ldi	r16, 0x4C	; 76
     d36:	12 e4       	ldi	r17, 0x42	; 66
     d38:	a3 01       	movw	r20, r6
     d3a:	92 01       	movw	r18, r4
     d3c:	c5 01       	movw	r24, r10
     d3e:	b4 01       	movw	r22, r8
     d40:	2c dc       	rcall	.-1960   	; 0x59a <kalman_filter>
     d42:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <Y_angle>
     d46:	70 93 b1 00 	sts	0x00B1, r23	; 0x8000b1 <Y_angle+0x1>
     d4a:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <Y_angle+0x2>
     d4e:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <Y_angle+0x3>
		//Z_angle = kalman_filter(z_accel, z_gyro, 110); //t prev = 120
	//====================================Output depending on the type BEGIN======================================
		if (Angle_Type == RB_DATA_TYPE){
     d52:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Angle_Type>
     d56:	8a 3f       	cpi	r24, 0xFA	; 250
     d58:	a9 f4       	brne	.+42     	; 0xd84 <main+0x1cc>
			Y_angle -= 90.0;
     d5a:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <Y_angle>
     d5e:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <Y_angle+0x1>
     d62:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Y_angle+0x2>
     d66:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <Y_angle+0x3>
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	44 eb       	ldi	r20, 0xB4	; 180
     d70:	52 e4       	ldi	r21, 0x42	; 66
     d72:	67 d2       	rcall	.+1230   	; 0x1242 <__subsf3>
     d74:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <Y_angle>
     d78:	70 93 b1 00 	sts	0x00B1, r23	; 0x8000b1 <Y_angle+0x1>
     d7c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <Y_angle+0x2>
     d80:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <Y_angle+0x3>
		}
		if (Y_angle <= 180.0){
     d84:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <Y_angle>
     d88:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <Y_angle+0x1>
     d8c:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Y_angle+0x2>
     d90:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <Y_angle+0x3>
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	44 e3       	ldi	r20, 0x34	; 52
     d9a:	53 e4       	ldi	r21, 0x43	; 67
     d9c:	19 d3       	rcall	.+1586   	; 0x13d0 <__cmpsf2>
     d9e:	18 16       	cp	r1, r24
     da0:	8c f0       	brlt	.+34     	; 0xdc4 <main+0x20c>
			Y_angle = Y_angle;
     da2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <Y_angle>
     da6:	90 91 b1 00 	lds	r25, 0x00B1	; 0x8000b1 <Y_angle+0x1>
     daa:	a0 91 b2 00 	lds	r26, 0x00B2	; 0x8000b2 <Y_angle+0x2>
     dae:	b0 91 b3 00 	lds	r27, 0x00B3	; 0x8000b3 <Y_angle+0x3>
     db2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <Y_angle>
     db6:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <Y_angle+0x1>
     dba:	a0 93 b2 00 	sts	0x00B2, r26	; 0x8000b2 <Y_angle+0x2>
     dbe:	b0 93 b3 00 	sts	0x00B3, r27	; 0x8000b3 <Y_angle+0x3>
     dc2:	15 c0       	rjmp	.+42     	; 0xdee <main+0x236>
		}else{
			Y_angle = Y_angle - 360.0;
     dc4:	60 91 b0 00 	lds	r22, 0x00B0	; 0x8000b0 <Y_angle>
     dc8:	70 91 b1 00 	lds	r23, 0x00B1	; 0x8000b1 <Y_angle+0x1>
     dcc:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <Y_angle+0x2>
     dd0:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <Y_angle+0x3>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	44 eb       	ldi	r20, 0xB4	; 180
     dda:	53 e4       	ldi	r21, 0x43	; 67
     ddc:	32 d2       	rcall	.+1124   	; 0x1242 <__subsf3>
     dde:	60 93 b0 00 	sts	0x00B0, r22	; 0x8000b0 <Y_angle>
     de2:	70 93 b1 00 	sts	0x00B1, r23	; 0x8000b1 <Y_angle+0x1>
     de6:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <Y_angle+0x2>
     dea:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <Y_angle+0x3>
		}
		
		if (Angle_Type == BOLLARD_DATA_TYPE)
     dee:	80 91 a8 00 	lds	r24, 0x00A8	; 0x8000a8 <Angle_Type>
     df2:	8d 3b       	cpi	r24, 0xBD	; 189
     df4:	61 f5       	brne	.+88     	; 0xe4e <main+0x296>
		{
			if (abs(All_Axis_ROW.Yaccel_raw) > 12000)
     df6:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <All_Axis_ROW+0x2>
     dfa:	90 91 cf 00 	lds	r25, 0x00CF	; 0x8000cf <All_Axis_ROW+0x3>
     dfe:	99 23       	and	r25, r25
     e00:	1c f4       	brge	.+6      	; 0xe08 <main+0x250>
     e02:	91 95       	neg	r25
     e04:	81 95       	neg	r24
     e06:	91 09       	sbc	r25, r1
     e08:	81 3e       	cpi	r24, 0xE1	; 225
     e0a:	9e 42       	sbci	r25, 0x2E	; 46
     e0c:	04 f1       	brlt	.+64     	; 0xe4e <main+0x296>
			{
				if (All_Axis_ROW.Xaccel_raw > sensitivity)
				{
				}
				if (UART_TX_Pre_Counter == 1){}
     e0e:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <UART_TX_Pre_Counter>
				if(MAX_Accel_Value_X < All_Axis_ROW.Xaccel_raw){
     e12:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <All_Axis_ROW>
     e16:	90 91 cd 00 	lds	r25, 0x00CD	; 0x8000cd <All_Axis_ROW+0x1>
     e1a:	20 91 ae 00 	lds	r18, 0x00AE	; 0x8000ae <MAX_Accel_Value_X>
     e1e:	30 91 af 00 	lds	r19, 0x00AF	; 0x8000af <MAX_Accel_Value_X+0x1>
     e22:	28 17       	cp	r18, r24
     e24:	39 07       	cpc	r19, r25
     e26:	24 f4       	brge	.+8      	; 0xe30 <main+0x278>
					MAX_Accel_Value_X = All_Axis_ROW.Xaccel_raw;
     e28:	90 93 af 00 	sts	0x00AF, r25	; 0x8000af <MAX_Accel_Value_X+0x1>
     e2c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <MAX_Accel_Value_X>
				}
				if(MAX_Accel_Value_Z < All_Axis_ROW.Zaccel_raw){
     e30:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <All_Axis_ROW+0x4>
     e34:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <All_Axis_ROW+0x5>
     e38:	20 91 ac 00 	lds	r18, 0x00AC	; 0x8000ac <MAX_Accel_Value_Z>
     e3c:	30 91 ad 00 	lds	r19, 0x00AD	; 0x8000ad <MAX_Accel_Value_Z+0x1>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	24 f4       	brge	.+8      	; 0xe4e <main+0x296>
					MAX_Accel_Value_Z = All_Axis_ROW.Zaccel_raw;
     e46:	90 93 ad 00 	sts	0x00AD, r25	; 0x8000ad <MAX_Accel_Value_Z+0x1>
     e4a:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <MAX_Accel_Value_Z>
				}
			}
		}
	//=====================================Output depending on the type END=======================================
	#ifdef DEBUG_MOD
		arduino_ploter();
     e4e:	7e de       	rcall	.-772    	; 0xb4c <arduino_ploter>
	#endif
    }
     e50:	d0 ce       	rjmp	.-608    	; 0xbf2 <main+0x3a>

00000e52 <MPU6050_BurstRead>:
		return _MPU_OK;
	}
	
	return _MPU_ERROR;
	
}
     e52:	af 92       	push	r10
     e54:	bf 92       	push	r11
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	8b 01       	movw	r16, r22
     e64:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <g_mpu_com_resp>
     e68:	93 9a       	sbi	0x12, 3	; 18
     e6a:	c4 2e       	mov	r12, r20
     e6c:	d1 2c       	mov	r13, r1
     e6e:	e1 2c       	mov	r14, r1
     e70:	f1 2c       	mov	r15, r1
     e72:	48 2f       	mov	r20, r24
     e74:	50 e0       	ldi	r21, 0x00	; 0
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	59 01       	movw	r10, r18
     e7c:	28 e0       	ldi	r18, 0x08	; 8
     e7e:	80 ed       	ldi	r24, 0xD0	; 208
     e80:	79 da       	rcall	.-2830   	; 0x374 <I2C_Mem_Read>
     e82:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <g_mpu_com_resp>
     e86:	93 98       	cbi	0x12, 3	; 18
     e88:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <g_mpu_com_resp>
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	ff 90       	pop	r15
     e92:	ef 90       	pop	r14
     e94:	df 90       	pop	r13
     e96:	cf 90       	pop	r12
     e98:	bf 90       	pop	r11
     e9a:	af 90       	pop	r10
     e9c:	08 95       	ret

00000e9e <MPU6050_SetParameters>:
     e9e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <MPU6050_Config+0x4>
     ea2:	81 30       	cpi	r24, 0x01	; 1
     ea4:	99 f0       	breq	.+38     	; 0xecc <MPU6050_SetParameters+0x2e>
     ea6:	28 f0       	brcs	.+10     	; 0xeb2 <MPU6050_SetParameters+0x14>
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	e9 f0       	breq	.+58     	; 0xee6 <MPU6050_SetParameters+0x48>
     eac:	83 30       	cpi	r24, 0x03	; 3
     eae:	41 f1       	breq	.+80     	; 0xf00 <MPU6050_SetParameters+0x62>
     eb0:	34 c0       	rjmp	.+104    	; 0xf1a <MPU6050_SetParameters+0x7c>
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a0 e8       	ldi	r26, 0x80	; 128
     eb8:	b6 e4       	ldi	r27, 0x46	; 70
     eba:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <MPU6050_Parameter+0x4>
     ebe:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <MPU6050_Parameter+0x5>
     ec2:	a0 93 e4 00 	sts	0x00E4, r26	; 0x8000e4 <MPU6050_Parameter+0x6>
     ec6:	b0 93 e5 00 	sts	0x00E5, r27	; 0x8000e5 <MPU6050_Parameter+0x7>
     eca:	33 c0       	rjmp	.+102    	; 0xf32 <MPU6050_SetParameters+0x94>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	a0 e0       	ldi	r26, 0x00	; 0
     ed2:	b6 e4       	ldi	r27, 0x46	; 70
     ed4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <MPU6050_Parameter+0x4>
     ed8:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <MPU6050_Parameter+0x5>
     edc:	a0 93 e4 00 	sts	0x00E4, r26	; 0x8000e4 <MPU6050_Parameter+0x6>
     ee0:	b0 93 e5 00 	sts	0x00E5, r27	; 0x8000e5 <MPU6050_Parameter+0x7>
     ee4:	26 c0       	rjmp	.+76     	; 0xf32 <MPU6050_SetParameters+0x94>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a0 e8       	ldi	r26, 0x80	; 128
     eec:	b5 e4       	ldi	r27, 0x45	; 69
     eee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <MPU6050_Parameter+0x4>
     ef2:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <MPU6050_Parameter+0x5>
     ef6:	a0 93 e4 00 	sts	0x00E4, r26	; 0x8000e4 <MPU6050_Parameter+0x6>
     efa:	b0 93 e5 00 	sts	0x00E5, r27	; 0x8000e5 <MPU6050_Parameter+0x7>
     efe:	19 c0       	rjmp	.+50     	; 0xf32 <MPU6050_SetParameters+0x94>
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b5 e4       	ldi	r27, 0x45	; 69
     f08:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <MPU6050_Parameter+0x4>
     f0c:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <MPU6050_Parameter+0x5>
     f10:	a0 93 e4 00 	sts	0x00E4, r26	; 0x8000e4 <MPU6050_Parameter+0x6>
     f14:	b0 93 e5 00 	sts	0x00E5, r27	; 0x8000e5 <MPU6050_Parameter+0x7>
     f18:	0c c0       	rjmp	.+24     	; 0xf32 <MPU6050_SetParameters+0x94>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a0 e8       	ldi	r26, 0x80	; 128
     f20:	b6 e4       	ldi	r27, 0x46	; 70
     f22:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <MPU6050_Parameter+0x4>
     f26:	90 93 e3 00 	sts	0x00E3, r25	; 0x8000e3 <MPU6050_Parameter+0x5>
     f2a:	a0 93 e4 00 	sts	0x00E4, r26	; 0x8000e4 <MPU6050_Parameter+0x6>
     f2e:	b0 93 e5 00 	sts	0x00E5, r27	; 0x8000e5 <MPU6050_Parameter+0x7>
     f32:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <MPU6050_Config+0x3>
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	99 f0       	breq	.+38     	; 0xf60 <MPU6050_SetParameters+0xc2>
     f3a:	28 f0       	brcs	.+10     	; 0xf46 <MPU6050_SetParameters+0xa8>
     f3c:	82 30       	cpi	r24, 0x02	; 2
     f3e:	e9 f0       	breq	.+58     	; 0xf7a <MPU6050_SetParameters+0xdc>
     f40:	83 30       	cpi	r24, 0x03	; 3
     f42:	41 f1       	breq	.+80     	; 0xf94 <MPU6050_SetParameters+0xf6>
     f44:	34 c0       	rjmp	.+104    	; 0xfae <MPU6050_SetParameters+0x110>
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	a3 e0       	ldi	r26, 0x03	; 3
     f4c:	b3 e4       	ldi	r27, 0x43	; 67
     f4e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <MPU6050_Parameter>
     f52:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <MPU6050_Parameter+0x1>
     f56:	a0 93 e0 00 	sts	0x00E0, r26	; 0x8000e0 <MPU6050_Parameter+0x2>
     f5a:	b0 93 e1 00 	sts	0x00E1, r27	; 0x8000e1 <MPU6050_Parameter+0x3>
     f5e:	08 95       	ret
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	a3 e8       	ldi	r26, 0x83	; 131
     f66:	b2 e4       	ldi	r27, 0x42	; 66
     f68:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <MPU6050_Parameter>
     f6c:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <MPU6050_Parameter+0x1>
     f70:	a0 93 e0 00 	sts	0x00E0, r26	; 0x8000e0 <MPU6050_Parameter+0x2>
     f74:	b0 93 e1 00 	sts	0x00E1, r27	; 0x8000e1 <MPU6050_Parameter+0x3>
     f78:	08 95       	ret
     f7a:	83 e3       	ldi	r24, 0x33	; 51
     f7c:	93 e3       	ldi	r25, 0x33	; 51
     f7e:	a3 e0       	ldi	r26, 0x03	; 3
     f80:	b2 e4       	ldi	r27, 0x42	; 66
     f82:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <MPU6050_Parameter>
     f86:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <MPU6050_Parameter+0x1>
     f8a:	a0 93 e0 00 	sts	0x00E0, r26	; 0x8000e0 <MPU6050_Parameter+0x2>
     f8e:	b0 93 e1 00 	sts	0x00E1, r27	; 0x8000e1 <MPU6050_Parameter+0x3>
     f92:	08 95       	ret
     f94:	83 e3       	ldi	r24, 0x33	; 51
     f96:	93 e3       	ldi	r25, 0x33	; 51
     f98:	a3 e8       	ldi	r26, 0x83	; 131
     f9a:	b1 e4       	ldi	r27, 0x41	; 65
     f9c:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <MPU6050_Parameter>
     fa0:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <MPU6050_Parameter+0x1>
     fa4:	a0 93 e0 00 	sts	0x00E0, r26	; 0x8000e0 <MPU6050_Parameter+0x2>
     fa8:	b0 93 e1 00 	sts	0x00E1, r27	; 0x8000e1 <MPU6050_Parameter+0x3>
     fac:	08 95       	ret
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a3 e0       	ldi	r26, 0x03	; 3
     fb4:	b3 e4       	ldi	r27, 0x43	; 67
     fb6:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <MPU6050_Parameter>
     fba:	90 93 df 00 	sts	0x00DF, r25	; 0x8000df <MPU6050_Parameter+0x1>
     fbe:	a0 93 e0 00 	sts	0x00E0, r26	; 0x8000e0 <MPU6050_Parameter+0x2>
     fc2:	b0 93 e1 00 	sts	0x00E1, r27	; 0x8000e1 <MPU6050_Parameter+0x3>
     fc6:	08 95       	ret

00000fc8 <MPU6050_IsReady>:
     fc8:	ac 01       	movw	r20, r24
     fca:	65 e0       	ldi	r22, 0x05	; 5
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	80 ed       	ldi	r24, 0xD0	; 208
     fd0:	d2 d8       	rcall	.-3676   	; 0x176 <I2C_IsDeviceReady>
     fd2:	08 95       	ret

00000fd4 <MPU6050_SingleWrite>:
     fd4:	af 92       	push	r10
     fd6:	bf 92       	push	r11
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	1f 92       	push	r1
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	18 2f       	mov	r17, r24
     ff0:	69 83       	std	Y+1, r22	; 0x01
     ff2:	5a 01       	movw	r10, r20
     ff4:	10 92 e6 00 	sts	0x00E6, r1	; 0x8000e6 <g_mpu_com_resp>
     ff8:	ca 01       	movw	r24, r20
     ffa:	e6 df       	rcall	.-52     	; 0xfc8 <MPU6050_IsReady>
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	81 f4       	brne	.+32     	; 0x1020 <MPU6050_SingleWrite+0x4c>
    1000:	41 2f       	mov	r20, r17
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	c1 2c       	mov	r12, r1
    100a:	d1 2c       	mov	r13, r1
    100c:	76 01       	movw	r14, r12
    100e:	c3 94       	inc	r12
    1010:	8e 01       	movw	r16, r28
    1012:	0f 5f       	subi	r16, 0xFF	; 255
    1014:	1f 4f       	sbci	r17, 0xFF	; 255
    1016:	28 e0       	ldi	r18, 0x08	; 8
    1018:	80 ed       	ldi	r24, 0xD0	; 208
    101a:	da d8       	rcall	.-3660   	; 0x1d0 <I2C_Mem_Write>
    101c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <g_mpu_com_resp>
    1020:	80 91 e6 00 	lds	r24, 0x00E6	; 0x8000e6 <g_mpu_com_resp>
    1024:	0f 90       	pop	r0
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	08 95       	ret

0000103c <MPU6050_AutoInit>:
    103c:	af 92       	push	r10
    103e:	bf 92       	push	r11
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	8c 01       	movw	r16, r24
    1052:	8a d8       	rcall	.-3820   	; 0x168 <I2C_Init>
    1054:	cc e2       	ldi	r28, 0x2C	; 44
    1056:	d1 e0       	ldi	r29, 0x01	; 1
    1058:	18 82       	st	Y, r1
    105a:	1a 82       	std	Y+2, r1	; 0x02
    105c:	1e 82       	std	Y+6, r1	; 0x06
    105e:	19 82       	std	Y+1, r1	; 0x01
    1060:	0f 2e       	mov	r0, r31
    1062:	f1 e3       	ldi	r31, 0x31	; 49
    1064:	af 2e       	mov	r10, r31
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	bf 2e       	mov	r11, r31
    106a:	f0 2d       	mov	r31, r0
    106c:	f5 01       	movw	r30, r10
    106e:	80 81       	ld	r24, Z
    1070:	8c 7f       	andi	r24, 0xFC	; 252
    1072:	8b 7f       	andi	r24, 0xFB	; 251
    1074:	80 83       	st	Z, r24
    1076:	1b 82       	std	Y+3, r1	; 0x03
    1078:	1c 82       	std	Y+4, r1	; 0x04
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	8f 83       	std	Y+7, r24	; 0x07
    107e:	a8 01       	movw	r20, r16
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	88 e3       	ldi	r24, 0x38	; 56
    1084:	a7 df       	rcall	.-178    	; 0xfd4 <MPU6050_SingleWrite>
    1086:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <g_mpu_com_resp>
    108a:	68 81       	ld	r22, Y
    108c:	61 50       	subi	r22, 0x01	; 1
    108e:	a8 01       	movw	r20, r16
    1090:	89 e1       	ldi	r24, 0x19	; 25
    1092:	a0 df       	rcall	.-192    	; 0xfd4 <MPU6050_SingleWrite>
    1094:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <g_mpu_com_resp>
    1098:	89 0f       	add	r24, r25
    109a:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <g_mpu_com_resp>
    109e:	6b 81       	ldd	r22, Y+3	; 0x03
    10a0:	66 0f       	add	r22, r22
    10a2:	66 0f       	add	r22, r22
    10a4:	66 0f       	add	r22, r22
    10a6:	a8 01       	movw	r20, r16
    10a8:	8b e1       	ldi	r24, 0x1B	; 27
    10aa:	94 df       	rcall	.-216    	; 0xfd4 <MPU6050_SingleWrite>
    10ac:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <g_mpu_com_resp>
    10b0:	89 0f       	add	r24, r25
    10b2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <g_mpu_com_resp>
    10b6:	6c 81       	ldd	r22, Y+4	; 0x04
    10b8:	66 0f       	add	r22, r22
    10ba:	66 0f       	add	r22, r22
    10bc:	66 0f       	add	r22, r22
    10be:	a8 01       	movw	r20, r16
    10c0:	8c e1       	ldi	r24, 0x1C	; 28
    10c2:	88 df       	rcall	.-240    	; 0xfd4 <MPU6050_SingleWrite>
    10c4:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <g_mpu_com_resp>
    10c8:	89 0f       	add	r24, r25
    10ca:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <g_mpu_com_resp>
    10ce:	69 81       	ldd	r22, Y+1	; 0x01
    10d0:	66 0f       	add	r22, r22
    10d2:	66 0f       	add	r22, r22
    10d4:	66 0f       	add	r22, r22
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	68 2b       	or	r22, r24
    10da:	a8 01       	movw	r20, r16
    10dc:	8a e1       	ldi	r24, 0x1A	; 26
    10de:	7a df       	rcall	.-268    	; 0xfd4 <MPU6050_SingleWrite>
    10e0:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <g_mpu_com_resp>
    10e4:	89 0f       	add	r24, r25
    10e6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <g_mpu_com_resp>
    10ea:	f5 01       	movw	r30, r10
    10ec:	80 81       	ld	r24, Z
    10ee:	68 2f       	mov	r22, r24
    10f0:	67 95       	ror	r22
    10f2:	66 27       	eor	r22, r22
    10f4:	67 95       	ror	r22
    10f6:	81 fb       	bst	r24, 1
    10f8:	cc 24       	eor	r12, r12
    10fa:	c0 f8       	bld	r12, 0
    10fc:	d1 2c       	mov	r13, r1
    10fe:	00 24       	eor	r0, r0
    1100:	d6 94       	lsr	r13
    1102:	c7 94       	ror	r12
    1104:	07 94       	ror	r0
    1106:	d6 94       	lsr	r13
    1108:	c7 94       	ror	r12
    110a:	07 94       	ror	r0
    110c:	dc 2c       	mov	r13, r12
    110e:	c0 2c       	mov	r12, r0
    1110:	c6 2a       	or	r12, r22
    1112:	82 fb       	bst	r24, 2
    1114:	ee 24       	eor	r14, r14
    1116:	e0 f8       	bld	r14, 0
    1118:	f1 2c       	mov	r15, r1
    111a:	ee 0c       	add	r14, r14
    111c:	ff 1c       	adc	r15, r15
    111e:	ee 0c       	add	r14, r14
    1120:	ff 1c       	adc	r15, r15
    1122:	ee 0c       	add	r14, r14
    1124:	ff 1c       	adc	r15, r15
    1126:	ee 0c       	add	r14, r14
    1128:	ff 1c       	adc	r15, r15
    112a:	ee 0c       	add	r14, r14
    112c:	ff 1c       	adc	r15, r15
    112e:	6c 2d       	mov	r22, r12
    1130:	6e 29       	or	r22, r14
    1132:	a8 01       	movw	r20, r16
    1134:	87 e3       	ldi	r24, 0x37	; 55
    1136:	4e df       	rcall	.-356    	; 0xfd4 <MPU6050_SingleWrite>
    1138:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <g_mpu_com_resp>
    113c:	89 0f       	add	r24, r25
    113e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <g_mpu_com_resp>
    1142:	a8 01       	movw	r20, r16
    1144:	6f 81       	ldd	r22, Y+7	; 0x07
    1146:	8b e6       	ldi	r24, 0x6B	; 107
    1148:	45 df       	rcall	.-374    	; 0xfd4 <MPU6050_SingleWrite>
    114a:	90 91 e6 00 	lds	r25, 0x00E6	; 0x8000e6 <g_mpu_com_resp>
    114e:	89 0f       	add	r24, r25
    1150:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <g_mpu_com_resp>
    1154:	87 30       	cpi	r24, 0x07	; 7
    1156:	19 f4       	brne	.+6      	; 0x115e <MPU6050_AutoInit+0x122>
    1158:	a2 de       	rcall	.-700    	; 0xe9e <MPU6050_SetParameters>
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <MPU6050_AutoInit+0x124>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	bf 90       	pop	r11
    1172:	af 90       	pop	r10
    1174:	08 95       	ret

00001176 <MPU6050_GetRawAccel>:
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	00 d0       	rcall	.+0      	; 0x1180 <MPU6050_GetRawAccel+0xa>
    1180:	00 d0       	rcall	.+0      	; 0x1182 <MPU6050_GetRawAccel+0xc>
    1182:	00 d0       	rcall	.+0      	; 0x1184 <MPU6050_GetRawAccel+0xe>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	8c 01       	movw	r16, r24
    118a:	9b 01       	movw	r18, r22
    118c:	46 e0       	ldi	r20, 0x06	; 6
    118e:	be 01       	movw	r22, r28
    1190:	6f 5f       	subi	r22, 0xFF	; 255
    1192:	7f 4f       	sbci	r23, 0xFF	; 255
    1194:	8b e3       	ldi	r24, 0x3B	; 59
    1196:	5d de       	rcall	.-838    	; 0xe52 <MPU6050_BurstRead>
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	a1 f4       	brne	.+40     	; 0x11c4 <MPU6050_GetRawAccel+0x4e>
    119c:	fe 01       	movw	r30, r28
    119e:	31 96       	adiw	r30, 0x01	; 1
    11a0:	a8 01       	movw	r20, r16
    11a2:	4a 5f       	subi	r20, 0xFA	; 250
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	20 81       	ld	r18, Z
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	32 2f       	mov	r19, r18
    11ac:	22 27       	eor	r18, r18
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	29 2b       	or	r18, r25
    11b2:	d8 01       	movw	r26, r16
    11b4:	2d 93       	st	X+, r18
    11b6:	3d 93       	st	X+, r19
    11b8:	8d 01       	movw	r16, r26
    11ba:	32 96       	adiw	r30, 0x02	; 2
    11bc:	4a 17       	cp	r20, r26
    11be:	5b 07       	cpc	r21, r27
    11c0:	91 f7       	brne	.-28     	; 0x11a6 <MPU6050_GetRawAccel+0x30>
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <MPU6050_GetRawAccel+0x50>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	26 96       	adiw	r28, 0x06	; 6
    11c8:	0f b6       	in	r0, 0x3f	; 63
    11ca:	f8 94       	cli
    11cc:	de bf       	out	0x3e, r29	; 62
    11ce:	0f be       	out	0x3f, r0	; 63
    11d0:	cd bf       	out	0x3d, r28	; 61
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	08 95       	ret

000011dc <MPU6050_GetRawGyro>:
		     -> status is _MPU_OK/_MPU_ERROR
		   
*/

uint8_t MPU6050_GetRawGyro( int16_t *raw_gyro_str, uint16_t _time_out) /* Function for take Gyroscope value */
{
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <MPU6050_GetRawGyro+0xa>
    11e6:	00 d0       	rcall	.+0      	; 0x11e8 <MPU6050_GetRawGyro+0xc>
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <MPU6050_GetRawGyro+0xe>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	8c 01       	movw	r16, r24
    11f0:	9b 01       	movw	r18, r22
	/* ----------- Create variable ----------- */
	uint8_t write_counter; /* Variable for count */
	uint8_t raw_gyro[_MPU_AXIS_ALL_REG_LEGTH]; /* String for take value from registers */
	
	/* ----------- Read value from MPU60X0 ----------- */
	if ( MPU6050_BurstRead(_REG_GYRO_XOUT_H, raw_gyro, _MPU_AXIS_ALL_REG_LEGTH, _time_out) == _MPU_OK ) /* The instructions are complete */
    11f2:	46 e0       	ldi	r20, 0x06	; 6
    11f4:	be 01       	movw	r22, r28
    11f6:	6f 5f       	subi	r22, 0xFF	; 255
    11f8:	7f 4f       	sbci	r23, 0xFF	; 255
    11fa:	83 e4       	ldi	r24, 0x43	; 67
    11fc:	2a de       	rcall	.-940    	; 0xe52 <MPU6050_BurstRead>
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	a1 f4       	brne	.+40     	; 0x122a <MPU6050_GetRawGyro+0x4e>
    1202:	fe 01       	movw	r30, r28
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	a8 01       	movw	r20, r16
    1208:	4a 5f       	subi	r20, 0xFA	; 250
    120a:	5f 4f       	sbci	r21, 0xFF	; 255
	{
		/* --- Save Value in str --- */
		for ( write_counter = 0 ; write_counter < _MPU_AXIS_ALL_REG_LEGTH ; write_counter += _MPU_AXIS_REG_LENGTH ) /* Loop for save data to string */
		{
			
			*raw_gyro_str = ( (int16_t)raw_gyro[write_counter] << _MPU_HIGH_BYTE_SHIFT ) | (int16_t)raw_gyro[write_counter + 1]; /* Write data */
    120c:	20 81       	ld	r18, Z
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	32 2f       	mov	r19, r18
    1212:	22 27       	eor	r18, r18
    1214:	91 81       	ldd	r25, Z+1	; 0x01
    1216:	29 2b       	or	r18, r25
    1218:	d8 01       	movw	r26, r16
    121a:	2d 93       	st	X+, r18
    121c:	3d 93       	st	X+, r19
    121e:	8d 01       	movw	r16, r26
    1220:	32 96       	adiw	r30, 0x02	; 2
	
	/* ----------- Read value from MPU60X0 ----------- */
	if ( MPU6050_BurstRead(_REG_GYRO_XOUT_H, raw_gyro, _MPU_AXIS_ALL_REG_LEGTH, _time_out) == _MPU_OK ) /* The instructions are complete */
	{
		/* --- Save Value in str --- */
		for ( write_counter = 0 ; write_counter < _MPU_AXIS_ALL_REG_LEGTH ; write_counter += _MPU_AXIS_REG_LENGTH ) /* Loop for save data to string */
    1222:	4a 17       	cp	r20, r26
    1224:	5b 07       	cpc	r21, r27
    1226:	91 f7       	brne	.-28     	; 0x120c <MPU6050_GetRawGyro+0x30>
    1228:	01 c0       	rjmp	.+2      	; 0x122c <MPU6050_GetRawGyro+0x50>
		
		return _MPU_OK;
		
	}
	
	return _MPU_ERROR;
    122a:	80 e0       	ldi	r24, 0x00	; 0
	
}
    122c:	26 96       	adiw	r28, 0x06	; 6
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	08 95       	ret

00001242 <__subsf3>:
    1242:	50 58       	subi	r21, 0x80	; 128

00001244 <__addsf3>:
    1244:	bb 27       	eor	r27, r27
    1246:	aa 27       	eor	r26, r26
    1248:	0e d0       	rcall	.+28     	; 0x1266 <__addsf3x>
    124a:	cb c1       	rjmp	.+918    	; 0x15e2 <__fp_round>
    124c:	bc d1       	rcall	.+888    	; 0x15c6 <__fp_pscA>
    124e:	30 f0       	brcs	.+12     	; 0x125c <__addsf3+0x18>
    1250:	c1 d1       	rcall	.+898    	; 0x15d4 <__fp_pscB>
    1252:	20 f0       	brcs	.+8      	; 0x125c <__addsf3+0x18>
    1254:	31 f4       	brne	.+12     	; 0x1262 <__addsf3+0x1e>
    1256:	9f 3f       	cpi	r25, 0xFF	; 255
    1258:	11 f4       	brne	.+4      	; 0x125e <__addsf3+0x1a>
    125a:	1e f4       	brtc	.+6      	; 0x1262 <__addsf3+0x1e>
    125c:	8c c1       	rjmp	.+792    	; 0x1576 <__fp_nan>
    125e:	0e f4       	brtc	.+2      	; 0x1262 <__addsf3+0x1e>
    1260:	e0 95       	com	r30
    1262:	e7 fb       	bst	r30, 7
    1264:	82 c1       	rjmp	.+772    	; 0x156a <__fp_inf>

00001266 <__addsf3x>:
    1266:	e9 2f       	mov	r30, r25
    1268:	cd d1       	rcall	.+922    	; 0x1604 <__fp_split3>
    126a:	80 f3       	brcs	.-32     	; 0x124c <__addsf3+0x8>
    126c:	ba 17       	cp	r27, r26
    126e:	62 07       	cpc	r22, r18
    1270:	73 07       	cpc	r23, r19
    1272:	84 07       	cpc	r24, r20
    1274:	95 07       	cpc	r25, r21
    1276:	18 f0       	brcs	.+6      	; 0x127e <__addsf3x+0x18>
    1278:	71 f4       	brne	.+28     	; 0x1296 <__addsf3x+0x30>
    127a:	9e f5       	brtc	.+102    	; 0x12e2 <__addsf3x+0x7c>
    127c:	e5 c1       	rjmp	.+970    	; 0x1648 <__fp_zero>
    127e:	0e f4       	brtc	.+2      	; 0x1282 <__addsf3x+0x1c>
    1280:	e0 95       	com	r30
    1282:	0b 2e       	mov	r0, r27
    1284:	ba 2f       	mov	r27, r26
    1286:	a0 2d       	mov	r26, r0
    1288:	0b 01       	movw	r0, r22
    128a:	b9 01       	movw	r22, r18
    128c:	90 01       	movw	r18, r0
    128e:	0c 01       	movw	r0, r24
    1290:	ca 01       	movw	r24, r20
    1292:	a0 01       	movw	r20, r0
    1294:	11 24       	eor	r1, r1
    1296:	ff 27       	eor	r31, r31
    1298:	59 1b       	sub	r21, r25
    129a:	99 f0       	breq	.+38     	; 0x12c2 <__addsf3x+0x5c>
    129c:	59 3f       	cpi	r21, 0xF9	; 249
    129e:	50 f4       	brcc	.+20     	; 0x12b4 <__addsf3x+0x4e>
    12a0:	50 3e       	cpi	r21, 0xE0	; 224
    12a2:	68 f1       	brcs	.+90     	; 0x12fe <__addsf3x+0x98>
    12a4:	1a 16       	cp	r1, r26
    12a6:	f0 40       	sbci	r31, 0x00	; 0
    12a8:	a2 2f       	mov	r26, r18
    12aa:	23 2f       	mov	r18, r19
    12ac:	34 2f       	mov	r19, r20
    12ae:	44 27       	eor	r20, r20
    12b0:	58 5f       	subi	r21, 0xF8	; 248
    12b2:	f3 cf       	rjmp	.-26     	; 0x129a <__addsf3x+0x34>
    12b4:	46 95       	lsr	r20
    12b6:	37 95       	ror	r19
    12b8:	27 95       	ror	r18
    12ba:	a7 95       	ror	r26
    12bc:	f0 40       	sbci	r31, 0x00	; 0
    12be:	53 95       	inc	r21
    12c0:	c9 f7       	brne	.-14     	; 0x12b4 <__addsf3x+0x4e>
    12c2:	7e f4       	brtc	.+30     	; 0x12e2 <__addsf3x+0x7c>
    12c4:	1f 16       	cp	r1, r31
    12c6:	ba 0b       	sbc	r27, r26
    12c8:	62 0b       	sbc	r22, r18
    12ca:	73 0b       	sbc	r23, r19
    12cc:	84 0b       	sbc	r24, r20
    12ce:	ba f0       	brmi	.+46     	; 0x12fe <__addsf3x+0x98>
    12d0:	91 50       	subi	r25, 0x01	; 1
    12d2:	a1 f0       	breq	.+40     	; 0x12fc <__addsf3x+0x96>
    12d4:	ff 0f       	add	r31, r31
    12d6:	bb 1f       	adc	r27, r27
    12d8:	66 1f       	adc	r22, r22
    12da:	77 1f       	adc	r23, r23
    12dc:	88 1f       	adc	r24, r24
    12de:	c2 f7       	brpl	.-16     	; 0x12d0 <__addsf3x+0x6a>
    12e0:	0e c0       	rjmp	.+28     	; 0x12fe <__addsf3x+0x98>
    12e2:	ba 0f       	add	r27, r26
    12e4:	62 1f       	adc	r22, r18
    12e6:	73 1f       	adc	r23, r19
    12e8:	84 1f       	adc	r24, r20
    12ea:	48 f4       	brcc	.+18     	; 0x12fe <__addsf3x+0x98>
    12ec:	87 95       	ror	r24
    12ee:	77 95       	ror	r23
    12f0:	67 95       	ror	r22
    12f2:	b7 95       	ror	r27
    12f4:	f7 95       	ror	r31
    12f6:	9e 3f       	cpi	r25, 0xFE	; 254
    12f8:	08 f0       	brcs	.+2      	; 0x12fc <__addsf3x+0x96>
    12fa:	b3 cf       	rjmp	.-154    	; 0x1262 <__addsf3+0x1e>
    12fc:	93 95       	inc	r25
    12fe:	88 0f       	add	r24, r24
    1300:	08 f0       	brcs	.+2      	; 0x1304 <__addsf3x+0x9e>
    1302:	99 27       	eor	r25, r25
    1304:	ee 0f       	add	r30, r30
    1306:	97 95       	ror	r25
    1308:	87 95       	ror	r24
    130a:	08 95       	ret
    130c:	5c d1       	rcall	.+696    	; 0x15c6 <__fp_pscA>
    130e:	58 f0       	brcs	.+22     	; 0x1326 <__addsf3x+0xc0>
    1310:	80 e8       	ldi	r24, 0x80	; 128
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	09 f4       	brne	.+2      	; 0x1318 <__addsf3x+0xb2>
    1316:	9e ef       	ldi	r25, 0xFE	; 254
    1318:	5d d1       	rcall	.+698    	; 0x15d4 <__fp_pscB>
    131a:	28 f0       	brcs	.+10     	; 0x1326 <__addsf3x+0xc0>
    131c:	40 e8       	ldi	r20, 0x80	; 128
    131e:	51 e0       	ldi	r21, 0x01	; 1
    1320:	59 f4       	brne	.+22     	; 0x1338 <atan2+0xe>
    1322:	5e ef       	ldi	r21, 0xFE	; 254
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <atan2+0xe>
    1326:	27 c1       	rjmp	.+590    	; 0x1576 <__fp_nan>
    1328:	8f c1       	rjmp	.+798    	; 0x1648 <__fp_zero>

0000132a <atan2>:
    132a:	e9 2f       	mov	r30, r25
    132c:	e0 78       	andi	r30, 0x80	; 128
    132e:	6a d1       	rcall	.+724    	; 0x1604 <__fp_split3>
    1330:	68 f3       	brcs	.-38     	; 0x130c <__addsf3x+0xa6>
    1332:	09 2e       	mov	r0, r25
    1334:	05 2a       	or	r0, r21
    1336:	c1 f3       	breq	.-16     	; 0x1328 <__addsf3x+0xc2>
    1338:	26 17       	cp	r18, r22
    133a:	37 07       	cpc	r19, r23
    133c:	48 07       	cpc	r20, r24
    133e:	59 07       	cpc	r21, r25
    1340:	38 f0       	brcs	.+14     	; 0x1350 <atan2+0x26>
    1342:	0e 2e       	mov	r0, r30
    1344:	07 f8       	bld	r0, 7
    1346:	e0 25       	eor	r30, r0
    1348:	69 f0       	breq	.+26     	; 0x1364 <atan2+0x3a>
    134a:	e0 25       	eor	r30, r0
    134c:	e0 64       	ori	r30, 0x40	; 64
    134e:	0a c0       	rjmp	.+20     	; 0x1364 <atan2+0x3a>
    1350:	ef 63       	ori	r30, 0x3F	; 63
    1352:	07 f8       	bld	r0, 7
    1354:	00 94       	com	r0
    1356:	07 fa       	bst	r0, 7
    1358:	db 01       	movw	r26, r22
    135a:	b9 01       	movw	r22, r18
    135c:	9d 01       	movw	r18, r26
    135e:	dc 01       	movw	r26, r24
    1360:	ca 01       	movw	r24, r20
    1362:	ad 01       	movw	r20, r26
    1364:	ef 93       	push	r30
    1366:	47 d0       	rcall	.+142    	; 0x13f6 <__divsf3_pse>
    1368:	3c d1       	rcall	.+632    	; 0x15e2 <__fp_round>
    136a:	0a d0       	rcall	.+20     	; 0x1380 <atan>
    136c:	5f 91       	pop	r21
    136e:	55 23       	and	r21, r21
    1370:	31 f0       	breq	.+12     	; 0x137e <atan2+0x54>
    1372:	2b ed       	ldi	r18, 0xDB	; 219
    1374:	3f e0       	ldi	r19, 0x0F	; 15
    1376:	49 e4       	ldi	r20, 0x49	; 73
    1378:	50 fd       	sbrc	r21, 0
    137a:	49 ec       	ldi	r20, 0xC9	; 201
    137c:	63 cf       	rjmp	.-314    	; 0x1244 <__addsf3>
    137e:	08 95       	ret

00001380 <atan>:
    1380:	df 93       	push	r29
    1382:	dd 27       	eor	r29, r29
    1384:	b9 2f       	mov	r27, r25
    1386:	bf 77       	andi	r27, 0x7F	; 127
    1388:	40 e8       	ldi	r20, 0x80	; 128
    138a:	5f e3       	ldi	r21, 0x3F	; 63
    138c:	16 16       	cp	r1, r22
    138e:	17 06       	cpc	r1, r23
    1390:	48 07       	cpc	r20, r24
    1392:	5b 07       	cpc	r21, r27
    1394:	10 f4       	brcc	.+4      	; 0x139a <atan+0x1a>
    1396:	d9 2f       	mov	r29, r25
    1398:	5e d1       	rcall	.+700    	; 0x1656 <inverse>
    139a:	9f 93       	push	r25
    139c:	8f 93       	push	r24
    139e:	7f 93       	push	r23
    13a0:	6f 93       	push	r22
    13a2:	c3 d1       	rcall	.+902    	; 0x172a <square>
    13a4:	e6 e2       	ldi	r30, 0x26	; 38
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	e9 d0       	rcall	.+466    	; 0x157c <__fp_powser>
    13aa:	1b d1       	rcall	.+566    	; 0x15e2 <__fp_round>
    13ac:	2f 91       	pop	r18
    13ae:	3f 91       	pop	r19
    13b0:	4f 91       	pop	r20
    13b2:	5f 91       	pop	r21
    13b4:	63 d1       	rcall	.+710    	; 0x167c <__mulsf3x>
    13b6:	dd 23       	and	r29, r29
    13b8:	49 f0       	breq	.+18     	; 0x13cc <atan+0x4c>
    13ba:	90 58       	subi	r25, 0x80	; 128
    13bc:	a2 ea       	ldi	r26, 0xA2	; 162
    13be:	2a ed       	ldi	r18, 0xDA	; 218
    13c0:	3f e0       	ldi	r19, 0x0F	; 15
    13c2:	49 ec       	ldi	r20, 0xC9	; 201
    13c4:	5f e3       	ldi	r21, 0x3F	; 63
    13c6:	d0 78       	andi	r29, 0x80	; 128
    13c8:	5d 27       	eor	r21, r29
    13ca:	4d df       	rcall	.-358    	; 0x1266 <__addsf3x>
    13cc:	df 91       	pop	r29
    13ce:	09 c1       	rjmp	.+530    	; 0x15e2 <__fp_round>

000013d0 <__cmpsf2>:
    13d0:	a8 d0       	rcall	.+336    	; 0x1522 <__fp_cmp>
    13d2:	08 f4       	brcc	.+2      	; 0x13d6 <__cmpsf2+0x6>
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	08 95       	ret

000013d8 <__divsf3>:
    13d8:	0c d0       	rcall	.+24     	; 0x13f2 <__divsf3x>
    13da:	03 c1       	rjmp	.+518    	; 0x15e2 <__fp_round>
    13dc:	fb d0       	rcall	.+502    	; 0x15d4 <__fp_pscB>
    13de:	40 f0       	brcs	.+16     	; 0x13f0 <__divsf3+0x18>
    13e0:	f2 d0       	rcall	.+484    	; 0x15c6 <__fp_pscA>
    13e2:	30 f0       	brcs	.+12     	; 0x13f0 <__divsf3+0x18>
    13e4:	21 f4       	brne	.+8      	; 0x13ee <__divsf3+0x16>
    13e6:	5f 3f       	cpi	r21, 0xFF	; 255
    13e8:	19 f0       	breq	.+6      	; 0x13f0 <__divsf3+0x18>
    13ea:	bf c0       	rjmp	.+382    	; 0x156a <__fp_inf>
    13ec:	51 11       	cpse	r21, r1
    13ee:	2d c1       	rjmp	.+602    	; 0x164a <__fp_szero>
    13f0:	c2 c0       	rjmp	.+388    	; 0x1576 <__fp_nan>

000013f2 <__divsf3x>:
    13f2:	08 d1       	rcall	.+528    	; 0x1604 <__fp_split3>
    13f4:	98 f3       	brcs	.-26     	; 0x13dc <__divsf3+0x4>

000013f6 <__divsf3_pse>:
    13f6:	99 23       	and	r25, r25
    13f8:	c9 f3       	breq	.-14     	; 0x13ec <__divsf3+0x14>
    13fa:	55 23       	and	r21, r21
    13fc:	b1 f3       	breq	.-20     	; 0x13ea <__divsf3+0x12>
    13fe:	95 1b       	sub	r25, r21
    1400:	55 0b       	sbc	r21, r21
    1402:	bb 27       	eor	r27, r27
    1404:	aa 27       	eor	r26, r26
    1406:	62 17       	cp	r22, r18
    1408:	73 07       	cpc	r23, r19
    140a:	84 07       	cpc	r24, r20
    140c:	38 f0       	brcs	.+14     	; 0x141c <__divsf3_pse+0x26>
    140e:	9f 5f       	subi	r25, 0xFF	; 255
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	22 0f       	add	r18, r18
    1414:	33 1f       	adc	r19, r19
    1416:	44 1f       	adc	r20, r20
    1418:	aa 1f       	adc	r26, r26
    141a:	a9 f3       	breq	.-22     	; 0x1406 <__divsf3_pse+0x10>
    141c:	33 d0       	rcall	.+102    	; 0x1484 <__divsf3_pse+0x8e>
    141e:	0e 2e       	mov	r0, r30
    1420:	3a f0       	brmi	.+14     	; 0x1430 <__divsf3_pse+0x3a>
    1422:	e0 e8       	ldi	r30, 0x80	; 128
    1424:	30 d0       	rcall	.+96     	; 0x1486 <__divsf3_pse+0x90>
    1426:	91 50       	subi	r25, 0x01	; 1
    1428:	50 40       	sbci	r21, 0x00	; 0
    142a:	e6 95       	lsr	r30
    142c:	00 1c       	adc	r0, r0
    142e:	ca f7       	brpl	.-14     	; 0x1422 <__divsf3_pse+0x2c>
    1430:	29 d0       	rcall	.+82     	; 0x1484 <__divsf3_pse+0x8e>
    1432:	fe 2f       	mov	r31, r30
    1434:	27 d0       	rcall	.+78     	; 0x1484 <__divsf3_pse+0x8e>
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	88 1f       	adc	r24, r24
    143c:	bb 1f       	adc	r27, r27
    143e:	26 17       	cp	r18, r22
    1440:	37 07       	cpc	r19, r23
    1442:	48 07       	cpc	r20, r24
    1444:	ab 07       	cpc	r26, r27
    1446:	b0 e8       	ldi	r27, 0x80	; 128
    1448:	09 f0       	breq	.+2      	; 0x144c <__divsf3_pse+0x56>
    144a:	bb 0b       	sbc	r27, r27
    144c:	80 2d       	mov	r24, r0
    144e:	bf 01       	movw	r22, r30
    1450:	ff 27       	eor	r31, r31
    1452:	93 58       	subi	r25, 0x83	; 131
    1454:	5f 4f       	sbci	r21, 0xFF	; 255
    1456:	2a f0       	brmi	.+10     	; 0x1462 <__divsf3_pse+0x6c>
    1458:	9e 3f       	cpi	r25, 0xFE	; 254
    145a:	51 05       	cpc	r21, r1
    145c:	68 f0       	brcs	.+26     	; 0x1478 <__divsf3_pse+0x82>
    145e:	85 c0       	rjmp	.+266    	; 0x156a <__fp_inf>
    1460:	f4 c0       	rjmp	.+488    	; 0x164a <__fp_szero>
    1462:	5f 3f       	cpi	r21, 0xFF	; 255
    1464:	ec f3       	brlt	.-6      	; 0x1460 <__divsf3_pse+0x6a>
    1466:	98 3e       	cpi	r25, 0xE8	; 232
    1468:	dc f3       	brlt	.-10     	; 0x1460 <__divsf3_pse+0x6a>
    146a:	86 95       	lsr	r24
    146c:	77 95       	ror	r23
    146e:	67 95       	ror	r22
    1470:	b7 95       	ror	r27
    1472:	f7 95       	ror	r31
    1474:	9f 5f       	subi	r25, 0xFF	; 255
    1476:	c9 f7       	brne	.-14     	; 0x146a <__divsf3_pse+0x74>
    1478:	88 0f       	add	r24, r24
    147a:	91 1d       	adc	r25, r1
    147c:	96 95       	lsr	r25
    147e:	87 95       	ror	r24
    1480:	97 f9       	bld	r25, 7
    1482:	08 95       	ret
    1484:	e1 e0       	ldi	r30, 0x01	; 1
    1486:	66 0f       	add	r22, r22
    1488:	77 1f       	adc	r23, r23
    148a:	88 1f       	adc	r24, r24
    148c:	bb 1f       	adc	r27, r27
    148e:	62 17       	cp	r22, r18
    1490:	73 07       	cpc	r23, r19
    1492:	84 07       	cpc	r24, r20
    1494:	ba 07       	cpc	r27, r26
    1496:	20 f0       	brcs	.+8      	; 0x14a0 <__divsf3_pse+0xaa>
    1498:	62 1b       	sub	r22, r18
    149a:	73 0b       	sbc	r23, r19
    149c:	84 0b       	sbc	r24, r20
    149e:	ba 0b       	sbc	r27, r26
    14a0:	ee 1f       	adc	r30, r30
    14a2:	88 f7       	brcc	.-30     	; 0x1486 <__divsf3_pse+0x90>
    14a4:	e0 95       	com	r30
    14a6:	08 95       	ret

000014a8 <__floatunsisf>:
    14a8:	e8 94       	clt
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <__floatsisf+0x12>

000014ac <__floatsisf>:
    14ac:	97 fb       	bst	r25, 7
    14ae:	3e f4       	brtc	.+14     	; 0x14be <__floatsisf+0x12>
    14b0:	90 95       	com	r25
    14b2:	80 95       	com	r24
    14b4:	70 95       	com	r23
    14b6:	61 95       	neg	r22
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	8f 4f       	sbci	r24, 0xFF	; 255
    14bc:	9f 4f       	sbci	r25, 0xFF	; 255
    14be:	99 23       	and	r25, r25
    14c0:	a9 f0       	breq	.+42     	; 0x14ec <__floatsisf+0x40>
    14c2:	f9 2f       	mov	r31, r25
    14c4:	96 e9       	ldi	r25, 0x96	; 150
    14c6:	bb 27       	eor	r27, r27
    14c8:	93 95       	inc	r25
    14ca:	f6 95       	lsr	r31
    14cc:	87 95       	ror	r24
    14ce:	77 95       	ror	r23
    14d0:	67 95       	ror	r22
    14d2:	b7 95       	ror	r27
    14d4:	f1 11       	cpse	r31, r1
    14d6:	f8 cf       	rjmp	.-16     	; 0x14c8 <__floatsisf+0x1c>
    14d8:	fa f4       	brpl	.+62     	; 0x1518 <__floatsisf+0x6c>
    14da:	bb 0f       	add	r27, r27
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <__floatsisf+0x36>
    14de:	60 ff       	sbrs	r22, 0
    14e0:	1b c0       	rjmp	.+54     	; 0x1518 <__floatsisf+0x6c>
    14e2:	6f 5f       	subi	r22, 0xFF	; 255
    14e4:	7f 4f       	sbci	r23, 0xFF	; 255
    14e6:	8f 4f       	sbci	r24, 0xFF	; 255
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	16 c0       	rjmp	.+44     	; 0x1518 <__floatsisf+0x6c>
    14ec:	88 23       	and	r24, r24
    14ee:	11 f0       	breq	.+4      	; 0x14f4 <__floatsisf+0x48>
    14f0:	96 e9       	ldi	r25, 0x96	; 150
    14f2:	11 c0       	rjmp	.+34     	; 0x1516 <__floatsisf+0x6a>
    14f4:	77 23       	and	r23, r23
    14f6:	21 f0       	breq	.+8      	; 0x1500 <__floatsisf+0x54>
    14f8:	9e e8       	ldi	r25, 0x8E	; 142
    14fa:	87 2f       	mov	r24, r23
    14fc:	76 2f       	mov	r23, r22
    14fe:	05 c0       	rjmp	.+10     	; 0x150a <__floatsisf+0x5e>
    1500:	66 23       	and	r22, r22
    1502:	71 f0       	breq	.+28     	; 0x1520 <__floatsisf+0x74>
    1504:	96 e8       	ldi	r25, 0x86	; 134
    1506:	86 2f       	mov	r24, r22
    1508:	70 e0       	ldi	r23, 0x00	; 0
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	2a f0       	brmi	.+10     	; 0x1518 <__floatsisf+0x6c>
    150e:	9a 95       	dec	r25
    1510:	66 0f       	add	r22, r22
    1512:	77 1f       	adc	r23, r23
    1514:	88 1f       	adc	r24, r24
    1516:	da f7       	brpl	.-10     	; 0x150e <__floatsisf+0x62>
    1518:	88 0f       	add	r24, r24
    151a:	96 95       	lsr	r25
    151c:	87 95       	ror	r24
    151e:	97 f9       	bld	r25, 7
    1520:	08 95       	ret

00001522 <__fp_cmp>:
    1522:	99 0f       	add	r25, r25
    1524:	00 08       	sbc	r0, r0
    1526:	55 0f       	add	r21, r21
    1528:	aa 0b       	sbc	r26, r26
    152a:	e0 e8       	ldi	r30, 0x80	; 128
    152c:	fe ef       	ldi	r31, 0xFE	; 254
    152e:	16 16       	cp	r1, r22
    1530:	17 06       	cpc	r1, r23
    1532:	e8 07       	cpc	r30, r24
    1534:	f9 07       	cpc	r31, r25
    1536:	c0 f0       	brcs	.+48     	; 0x1568 <__fp_cmp+0x46>
    1538:	12 16       	cp	r1, r18
    153a:	13 06       	cpc	r1, r19
    153c:	e4 07       	cpc	r30, r20
    153e:	f5 07       	cpc	r31, r21
    1540:	98 f0       	brcs	.+38     	; 0x1568 <__fp_cmp+0x46>
    1542:	62 1b       	sub	r22, r18
    1544:	73 0b       	sbc	r23, r19
    1546:	84 0b       	sbc	r24, r20
    1548:	95 0b       	sbc	r25, r21
    154a:	39 f4       	brne	.+14     	; 0x155a <__fp_cmp+0x38>
    154c:	0a 26       	eor	r0, r26
    154e:	61 f0       	breq	.+24     	; 0x1568 <__fp_cmp+0x46>
    1550:	23 2b       	or	r18, r19
    1552:	24 2b       	or	r18, r20
    1554:	25 2b       	or	r18, r21
    1556:	21 f4       	brne	.+8      	; 0x1560 <__fp_cmp+0x3e>
    1558:	08 95       	ret
    155a:	0a 26       	eor	r0, r26
    155c:	09 f4       	brne	.+2      	; 0x1560 <__fp_cmp+0x3e>
    155e:	a1 40       	sbci	r26, 0x01	; 1
    1560:	a6 95       	lsr	r26
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	81 1d       	adc	r24, r1
    1566:	81 1d       	adc	r24, r1
    1568:	08 95       	ret

0000156a <__fp_inf>:
    156a:	97 f9       	bld	r25, 7
    156c:	9f 67       	ori	r25, 0x7F	; 127
    156e:	80 e8       	ldi	r24, 0x80	; 128
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	08 95       	ret

00001576 <__fp_nan>:
    1576:	9f ef       	ldi	r25, 0xFF	; 255
    1578:	80 ec       	ldi	r24, 0xC0	; 192
    157a:	08 95       	ret

0000157c <__fp_powser>:
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	1f 93       	push	r17
    1582:	0f 93       	push	r16
    1584:	ff 92       	push	r15
    1586:	ef 92       	push	r14
    1588:	df 92       	push	r13
    158a:	7b 01       	movw	r14, r22
    158c:	8c 01       	movw	r16, r24
    158e:	68 94       	set
    1590:	05 c0       	rjmp	.+10     	; 0x159c <__fp_powser+0x20>
    1592:	da 2e       	mov	r13, r26
    1594:	ef 01       	movw	r28, r30
    1596:	72 d0       	rcall	.+228    	; 0x167c <__mulsf3x>
    1598:	fe 01       	movw	r30, r28
    159a:	e8 94       	clt
    159c:	a5 91       	lpm	r26, Z+
    159e:	25 91       	lpm	r18, Z+
    15a0:	35 91       	lpm	r19, Z+
    15a2:	45 91       	lpm	r20, Z+
    15a4:	55 91       	lpm	r21, Z+
    15a6:	ae f3       	brts	.-22     	; 0x1592 <__fp_powser+0x16>
    15a8:	ef 01       	movw	r28, r30
    15aa:	5d de       	rcall	.-838    	; 0x1266 <__addsf3x>
    15ac:	fe 01       	movw	r30, r28
    15ae:	97 01       	movw	r18, r14
    15b0:	a8 01       	movw	r20, r16
    15b2:	da 94       	dec	r13
    15b4:	79 f7       	brne	.-34     	; 0x1594 <__fp_powser+0x18>
    15b6:	df 90       	pop	r13
    15b8:	ef 90       	pop	r14
    15ba:	ff 90       	pop	r15
    15bc:	0f 91       	pop	r16
    15be:	1f 91       	pop	r17
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <__fp_pscA>:
    15c6:	00 24       	eor	r0, r0
    15c8:	0a 94       	dec	r0
    15ca:	16 16       	cp	r1, r22
    15cc:	17 06       	cpc	r1, r23
    15ce:	18 06       	cpc	r1, r24
    15d0:	09 06       	cpc	r0, r25
    15d2:	08 95       	ret

000015d4 <__fp_pscB>:
    15d4:	00 24       	eor	r0, r0
    15d6:	0a 94       	dec	r0
    15d8:	12 16       	cp	r1, r18
    15da:	13 06       	cpc	r1, r19
    15dc:	14 06       	cpc	r1, r20
    15de:	05 06       	cpc	r0, r21
    15e0:	08 95       	ret

000015e2 <__fp_round>:
    15e2:	09 2e       	mov	r0, r25
    15e4:	03 94       	inc	r0
    15e6:	00 0c       	add	r0, r0
    15e8:	11 f4       	brne	.+4      	; 0x15ee <__fp_round+0xc>
    15ea:	88 23       	and	r24, r24
    15ec:	52 f0       	brmi	.+20     	; 0x1602 <__fp_round+0x20>
    15ee:	bb 0f       	add	r27, r27
    15f0:	40 f4       	brcc	.+16     	; 0x1602 <__fp_round+0x20>
    15f2:	bf 2b       	or	r27, r31
    15f4:	11 f4       	brne	.+4      	; 0x15fa <__fp_round+0x18>
    15f6:	60 ff       	sbrs	r22, 0
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__fp_round+0x20>
    15fa:	6f 5f       	subi	r22, 0xFF	; 255
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	08 95       	ret

00001604 <__fp_split3>:
    1604:	57 fd       	sbrc	r21, 7
    1606:	90 58       	subi	r25, 0x80	; 128
    1608:	44 0f       	add	r20, r20
    160a:	55 1f       	adc	r21, r21
    160c:	59 f0       	breq	.+22     	; 0x1624 <__fp_splitA+0x10>
    160e:	5f 3f       	cpi	r21, 0xFF	; 255
    1610:	71 f0       	breq	.+28     	; 0x162e <__fp_splitA+0x1a>
    1612:	47 95       	ror	r20

00001614 <__fp_splitA>:
    1614:	88 0f       	add	r24, r24
    1616:	97 fb       	bst	r25, 7
    1618:	99 1f       	adc	r25, r25
    161a:	61 f0       	breq	.+24     	; 0x1634 <__fp_splitA+0x20>
    161c:	9f 3f       	cpi	r25, 0xFF	; 255
    161e:	79 f0       	breq	.+30     	; 0x163e <__fp_splitA+0x2a>
    1620:	87 95       	ror	r24
    1622:	08 95       	ret
    1624:	12 16       	cp	r1, r18
    1626:	13 06       	cpc	r1, r19
    1628:	14 06       	cpc	r1, r20
    162a:	55 1f       	adc	r21, r21
    162c:	f2 cf       	rjmp	.-28     	; 0x1612 <__fp_split3+0xe>
    162e:	46 95       	lsr	r20
    1630:	f1 df       	rcall	.-30     	; 0x1614 <__fp_splitA>
    1632:	08 c0       	rjmp	.+16     	; 0x1644 <__fp_splitA+0x30>
    1634:	16 16       	cp	r1, r22
    1636:	17 06       	cpc	r1, r23
    1638:	18 06       	cpc	r1, r24
    163a:	99 1f       	adc	r25, r25
    163c:	f1 cf       	rjmp	.-30     	; 0x1620 <__fp_splitA+0xc>
    163e:	86 95       	lsr	r24
    1640:	71 05       	cpc	r23, r1
    1642:	61 05       	cpc	r22, r1
    1644:	08 94       	sec
    1646:	08 95       	ret

00001648 <__fp_zero>:
    1648:	e8 94       	clt

0000164a <__fp_szero>:
    164a:	bb 27       	eor	r27, r27
    164c:	66 27       	eor	r22, r22
    164e:	77 27       	eor	r23, r23
    1650:	cb 01       	movw	r24, r22
    1652:	97 f9       	bld	r25, 7
    1654:	08 95       	ret

00001656 <inverse>:
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	60 e0       	ldi	r22, 0x00	; 0
    165c:	70 e0       	ldi	r23, 0x00	; 0
    165e:	80 e8       	ldi	r24, 0x80	; 128
    1660:	9f e3       	ldi	r25, 0x3F	; 63
    1662:	ba ce       	rjmp	.-652    	; 0x13d8 <__divsf3>

00001664 <__mulsf3>:
    1664:	0b d0       	rcall	.+22     	; 0x167c <__mulsf3x>
    1666:	bd cf       	rjmp	.-134    	; 0x15e2 <__fp_round>
    1668:	ae df       	rcall	.-164    	; 0x15c6 <__fp_pscA>
    166a:	28 f0       	brcs	.+10     	; 0x1676 <__mulsf3+0x12>
    166c:	b3 df       	rcall	.-154    	; 0x15d4 <__fp_pscB>
    166e:	18 f0       	brcs	.+6      	; 0x1676 <__mulsf3+0x12>
    1670:	95 23       	and	r25, r21
    1672:	09 f0       	breq	.+2      	; 0x1676 <__mulsf3+0x12>
    1674:	7a cf       	rjmp	.-268    	; 0x156a <__fp_inf>
    1676:	7f cf       	rjmp	.-258    	; 0x1576 <__fp_nan>
    1678:	11 24       	eor	r1, r1
    167a:	e7 cf       	rjmp	.-50     	; 0x164a <__fp_szero>

0000167c <__mulsf3x>:
    167c:	c3 df       	rcall	.-122    	; 0x1604 <__fp_split3>
    167e:	a0 f3       	brcs	.-24     	; 0x1668 <__mulsf3+0x4>

00001680 <__mulsf3_pse>:
    1680:	95 9f       	mul	r25, r21
    1682:	d1 f3       	breq	.-12     	; 0x1678 <__mulsf3+0x14>
    1684:	95 0f       	add	r25, r21
    1686:	50 e0       	ldi	r21, 0x00	; 0
    1688:	55 1f       	adc	r21, r21
    168a:	62 9f       	mul	r22, r18
    168c:	f0 01       	movw	r30, r0
    168e:	72 9f       	mul	r23, r18
    1690:	bb 27       	eor	r27, r27
    1692:	f0 0d       	add	r31, r0
    1694:	b1 1d       	adc	r27, r1
    1696:	63 9f       	mul	r22, r19
    1698:	aa 27       	eor	r26, r26
    169a:	f0 0d       	add	r31, r0
    169c:	b1 1d       	adc	r27, r1
    169e:	aa 1f       	adc	r26, r26
    16a0:	64 9f       	mul	r22, r20
    16a2:	66 27       	eor	r22, r22
    16a4:	b0 0d       	add	r27, r0
    16a6:	a1 1d       	adc	r26, r1
    16a8:	66 1f       	adc	r22, r22
    16aa:	82 9f       	mul	r24, r18
    16ac:	22 27       	eor	r18, r18
    16ae:	b0 0d       	add	r27, r0
    16b0:	a1 1d       	adc	r26, r1
    16b2:	62 1f       	adc	r22, r18
    16b4:	73 9f       	mul	r23, r19
    16b6:	b0 0d       	add	r27, r0
    16b8:	a1 1d       	adc	r26, r1
    16ba:	62 1f       	adc	r22, r18
    16bc:	83 9f       	mul	r24, r19
    16be:	a0 0d       	add	r26, r0
    16c0:	61 1d       	adc	r22, r1
    16c2:	22 1f       	adc	r18, r18
    16c4:	74 9f       	mul	r23, r20
    16c6:	33 27       	eor	r19, r19
    16c8:	a0 0d       	add	r26, r0
    16ca:	61 1d       	adc	r22, r1
    16cc:	23 1f       	adc	r18, r19
    16ce:	84 9f       	mul	r24, r20
    16d0:	60 0d       	add	r22, r0
    16d2:	21 1d       	adc	r18, r1
    16d4:	82 2f       	mov	r24, r18
    16d6:	76 2f       	mov	r23, r22
    16d8:	6a 2f       	mov	r22, r26
    16da:	11 24       	eor	r1, r1
    16dc:	9f 57       	subi	r25, 0x7F	; 127
    16de:	50 40       	sbci	r21, 0x00	; 0
    16e0:	8a f0       	brmi	.+34     	; 0x1704 <__mulsf3_pse+0x84>
    16e2:	e1 f0       	breq	.+56     	; 0x171c <__mulsf3_pse+0x9c>
    16e4:	88 23       	and	r24, r24
    16e6:	4a f0       	brmi	.+18     	; 0x16fa <__mulsf3_pse+0x7a>
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	bb 1f       	adc	r27, r27
    16ee:	66 1f       	adc	r22, r22
    16f0:	77 1f       	adc	r23, r23
    16f2:	88 1f       	adc	r24, r24
    16f4:	91 50       	subi	r25, 0x01	; 1
    16f6:	50 40       	sbci	r21, 0x00	; 0
    16f8:	a9 f7       	brne	.-22     	; 0x16e4 <__mulsf3_pse+0x64>
    16fa:	9e 3f       	cpi	r25, 0xFE	; 254
    16fc:	51 05       	cpc	r21, r1
    16fe:	70 f0       	brcs	.+28     	; 0x171c <__mulsf3_pse+0x9c>
    1700:	34 cf       	rjmp	.-408    	; 0x156a <__fp_inf>
    1702:	a3 cf       	rjmp	.-186    	; 0x164a <__fp_szero>
    1704:	5f 3f       	cpi	r21, 0xFF	; 255
    1706:	ec f3       	brlt	.-6      	; 0x1702 <__mulsf3_pse+0x82>
    1708:	98 3e       	cpi	r25, 0xE8	; 232
    170a:	dc f3       	brlt	.-10     	; 0x1702 <__mulsf3_pse+0x82>
    170c:	86 95       	lsr	r24
    170e:	77 95       	ror	r23
    1710:	67 95       	ror	r22
    1712:	b7 95       	ror	r27
    1714:	f7 95       	ror	r31
    1716:	e7 95       	ror	r30
    1718:	9f 5f       	subi	r25, 0xFF	; 255
    171a:	c1 f7       	brne	.-16     	; 0x170c <__mulsf3_pse+0x8c>
    171c:	fe 2b       	or	r31, r30
    171e:	88 0f       	add	r24, r24
    1720:	91 1d       	adc	r25, r1
    1722:	96 95       	lsr	r25
    1724:	87 95       	ror	r24
    1726:	97 f9       	bld	r25, 7
    1728:	08 95       	ret

0000172a <square>:
    172a:	9b 01       	movw	r18, r22
    172c:	ac 01       	movw	r20, r24
    172e:	9a cf       	rjmp	.-204    	; 0x1664 <__mulsf3>

00001730 <vsnprintf>:
    1730:	ae e0       	ldi	r26, 0x0E	; 14
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ed e9       	ldi	r30, 0x9D	; 157
    1736:	fb e0       	ldi	r31, 0x0B	; 11
    1738:	b4 c2       	rjmp	.+1384   	; 0x1ca2 <__prologue_saves__+0x1c>
    173a:	8c 01       	movw	r16, r24
    173c:	fa 01       	movw	r30, r20
    173e:	86 e0       	ldi	r24, 0x06	; 6
    1740:	8c 83       	std	Y+4, r24	; 0x04
    1742:	1a 83       	std	Y+2, r17	; 0x02
    1744:	09 83       	std	Y+1, r16	; 0x01
    1746:	77 ff       	sbrs	r23, 7
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vsnprintf+0x1e>
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	70 e8       	ldi	r23, 0x80	; 128
    174e:	cb 01       	movw	r24, r22
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	9e 83       	std	Y+6, r25	; 0x06
    1754:	8d 83       	std	Y+5, r24	; 0x05
    1756:	a9 01       	movw	r20, r18
    1758:	bf 01       	movw	r22, r30
    175a:	ce 01       	movw	r24, r28
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	11 d0       	rcall	.+34     	; 0x1782 <vfprintf>
    1760:	4d 81       	ldd	r20, Y+5	; 0x05
    1762:	5e 81       	ldd	r21, Y+6	; 0x06
    1764:	57 fd       	sbrc	r21, 7
    1766:	0a c0       	rjmp	.+20     	; 0x177c <vsnprintf+0x4c>
    1768:	2f 81       	ldd	r18, Y+7	; 0x07
    176a:	38 85       	ldd	r19, Y+8	; 0x08
    176c:	42 17       	cp	r20, r18
    176e:	53 07       	cpc	r21, r19
    1770:	0c f4       	brge	.+2      	; 0x1774 <vsnprintf+0x44>
    1772:	9a 01       	movw	r18, r20
    1774:	f8 01       	movw	r30, r16
    1776:	e2 0f       	add	r30, r18
    1778:	f3 1f       	adc	r31, r19
    177a:	10 82       	st	Z, r1
    177c:	2e 96       	adiw	r28, 0x0e	; 14
    177e:	e4 e0       	ldi	r30, 0x04	; 4
    1780:	ac c2       	rjmp	.+1368   	; 0x1cda <__epilogue_restores__+0x1c>

00001782 <vfprintf>:
    1782:	ab e0       	ldi	r26, 0x0B	; 11
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e6 ec       	ldi	r30, 0xC6	; 198
    1788:	fb e0       	ldi	r31, 0x0B	; 11
    178a:	7d c2       	rjmp	.+1274   	; 0x1c86 <__prologue_saves__>
    178c:	6c 01       	movw	r12, r24
    178e:	7b 01       	movw	r14, r22
    1790:	8a 01       	movw	r16, r20
    1792:	fc 01       	movw	r30, r24
    1794:	17 82       	std	Z+7, r1	; 0x07
    1796:	16 82       	std	Z+6, r1	; 0x06
    1798:	83 81       	ldd	r24, Z+3	; 0x03
    179a:	81 ff       	sbrs	r24, 1
    179c:	bf c1       	rjmp	.+894    	; 0x1b1c <vfprintf+0x39a>
    179e:	ce 01       	movw	r24, r28
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	3c 01       	movw	r6, r24
    17a4:	f6 01       	movw	r30, r12
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	f7 01       	movw	r30, r14
    17aa:	93 fd       	sbrc	r25, 3
    17ac:	85 91       	lpm	r24, Z+
    17ae:	93 ff       	sbrs	r25, 3
    17b0:	81 91       	ld	r24, Z+
    17b2:	7f 01       	movw	r14, r30
    17b4:	88 23       	and	r24, r24
    17b6:	09 f4       	brne	.+2      	; 0x17ba <vfprintf+0x38>
    17b8:	ad c1       	rjmp	.+858    	; 0x1b14 <vfprintf+0x392>
    17ba:	85 32       	cpi	r24, 0x25	; 37
    17bc:	39 f4       	brne	.+14     	; 0x17cc <vfprintf+0x4a>
    17be:	93 fd       	sbrc	r25, 3
    17c0:	85 91       	lpm	r24, Z+
    17c2:	93 ff       	sbrs	r25, 3
    17c4:	81 91       	ld	r24, Z+
    17c6:	7f 01       	movw	r14, r30
    17c8:	85 32       	cpi	r24, 0x25	; 37
    17ca:	21 f4       	brne	.+8      	; 0x17d4 <vfprintf+0x52>
    17cc:	b6 01       	movw	r22, r12
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	c0 d1       	rcall	.+896    	; 0x1b52 <fputc>
    17d2:	e8 cf       	rjmp	.-48     	; 0x17a4 <vfprintf+0x22>
    17d4:	91 2c       	mov	r9, r1
    17d6:	21 2c       	mov	r2, r1
    17d8:	31 2c       	mov	r3, r1
    17da:	ff e1       	ldi	r31, 0x1F	; 31
    17dc:	f3 15       	cp	r31, r3
    17de:	d8 f0       	brcs	.+54     	; 0x1816 <vfprintf+0x94>
    17e0:	8b 32       	cpi	r24, 0x2B	; 43
    17e2:	79 f0       	breq	.+30     	; 0x1802 <vfprintf+0x80>
    17e4:	38 f4       	brcc	.+14     	; 0x17f4 <vfprintf+0x72>
    17e6:	80 32       	cpi	r24, 0x20	; 32
    17e8:	79 f0       	breq	.+30     	; 0x1808 <vfprintf+0x86>
    17ea:	83 32       	cpi	r24, 0x23	; 35
    17ec:	a1 f4       	brne	.+40     	; 0x1816 <vfprintf+0x94>
    17ee:	23 2d       	mov	r18, r3
    17f0:	20 61       	ori	r18, 0x10	; 16
    17f2:	1d c0       	rjmp	.+58     	; 0x182e <vfprintf+0xac>
    17f4:	8d 32       	cpi	r24, 0x2D	; 45
    17f6:	61 f0       	breq	.+24     	; 0x1810 <vfprintf+0x8e>
    17f8:	80 33       	cpi	r24, 0x30	; 48
    17fa:	69 f4       	brne	.+26     	; 0x1816 <vfprintf+0x94>
    17fc:	23 2d       	mov	r18, r3
    17fe:	21 60       	ori	r18, 0x01	; 1
    1800:	16 c0       	rjmp	.+44     	; 0x182e <vfprintf+0xac>
    1802:	83 2d       	mov	r24, r3
    1804:	82 60       	ori	r24, 0x02	; 2
    1806:	38 2e       	mov	r3, r24
    1808:	e3 2d       	mov	r30, r3
    180a:	e4 60       	ori	r30, 0x04	; 4
    180c:	3e 2e       	mov	r3, r30
    180e:	2a c0       	rjmp	.+84     	; 0x1864 <vfprintf+0xe2>
    1810:	f3 2d       	mov	r31, r3
    1812:	f8 60       	ori	r31, 0x08	; 8
    1814:	1d c0       	rjmp	.+58     	; 0x1850 <vfprintf+0xce>
    1816:	37 fc       	sbrc	r3, 7
    1818:	2d c0       	rjmp	.+90     	; 0x1874 <vfprintf+0xf2>
    181a:	20 ed       	ldi	r18, 0xD0	; 208
    181c:	28 0f       	add	r18, r24
    181e:	2a 30       	cpi	r18, 0x0A	; 10
    1820:	40 f0       	brcs	.+16     	; 0x1832 <vfprintf+0xb0>
    1822:	8e 32       	cpi	r24, 0x2E	; 46
    1824:	b9 f4       	brne	.+46     	; 0x1854 <vfprintf+0xd2>
    1826:	36 fc       	sbrc	r3, 6
    1828:	75 c1       	rjmp	.+746    	; 0x1b14 <vfprintf+0x392>
    182a:	23 2d       	mov	r18, r3
    182c:	20 64       	ori	r18, 0x40	; 64
    182e:	32 2e       	mov	r3, r18
    1830:	19 c0       	rjmp	.+50     	; 0x1864 <vfprintf+0xe2>
    1832:	36 fe       	sbrs	r3, 6
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <vfprintf+0xc0>
    1836:	8a e0       	ldi	r24, 0x0A	; 10
    1838:	98 9e       	mul	r9, r24
    183a:	20 0d       	add	r18, r0
    183c:	11 24       	eor	r1, r1
    183e:	92 2e       	mov	r9, r18
    1840:	11 c0       	rjmp	.+34     	; 0x1864 <vfprintf+0xe2>
    1842:	ea e0       	ldi	r30, 0x0A	; 10
    1844:	2e 9e       	mul	r2, r30
    1846:	20 0d       	add	r18, r0
    1848:	11 24       	eor	r1, r1
    184a:	22 2e       	mov	r2, r18
    184c:	f3 2d       	mov	r31, r3
    184e:	f0 62       	ori	r31, 0x20	; 32
    1850:	3f 2e       	mov	r3, r31
    1852:	08 c0       	rjmp	.+16     	; 0x1864 <vfprintf+0xe2>
    1854:	8c 36       	cpi	r24, 0x6C	; 108
    1856:	21 f4       	brne	.+8      	; 0x1860 <vfprintf+0xde>
    1858:	83 2d       	mov	r24, r3
    185a:	80 68       	ori	r24, 0x80	; 128
    185c:	38 2e       	mov	r3, r24
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <vfprintf+0xe2>
    1860:	88 36       	cpi	r24, 0x68	; 104
    1862:	41 f4       	brne	.+16     	; 0x1874 <vfprintf+0xf2>
    1864:	f7 01       	movw	r30, r14
    1866:	93 fd       	sbrc	r25, 3
    1868:	85 91       	lpm	r24, Z+
    186a:	93 ff       	sbrs	r25, 3
    186c:	81 91       	ld	r24, Z+
    186e:	7f 01       	movw	r14, r30
    1870:	81 11       	cpse	r24, r1
    1872:	b3 cf       	rjmp	.-154    	; 0x17da <vfprintf+0x58>
    1874:	98 2f       	mov	r25, r24
    1876:	9f 7d       	andi	r25, 0xDF	; 223
    1878:	95 54       	subi	r25, 0x45	; 69
    187a:	93 30       	cpi	r25, 0x03	; 3
    187c:	28 f4       	brcc	.+10     	; 0x1888 <vfprintf+0x106>
    187e:	0c 5f       	subi	r16, 0xFC	; 252
    1880:	1f 4f       	sbci	r17, 0xFF	; 255
    1882:	9f e3       	ldi	r25, 0x3F	; 63
    1884:	99 83       	std	Y+1, r25	; 0x01
    1886:	0d c0       	rjmp	.+26     	; 0x18a2 <vfprintf+0x120>
    1888:	83 36       	cpi	r24, 0x63	; 99
    188a:	31 f0       	breq	.+12     	; 0x1898 <vfprintf+0x116>
    188c:	83 37       	cpi	r24, 0x73	; 115
    188e:	71 f0       	breq	.+28     	; 0x18ac <vfprintf+0x12a>
    1890:	83 35       	cpi	r24, 0x53	; 83
    1892:	09 f0       	breq	.+2      	; 0x1896 <vfprintf+0x114>
    1894:	55 c0       	rjmp	.+170    	; 0x1940 <vfprintf+0x1be>
    1896:	20 c0       	rjmp	.+64     	; 0x18d8 <vfprintf+0x156>
    1898:	f8 01       	movw	r30, r16
    189a:	80 81       	ld	r24, Z
    189c:	89 83       	std	Y+1, r24	; 0x01
    189e:	0e 5f       	subi	r16, 0xFE	; 254
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	88 24       	eor	r8, r8
    18a4:	83 94       	inc	r8
    18a6:	91 2c       	mov	r9, r1
    18a8:	53 01       	movw	r10, r6
    18aa:	12 c0       	rjmp	.+36     	; 0x18d0 <vfprintf+0x14e>
    18ac:	28 01       	movw	r4, r16
    18ae:	f2 e0       	ldi	r31, 0x02	; 2
    18b0:	4f 0e       	add	r4, r31
    18b2:	51 1c       	adc	r5, r1
    18b4:	f8 01       	movw	r30, r16
    18b6:	a0 80       	ld	r10, Z
    18b8:	b1 80       	ldd	r11, Z+1	; 0x01
    18ba:	36 fe       	sbrs	r3, 6
    18bc:	03 c0       	rjmp	.+6      	; 0x18c4 <vfprintf+0x142>
    18be:	69 2d       	mov	r22, r9
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <vfprintf+0x146>
    18c4:	6f ef       	ldi	r22, 0xFF	; 255
    18c6:	7f ef       	ldi	r23, 0xFF	; 255
    18c8:	c5 01       	movw	r24, r10
    18ca:	38 d1       	rcall	.+624    	; 0x1b3c <strnlen>
    18cc:	4c 01       	movw	r8, r24
    18ce:	82 01       	movw	r16, r4
    18d0:	f3 2d       	mov	r31, r3
    18d2:	ff 77       	andi	r31, 0x7F	; 127
    18d4:	3f 2e       	mov	r3, r31
    18d6:	15 c0       	rjmp	.+42     	; 0x1902 <vfprintf+0x180>
    18d8:	28 01       	movw	r4, r16
    18da:	22 e0       	ldi	r18, 0x02	; 2
    18dc:	42 0e       	add	r4, r18
    18de:	51 1c       	adc	r5, r1
    18e0:	f8 01       	movw	r30, r16
    18e2:	a0 80       	ld	r10, Z
    18e4:	b1 80       	ldd	r11, Z+1	; 0x01
    18e6:	36 fe       	sbrs	r3, 6
    18e8:	03 c0       	rjmp	.+6      	; 0x18f0 <vfprintf+0x16e>
    18ea:	69 2d       	mov	r22, r9
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	02 c0       	rjmp	.+4      	; 0x18f4 <vfprintf+0x172>
    18f0:	6f ef       	ldi	r22, 0xFF	; 255
    18f2:	7f ef       	ldi	r23, 0xFF	; 255
    18f4:	c5 01       	movw	r24, r10
    18f6:	17 d1       	rcall	.+558    	; 0x1b26 <strnlen_P>
    18f8:	4c 01       	movw	r8, r24
    18fa:	f3 2d       	mov	r31, r3
    18fc:	f0 68       	ori	r31, 0x80	; 128
    18fe:	3f 2e       	mov	r3, r31
    1900:	82 01       	movw	r16, r4
    1902:	33 fc       	sbrc	r3, 3
    1904:	19 c0       	rjmp	.+50     	; 0x1938 <vfprintf+0x1b6>
    1906:	82 2d       	mov	r24, r2
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	88 16       	cp	r8, r24
    190c:	99 06       	cpc	r9, r25
    190e:	a0 f4       	brcc	.+40     	; 0x1938 <vfprintf+0x1b6>
    1910:	b6 01       	movw	r22, r12
    1912:	80 e2       	ldi	r24, 0x20	; 32
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	1d d1       	rcall	.+570    	; 0x1b52 <fputc>
    1918:	2a 94       	dec	r2
    191a:	f5 cf       	rjmp	.-22     	; 0x1906 <vfprintf+0x184>
    191c:	f5 01       	movw	r30, r10
    191e:	37 fc       	sbrc	r3, 7
    1920:	85 91       	lpm	r24, Z+
    1922:	37 fe       	sbrs	r3, 7
    1924:	81 91       	ld	r24, Z+
    1926:	5f 01       	movw	r10, r30
    1928:	b6 01       	movw	r22, r12
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	12 d1       	rcall	.+548    	; 0x1b52 <fputc>
    192e:	21 10       	cpse	r2, r1
    1930:	2a 94       	dec	r2
    1932:	21 e0       	ldi	r18, 0x01	; 1
    1934:	82 1a       	sub	r8, r18
    1936:	91 08       	sbc	r9, r1
    1938:	81 14       	cp	r8, r1
    193a:	91 04       	cpc	r9, r1
    193c:	79 f7       	brne	.-34     	; 0x191c <vfprintf+0x19a>
    193e:	e1 c0       	rjmp	.+450    	; 0x1b02 <vfprintf+0x380>
    1940:	84 36       	cpi	r24, 0x64	; 100
    1942:	11 f0       	breq	.+4      	; 0x1948 <vfprintf+0x1c6>
    1944:	89 36       	cpi	r24, 0x69	; 105
    1946:	39 f5       	brne	.+78     	; 0x1996 <vfprintf+0x214>
    1948:	f8 01       	movw	r30, r16
    194a:	37 fe       	sbrs	r3, 7
    194c:	07 c0       	rjmp	.+14     	; 0x195c <vfprintf+0x1da>
    194e:	60 81       	ld	r22, Z
    1950:	71 81       	ldd	r23, Z+1	; 0x01
    1952:	82 81       	ldd	r24, Z+2	; 0x02
    1954:	93 81       	ldd	r25, Z+3	; 0x03
    1956:	0c 5f       	subi	r16, 0xFC	; 252
    1958:	1f 4f       	sbci	r17, 0xFF	; 255
    195a:	08 c0       	rjmp	.+16     	; 0x196c <vfprintf+0x1ea>
    195c:	60 81       	ld	r22, Z
    195e:	71 81       	ldd	r23, Z+1	; 0x01
    1960:	07 2e       	mov	r0, r23
    1962:	00 0c       	add	r0, r0
    1964:	88 0b       	sbc	r24, r24
    1966:	99 0b       	sbc	r25, r25
    1968:	0e 5f       	subi	r16, 0xFE	; 254
    196a:	1f 4f       	sbci	r17, 0xFF	; 255
    196c:	f3 2d       	mov	r31, r3
    196e:	ff 76       	andi	r31, 0x6F	; 111
    1970:	3f 2e       	mov	r3, r31
    1972:	97 ff       	sbrs	r25, 7
    1974:	09 c0       	rjmp	.+18     	; 0x1988 <vfprintf+0x206>
    1976:	90 95       	com	r25
    1978:	80 95       	com	r24
    197a:	70 95       	com	r23
    197c:	61 95       	neg	r22
    197e:	7f 4f       	sbci	r23, 0xFF	; 255
    1980:	8f 4f       	sbci	r24, 0xFF	; 255
    1982:	9f 4f       	sbci	r25, 0xFF	; 255
    1984:	f0 68       	ori	r31, 0x80	; 128
    1986:	3f 2e       	mov	r3, r31
    1988:	2a e0       	ldi	r18, 0x0A	; 10
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	a3 01       	movw	r20, r6
    198e:	1d d1       	rcall	.+570    	; 0x1bca <__ultoa_invert>
    1990:	88 2e       	mov	r8, r24
    1992:	86 18       	sub	r8, r6
    1994:	44 c0       	rjmp	.+136    	; 0x1a1e <vfprintf+0x29c>
    1996:	85 37       	cpi	r24, 0x75	; 117
    1998:	31 f4       	brne	.+12     	; 0x19a6 <vfprintf+0x224>
    199a:	23 2d       	mov	r18, r3
    199c:	2f 7e       	andi	r18, 0xEF	; 239
    199e:	b2 2e       	mov	r11, r18
    19a0:	2a e0       	ldi	r18, 0x0A	; 10
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	25 c0       	rjmp	.+74     	; 0x19f0 <vfprintf+0x26e>
    19a6:	93 2d       	mov	r25, r3
    19a8:	99 7f       	andi	r25, 0xF9	; 249
    19aa:	b9 2e       	mov	r11, r25
    19ac:	8f 36       	cpi	r24, 0x6F	; 111
    19ae:	c1 f0       	breq	.+48     	; 0x19e0 <vfprintf+0x25e>
    19b0:	18 f4       	brcc	.+6      	; 0x19b8 <vfprintf+0x236>
    19b2:	88 35       	cpi	r24, 0x58	; 88
    19b4:	79 f0       	breq	.+30     	; 0x19d4 <vfprintf+0x252>
    19b6:	ae c0       	rjmp	.+348    	; 0x1b14 <vfprintf+0x392>
    19b8:	80 37       	cpi	r24, 0x70	; 112
    19ba:	19 f0       	breq	.+6      	; 0x19c2 <vfprintf+0x240>
    19bc:	88 37       	cpi	r24, 0x78	; 120
    19be:	21 f0       	breq	.+8      	; 0x19c8 <vfprintf+0x246>
    19c0:	a9 c0       	rjmp	.+338    	; 0x1b14 <vfprintf+0x392>
    19c2:	e9 2f       	mov	r30, r25
    19c4:	e0 61       	ori	r30, 0x10	; 16
    19c6:	be 2e       	mov	r11, r30
    19c8:	b4 fe       	sbrs	r11, 4
    19ca:	0d c0       	rjmp	.+26     	; 0x19e6 <vfprintf+0x264>
    19cc:	fb 2d       	mov	r31, r11
    19ce:	f4 60       	ori	r31, 0x04	; 4
    19d0:	bf 2e       	mov	r11, r31
    19d2:	09 c0       	rjmp	.+18     	; 0x19e6 <vfprintf+0x264>
    19d4:	34 fe       	sbrs	r3, 4
    19d6:	0a c0       	rjmp	.+20     	; 0x19ec <vfprintf+0x26a>
    19d8:	29 2f       	mov	r18, r25
    19da:	26 60       	ori	r18, 0x06	; 6
    19dc:	b2 2e       	mov	r11, r18
    19de:	06 c0       	rjmp	.+12     	; 0x19ec <vfprintf+0x26a>
    19e0:	28 e0       	ldi	r18, 0x08	; 8
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <vfprintf+0x26e>
    19e6:	20 e1       	ldi	r18, 0x10	; 16
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <vfprintf+0x26e>
    19ec:	20 e1       	ldi	r18, 0x10	; 16
    19ee:	32 e0       	ldi	r19, 0x02	; 2
    19f0:	f8 01       	movw	r30, r16
    19f2:	b7 fe       	sbrs	r11, 7
    19f4:	07 c0       	rjmp	.+14     	; 0x1a04 <vfprintf+0x282>
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	93 81       	ldd	r25, Z+3	; 0x03
    19fe:	0c 5f       	subi	r16, 0xFC	; 252
    1a00:	1f 4f       	sbci	r17, 0xFF	; 255
    1a02:	06 c0       	rjmp	.+12     	; 0x1a10 <vfprintf+0x28e>
    1a04:	60 81       	ld	r22, Z
    1a06:	71 81       	ldd	r23, Z+1	; 0x01
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 5f       	subi	r16, 0xFE	; 254
    1a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a10:	a3 01       	movw	r20, r6
    1a12:	db d0       	rcall	.+438    	; 0x1bca <__ultoa_invert>
    1a14:	88 2e       	mov	r8, r24
    1a16:	86 18       	sub	r8, r6
    1a18:	fb 2d       	mov	r31, r11
    1a1a:	ff 77       	andi	r31, 0x7F	; 127
    1a1c:	3f 2e       	mov	r3, r31
    1a1e:	36 fe       	sbrs	r3, 6
    1a20:	0d c0       	rjmp	.+26     	; 0x1a3c <vfprintf+0x2ba>
    1a22:	23 2d       	mov	r18, r3
    1a24:	2e 7f       	andi	r18, 0xFE	; 254
    1a26:	a2 2e       	mov	r10, r18
    1a28:	89 14       	cp	r8, r9
    1a2a:	58 f4       	brcc	.+22     	; 0x1a42 <vfprintf+0x2c0>
    1a2c:	34 fe       	sbrs	r3, 4
    1a2e:	0b c0       	rjmp	.+22     	; 0x1a46 <vfprintf+0x2c4>
    1a30:	32 fc       	sbrc	r3, 2
    1a32:	09 c0       	rjmp	.+18     	; 0x1a46 <vfprintf+0x2c4>
    1a34:	83 2d       	mov	r24, r3
    1a36:	8e 7e       	andi	r24, 0xEE	; 238
    1a38:	a8 2e       	mov	r10, r24
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <vfprintf+0x2c4>
    1a3c:	b8 2c       	mov	r11, r8
    1a3e:	a3 2c       	mov	r10, r3
    1a40:	03 c0       	rjmp	.+6      	; 0x1a48 <vfprintf+0x2c6>
    1a42:	b8 2c       	mov	r11, r8
    1a44:	01 c0       	rjmp	.+2      	; 0x1a48 <vfprintf+0x2c6>
    1a46:	b9 2c       	mov	r11, r9
    1a48:	a4 fe       	sbrs	r10, 4
    1a4a:	0f c0       	rjmp	.+30     	; 0x1a6a <vfprintf+0x2e8>
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	e8 0d       	add	r30, r8
    1a50:	f1 1d       	adc	r31, r1
    1a52:	80 81       	ld	r24, Z
    1a54:	80 33       	cpi	r24, 0x30	; 48
    1a56:	21 f4       	brne	.+8      	; 0x1a60 <vfprintf+0x2de>
    1a58:	9a 2d       	mov	r25, r10
    1a5a:	99 7e       	andi	r25, 0xE9	; 233
    1a5c:	a9 2e       	mov	r10, r25
    1a5e:	09 c0       	rjmp	.+18     	; 0x1a72 <vfprintf+0x2f0>
    1a60:	a2 fe       	sbrs	r10, 2
    1a62:	06 c0       	rjmp	.+12     	; 0x1a70 <vfprintf+0x2ee>
    1a64:	b3 94       	inc	r11
    1a66:	b3 94       	inc	r11
    1a68:	04 c0       	rjmp	.+8      	; 0x1a72 <vfprintf+0x2f0>
    1a6a:	8a 2d       	mov	r24, r10
    1a6c:	86 78       	andi	r24, 0x86	; 134
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <vfprintf+0x2f0>
    1a70:	b3 94       	inc	r11
    1a72:	a3 fc       	sbrc	r10, 3
    1a74:	10 c0       	rjmp	.+32     	; 0x1a96 <vfprintf+0x314>
    1a76:	a0 fe       	sbrs	r10, 0
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <vfprintf+0x304>
    1a7a:	b2 14       	cp	r11, r2
    1a7c:	80 f4       	brcc	.+32     	; 0x1a9e <vfprintf+0x31c>
    1a7e:	28 0c       	add	r2, r8
    1a80:	92 2c       	mov	r9, r2
    1a82:	9b 18       	sub	r9, r11
    1a84:	0d c0       	rjmp	.+26     	; 0x1aa0 <vfprintf+0x31e>
    1a86:	b2 14       	cp	r11, r2
    1a88:	58 f4       	brcc	.+22     	; 0x1aa0 <vfprintf+0x31e>
    1a8a:	b6 01       	movw	r22, r12
    1a8c:	80 e2       	ldi	r24, 0x20	; 32
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	60 d0       	rcall	.+192    	; 0x1b52 <fputc>
    1a92:	b3 94       	inc	r11
    1a94:	f8 cf       	rjmp	.-16     	; 0x1a86 <vfprintf+0x304>
    1a96:	b2 14       	cp	r11, r2
    1a98:	18 f4       	brcc	.+6      	; 0x1aa0 <vfprintf+0x31e>
    1a9a:	2b 18       	sub	r2, r11
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <vfprintf+0x320>
    1a9e:	98 2c       	mov	r9, r8
    1aa0:	21 2c       	mov	r2, r1
    1aa2:	a4 fe       	sbrs	r10, 4
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <vfprintf+0x342>
    1aa6:	b6 01       	movw	r22, r12
    1aa8:	80 e3       	ldi	r24, 0x30	; 48
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	52 d0       	rcall	.+164    	; 0x1b52 <fputc>
    1aae:	a2 fe       	sbrs	r10, 2
    1ab0:	16 c0       	rjmp	.+44     	; 0x1ade <vfprintf+0x35c>
    1ab2:	a1 fc       	sbrc	r10, 1
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <vfprintf+0x33a>
    1ab6:	88 e7       	ldi	r24, 0x78	; 120
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <vfprintf+0x33e>
    1abc:	88 e5       	ldi	r24, 0x58	; 88
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	b6 01       	movw	r22, r12
    1ac2:	0c c0       	rjmp	.+24     	; 0x1adc <vfprintf+0x35a>
    1ac4:	8a 2d       	mov	r24, r10
    1ac6:	86 78       	andi	r24, 0x86	; 134
    1ac8:	51 f0       	breq	.+20     	; 0x1ade <vfprintf+0x35c>
    1aca:	a1 fe       	sbrs	r10, 1
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <vfprintf+0x350>
    1ace:	8b e2       	ldi	r24, 0x2B	; 43
    1ad0:	01 c0       	rjmp	.+2      	; 0x1ad4 <vfprintf+0x352>
    1ad2:	80 e2       	ldi	r24, 0x20	; 32
    1ad4:	a7 fc       	sbrc	r10, 7
    1ad6:	8d e2       	ldi	r24, 0x2D	; 45
    1ad8:	b6 01       	movw	r22, r12
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	3a d0       	rcall	.+116    	; 0x1b52 <fputc>
    1ade:	89 14       	cp	r8, r9
    1ae0:	30 f4       	brcc	.+12     	; 0x1aee <vfprintf+0x36c>
    1ae2:	b6 01       	movw	r22, r12
    1ae4:	80 e3       	ldi	r24, 0x30	; 48
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	34 d0       	rcall	.+104    	; 0x1b52 <fputc>
    1aea:	9a 94       	dec	r9
    1aec:	f8 cf       	rjmp	.-16     	; 0x1ade <vfprintf+0x35c>
    1aee:	8a 94       	dec	r8
    1af0:	f3 01       	movw	r30, r6
    1af2:	e8 0d       	add	r30, r8
    1af4:	f1 1d       	adc	r31, r1
    1af6:	80 81       	ld	r24, Z
    1af8:	b6 01       	movw	r22, r12
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	2a d0       	rcall	.+84     	; 0x1b52 <fputc>
    1afe:	81 10       	cpse	r8, r1
    1b00:	f6 cf       	rjmp	.-20     	; 0x1aee <vfprintf+0x36c>
    1b02:	22 20       	and	r2, r2
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <vfprintf+0x386>
    1b06:	4e ce       	rjmp	.-868    	; 0x17a4 <vfprintf+0x22>
    1b08:	b6 01       	movw	r22, r12
    1b0a:	80 e2       	ldi	r24, 0x20	; 32
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	21 d0       	rcall	.+66     	; 0x1b52 <fputc>
    1b10:	2a 94       	dec	r2
    1b12:	f7 cf       	rjmp	.-18     	; 0x1b02 <vfprintf+0x380>
    1b14:	f6 01       	movw	r30, r12
    1b16:	86 81       	ldd	r24, Z+6	; 0x06
    1b18:	97 81       	ldd	r25, Z+7	; 0x07
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <vfprintf+0x39e>
    1b1c:	8f ef       	ldi	r24, 0xFF	; 255
    1b1e:	9f ef       	ldi	r25, 0xFF	; 255
    1b20:	2b 96       	adiw	r28, 0x0b	; 11
    1b22:	e2 e1       	ldi	r30, 0x12	; 18
    1b24:	cc c0       	rjmp	.+408    	; 0x1cbe <__epilogue_restores__>

00001b26 <strnlen_P>:
    1b26:	fc 01       	movw	r30, r24
    1b28:	05 90       	lpm	r0, Z+
    1b2a:	61 50       	subi	r22, 0x01	; 1
    1b2c:	70 40       	sbci	r23, 0x00	; 0
    1b2e:	01 10       	cpse	r0, r1
    1b30:	d8 f7       	brcc	.-10     	; 0x1b28 <strnlen_P+0x2>
    1b32:	80 95       	com	r24
    1b34:	90 95       	com	r25
    1b36:	8e 0f       	add	r24, r30
    1b38:	9f 1f       	adc	r25, r31
    1b3a:	08 95       	ret

00001b3c <strnlen>:
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	61 50       	subi	r22, 0x01	; 1
    1b40:	70 40       	sbci	r23, 0x00	; 0
    1b42:	01 90       	ld	r0, Z+
    1b44:	01 10       	cpse	r0, r1
    1b46:	d8 f7       	brcc	.-10     	; 0x1b3e <strnlen+0x2>
    1b48:	80 95       	com	r24
    1b4a:	90 95       	com	r25
    1b4c:	8e 0f       	add	r24, r30
    1b4e:	9f 1f       	adc	r25, r31
    1b50:	08 95       	ret

00001b52 <fputc>:
    1b52:	0f 93       	push	r16
    1b54:	1f 93       	push	r17
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	fb 01       	movw	r30, r22
    1b5c:	23 81       	ldd	r18, Z+3	; 0x03
    1b5e:	21 fd       	sbrc	r18, 1
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <fputc+0x16>
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	9f ef       	ldi	r25, 0xFF	; 255
    1b66:	2c c0       	rjmp	.+88     	; 0x1bc0 <fputc+0x6e>
    1b68:	22 ff       	sbrs	r18, 2
    1b6a:	16 c0       	rjmp	.+44     	; 0x1b98 <fputc+0x46>
    1b6c:	46 81       	ldd	r20, Z+6	; 0x06
    1b6e:	57 81       	ldd	r21, Z+7	; 0x07
    1b70:	24 81       	ldd	r18, Z+4	; 0x04
    1b72:	35 81       	ldd	r19, Z+5	; 0x05
    1b74:	42 17       	cp	r20, r18
    1b76:	53 07       	cpc	r21, r19
    1b78:	44 f4       	brge	.+16     	; 0x1b8a <fputc+0x38>
    1b7a:	a0 81       	ld	r26, Z
    1b7c:	b1 81       	ldd	r27, Z+1	; 0x01
    1b7e:	9d 01       	movw	r18, r26
    1b80:	2f 5f       	subi	r18, 0xFF	; 255
    1b82:	3f 4f       	sbci	r19, 0xFF	; 255
    1b84:	31 83       	std	Z+1, r19	; 0x01
    1b86:	20 83       	st	Z, r18
    1b88:	8c 93       	st	X, r24
    1b8a:	26 81       	ldd	r18, Z+6	; 0x06
    1b8c:	37 81       	ldd	r19, Z+7	; 0x07
    1b8e:	2f 5f       	subi	r18, 0xFF	; 255
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	37 83       	std	Z+7, r19	; 0x07
    1b94:	26 83       	std	Z+6, r18	; 0x06
    1b96:	14 c0       	rjmp	.+40     	; 0x1bc0 <fputc+0x6e>
    1b98:	8b 01       	movw	r16, r22
    1b9a:	ec 01       	movw	r28, r24
    1b9c:	fb 01       	movw	r30, r22
    1b9e:	00 84       	ldd	r0, Z+8	; 0x08
    1ba0:	f1 85       	ldd	r31, Z+9	; 0x09
    1ba2:	e0 2d       	mov	r30, r0
    1ba4:	09 95       	icall
    1ba6:	89 2b       	or	r24, r25
    1ba8:	e1 f6       	brne	.-72     	; 0x1b62 <fputc+0x10>
    1baa:	d8 01       	movw	r26, r16
    1bac:	16 96       	adiw	r26, 0x06	; 6
    1bae:	8d 91       	ld	r24, X+
    1bb0:	9c 91       	ld	r25, X
    1bb2:	17 97       	sbiw	r26, 0x07	; 7
    1bb4:	01 96       	adiw	r24, 0x01	; 1
    1bb6:	17 96       	adiw	r26, 0x07	; 7
    1bb8:	9c 93       	st	X, r25
    1bba:	8e 93       	st	-X, r24
    1bbc:	16 97       	sbiw	r26, 0x06	; 6
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	df 91       	pop	r29
    1bc2:	cf 91       	pop	r28
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <__ultoa_invert>:
    1bca:	fa 01       	movw	r30, r20
    1bcc:	aa 27       	eor	r26, r26
    1bce:	28 30       	cpi	r18, 0x08	; 8
    1bd0:	51 f1       	breq	.+84     	; 0x1c26 <__ultoa_invert+0x5c>
    1bd2:	20 31       	cpi	r18, 0x10	; 16
    1bd4:	81 f1       	breq	.+96     	; 0x1c36 <__ultoa_invert+0x6c>
    1bd6:	e8 94       	clt
    1bd8:	6f 93       	push	r22
    1bda:	6e 7f       	andi	r22, 0xFE	; 254
    1bdc:	6e 5f       	subi	r22, 0xFE	; 254
    1bde:	7f 4f       	sbci	r23, 0xFF	; 255
    1be0:	8f 4f       	sbci	r24, 0xFF	; 255
    1be2:	9f 4f       	sbci	r25, 0xFF	; 255
    1be4:	af 4f       	sbci	r26, 0xFF	; 255
    1be6:	b1 e0       	ldi	r27, 0x01	; 1
    1be8:	3e d0       	rcall	.+124    	; 0x1c66 <__ultoa_invert+0x9c>
    1bea:	b4 e0       	ldi	r27, 0x04	; 4
    1bec:	3c d0       	rcall	.+120    	; 0x1c66 <__ultoa_invert+0x9c>
    1bee:	67 0f       	add	r22, r23
    1bf0:	78 1f       	adc	r23, r24
    1bf2:	89 1f       	adc	r24, r25
    1bf4:	9a 1f       	adc	r25, r26
    1bf6:	a1 1d       	adc	r26, r1
    1bf8:	68 0f       	add	r22, r24
    1bfa:	79 1f       	adc	r23, r25
    1bfc:	8a 1f       	adc	r24, r26
    1bfe:	91 1d       	adc	r25, r1
    1c00:	a1 1d       	adc	r26, r1
    1c02:	6a 0f       	add	r22, r26
    1c04:	71 1d       	adc	r23, r1
    1c06:	81 1d       	adc	r24, r1
    1c08:	91 1d       	adc	r25, r1
    1c0a:	a1 1d       	adc	r26, r1
    1c0c:	20 d0       	rcall	.+64     	; 0x1c4e <__ultoa_invert+0x84>
    1c0e:	09 f4       	brne	.+2      	; 0x1c12 <__ultoa_invert+0x48>
    1c10:	68 94       	set
    1c12:	3f 91       	pop	r19
    1c14:	2a e0       	ldi	r18, 0x0A	; 10
    1c16:	26 9f       	mul	r18, r22
    1c18:	11 24       	eor	r1, r1
    1c1a:	30 19       	sub	r19, r0
    1c1c:	30 5d       	subi	r19, 0xD0	; 208
    1c1e:	31 93       	st	Z+, r19
    1c20:	de f6       	brtc	.-74     	; 0x1bd8 <__ultoa_invert+0xe>
    1c22:	cf 01       	movw	r24, r30
    1c24:	08 95       	ret
    1c26:	46 2f       	mov	r20, r22
    1c28:	47 70       	andi	r20, 0x07	; 7
    1c2a:	40 5d       	subi	r20, 0xD0	; 208
    1c2c:	41 93       	st	Z+, r20
    1c2e:	b3 e0       	ldi	r27, 0x03	; 3
    1c30:	0f d0       	rcall	.+30     	; 0x1c50 <__ultoa_invert+0x86>
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <__ultoa_invert+0x5c>
    1c34:	f6 cf       	rjmp	.-20     	; 0x1c22 <__ultoa_invert+0x58>
    1c36:	46 2f       	mov	r20, r22
    1c38:	4f 70       	andi	r20, 0x0F	; 15
    1c3a:	40 5d       	subi	r20, 0xD0	; 208
    1c3c:	4a 33       	cpi	r20, 0x3A	; 58
    1c3e:	18 f0       	brcs	.+6      	; 0x1c46 <__ultoa_invert+0x7c>
    1c40:	49 5d       	subi	r20, 0xD9	; 217
    1c42:	31 fd       	sbrc	r19, 1
    1c44:	40 52       	subi	r20, 0x20	; 32
    1c46:	41 93       	st	Z+, r20
    1c48:	02 d0       	rcall	.+4      	; 0x1c4e <__ultoa_invert+0x84>
    1c4a:	a9 f7       	brne	.-22     	; 0x1c36 <__ultoa_invert+0x6c>
    1c4c:	ea cf       	rjmp	.-44     	; 0x1c22 <__ultoa_invert+0x58>
    1c4e:	b4 e0       	ldi	r27, 0x04	; 4
    1c50:	a6 95       	lsr	r26
    1c52:	97 95       	ror	r25
    1c54:	87 95       	ror	r24
    1c56:	77 95       	ror	r23
    1c58:	67 95       	ror	r22
    1c5a:	ba 95       	dec	r27
    1c5c:	c9 f7       	brne	.-14     	; 0x1c50 <__ultoa_invert+0x86>
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	61 05       	cpc	r22, r1
    1c62:	71 05       	cpc	r23, r1
    1c64:	08 95       	ret
    1c66:	9b 01       	movw	r18, r22
    1c68:	ac 01       	movw	r20, r24
    1c6a:	0a 2e       	mov	r0, r26
    1c6c:	06 94       	lsr	r0
    1c6e:	57 95       	ror	r21
    1c70:	47 95       	ror	r20
    1c72:	37 95       	ror	r19
    1c74:	27 95       	ror	r18
    1c76:	ba 95       	dec	r27
    1c78:	c9 f7       	brne	.-14     	; 0x1c6c <__ultoa_invert+0xa2>
    1c7a:	62 0f       	add	r22, r18
    1c7c:	73 1f       	adc	r23, r19
    1c7e:	84 1f       	adc	r24, r20
    1c80:	95 1f       	adc	r25, r21
    1c82:	a0 1d       	adc	r26, r0
    1c84:	08 95       	ret

00001c86 <__prologue_saves__>:
    1c86:	2f 92       	push	r2
    1c88:	3f 92       	push	r3
    1c8a:	4f 92       	push	r4
    1c8c:	5f 92       	push	r5
    1c8e:	6f 92       	push	r6
    1c90:	7f 92       	push	r7
    1c92:	8f 92       	push	r8
    1c94:	9f 92       	push	r9
    1c96:	af 92       	push	r10
    1c98:	bf 92       	push	r11
    1c9a:	cf 92       	push	r12
    1c9c:	df 92       	push	r13
    1c9e:	ef 92       	push	r14
    1ca0:	ff 92       	push	r15
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	cd b7       	in	r28, 0x3d	; 61
    1cac:	de b7       	in	r29, 0x3e	; 62
    1cae:	ca 1b       	sub	r28, r26
    1cb0:	db 0b       	sbc	r29, r27
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	09 94       	ijmp

00001cbe <__epilogue_restores__>:
    1cbe:	2a 88       	ldd	r2, Y+18	; 0x12
    1cc0:	39 88       	ldd	r3, Y+17	; 0x11
    1cc2:	48 88       	ldd	r4, Y+16	; 0x10
    1cc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cca:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ccc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cce:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cd0:	b9 84       	ldd	r11, Y+9	; 0x09
    1cd2:	c8 84       	ldd	r12, Y+8	; 0x08
    1cd4:	df 80       	ldd	r13, Y+7	; 0x07
    1cd6:	ee 80       	ldd	r14, Y+6	; 0x06
    1cd8:	fd 80       	ldd	r15, Y+5	; 0x05
    1cda:	0c 81       	ldd	r16, Y+4	; 0x04
    1cdc:	1b 81       	ldd	r17, Y+3	; 0x03
    1cde:	aa 81       	ldd	r26, Y+2	; 0x02
    1ce0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ce2:	ce 0f       	add	r28, r30
    1ce4:	d1 1d       	adc	r29, r1
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	ed 01       	movw	r28, r26
    1cf2:	08 95       	ret

00001cf4 <_exit>:
    1cf4:	f8 94       	cli

00001cf6 <__stop_program>:
    1cf6:	ff cf       	rjmp	.-2      	; 0x1cf6 <__stop_program>
